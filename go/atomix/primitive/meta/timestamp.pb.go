// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/primitive/meta/timestamp.proto

package meta

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Timestamp struct {
	// Types that are valid to be assigned to Timestamp:
	//	*Timestamp_PhysicalTimestamp
	//	*Timestamp_LogicalTimestamp
	//	*Timestamp_VectorTimestamp
	//	*Timestamp_EpochTimestamp
	Timestamp isTimestamp_Timestamp `protobuf_oneof:"timestamp"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{0}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

type isTimestamp_Timestamp interface {
	isTimestamp_Timestamp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Timestamp_PhysicalTimestamp struct {
	PhysicalTimestamp *PhysicalTimestamp `protobuf:"bytes,1,opt,name=physical_timestamp,json=physicalTimestamp,proto3,oneof" json:"physical_timestamp,omitempty"`
}
type Timestamp_LogicalTimestamp struct {
	LogicalTimestamp *LogicalTimestamp `protobuf:"bytes,2,opt,name=logical_timestamp,json=logicalTimestamp,proto3,oneof" json:"logical_timestamp,omitempty"`
}
type Timestamp_VectorTimestamp struct {
	VectorTimestamp *VectorTimestamp `protobuf:"bytes,3,opt,name=vector_timestamp,json=vectorTimestamp,proto3,oneof" json:"vector_timestamp,omitempty"`
}
type Timestamp_EpochTimestamp struct {
	EpochTimestamp *EpochTimestamp `protobuf:"bytes,4,opt,name=epoch_timestamp,json=epochTimestamp,proto3,oneof" json:"epoch_timestamp,omitempty"`
}

func (*Timestamp_PhysicalTimestamp) isTimestamp_Timestamp() {}
func (*Timestamp_LogicalTimestamp) isTimestamp_Timestamp()  {}
func (*Timestamp_VectorTimestamp) isTimestamp_Timestamp()   {}
func (*Timestamp_EpochTimestamp) isTimestamp_Timestamp()    {}

func (m *Timestamp) GetTimestamp() isTimestamp_Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Timestamp) GetPhysicalTimestamp() *PhysicalTimestamp {
	if x, ok := m.GetTimestamp().(*Timestamp_PhysicalTimestamp); ok {
		return x.PhysicalTimestamp
	}
	return nil
}

func (m *Timestamp) GetLogicalTimestamp() *LogicalTimestamp {
	if x, ok := m.GetTimestamp().(*Timestamp_LogicalTimestamp); ok {
		return x.LogicalTimestamp
	}
	return nil
}

func (m *Timestamp) GetVectorTimestamp() *VectorTimestamp {
	if x, ok := m.GetTimestamp().(*Timestamp_VectorTimestamp); ok {
		return x.VectorTimestamp
	}
	return nil
}

func (m *Timestamp) GetEpochTimestamp() *EpochTimestamp {
	if x, ok := m.GetTimestamp().(*Timestamp_EpochTimestamp); ok {
		return x.EpochTimestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Timestamp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Timestamp_PhysicalTimestamp)(nil),
		(*Timestamp_LogicalTimestamp)(nil),
		(*Timestamp_VectorTimestamp)(nil),
		(*Timestamp_EpochTimestamp)(nil),
	}
}

type LogicalTimestamp struct {
	Time LogicalTime `protobuf:"varint,1,opt,name=time,proto3,casttype=LogicalTime" json:"time,omitempty"`
}

func (m *LogicalTimestamp) Reset()         { *m = LogicalTimestamp{} }
func (m *LogicalTimestamp) String() string { return proto.CompactTextString(m) }
func (*LogicalTimestamp) ProtoMessage()    {}
func (*LogicalTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{1}
}
func (m *LogicalTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicalTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicalTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicalTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalTimestamp.Merge(m, src)
}
func (m *LogicalTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *LogicalTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalTimestamp proto.InternalMessageInfo

func (m *LogicalTimestamp) GetTime() LogicalTime {
	if m != nil {
		return m.Time
	}
	return 0
}

type VectorTimestamp struct {
	Time []LogicalTime `protobuf:"varint,1,rep,packed,name=time,proto3,casttype=LogicalTime" json:"time,omitempty"`
}

func (m *VectorTimestamp) Reset()         { *m = VectorTimestamp{} }
func (m *VectorTimestamp) String() string { return proto.CompactTextString(m) }
func (*VectorTimestamp) ProtoMessage()    {}
func (*VectorTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{2}
}
func (m *VectorTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VectorTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VectorTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorTimestamp.Merge(m, src)
}
func (m *VectorTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *VectorTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_VectorTimestamp proto.InternalMessageInfo

func (m *VectorTimestamp) GetTime() []LogicalTime {
	if m != nil {
		return m.Time
	}
	return nil
}

type PhysicalTimestamp struct {
	Time PhysicalTime `protobuf:"bytes,1,opt,name=time,proto3,casttype=PhysicalTime,stdtime" json:"time"`
}

func (m *PhysicalTimestamp) Reset()         { *m = PhysicalTimestamp{} }
func (m *PhysicalTimestamp) String() string { return proto.CompactTextString(m) }
func (*PhysicalTimestamp) ProtoMessage()    {}
func (*PhysicalTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{3}
}
func (m *PhysicalTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhysicalTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhysicalTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhysicalTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalTimestamp.Merge(m, src)
}
func (m *PhysicalTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *PhysicalTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalTimestamp proto.InternalMessageInfo

func (m *PhysicalTimestamp) GetTime() PhysicalTime {
	if m != nil {
		return m.Time
	}
	return PhysicalTime{}
}

type Epoch struct {
	Num EpochNum `protobuf:"varint,1,opt,name=num,proto3,casttype=EpochNum" json:"num,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{4}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetNum() EpochNum {
	if m != nil {
		return m.Num
	}
	return 0
}

type EpochTimestamp struct {
	Epoch    Epoch    `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch"`
	Sequence Sequence `protobuf:"bytes,2,opt,name=sequence,proto3" json:"sequence"`
}

func (m *EpochTimestamp) Reset()         { *m = EpochTimestamp{} }
func (m *EpochTimestamp) String() string { return proto.CompactTextString(m) }
func (*EpochTimestamp) ProtoMessage()    {}
func (*EpochTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{5}
}
func (m *EpochTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochTimestamp.Merge(m, src)
}
func (m *EpochTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *EpochTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_EpochTimestamp proto.InternalMessageInfo

func (m *EpochTimestamp) GetEpoch() Epoch {
	if m != nil {
		return m.Epoch
	}
	return Epoch{}
}

func (m *EpochTimestamp) GetSequence() Sequence {
	if m != nil {
		return m.Sequence
	}
	return Sequence{}
}

type Sequence struct {
	Num SequenceNum `protobuf:"varint,1,opt,name=num,proto3,casttype=SequenceNum" json:"num,omitempty"`
}

func (m *Sequence) Reset()         { *m = Sequence{} }
func (m *Sequence) String() string { return proto.CompactTextString(m) }
func (*Sequence) ProtoMessage()    {}
func (*Sequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{6}
}
func (m *Sequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sequence.Merge(m, src)
}
func (m *Sequence) XXX_Size() int {
	return m.Size()
}
func (m *Sequence) XXX_DiscardUnknown() {
	xxx_messageInfo_Sequence.DiscardUnknown(m)
}

var xxx_messageInfo_Sequence proto.InternalMessageInfo

func (m *Sequence) GetNum() SequenceNum {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*Timestamp)(nil), "atomix.primitive.meta.Timestamp")
	proto.RegisterType((*LogicalTimestamp)(nil), "atomix.primitive.meta.LogicalTimestamp")
	proto.RegisterType((*VectorTimestamp)(nil), "atomix.primitive.meta.VectorTimestamp")
	proto.RegisterType((*PhysicalTimestamp)(nil), "atomix.primitive.meta.PhysicalTimestamp")
	proto.RegisterType((*Epoch)(nil), "atomix.primitive.meta.Epoch")
	proto.RegisterType((*EpochTimestamp)(nil), "atomix.primitive.meta.EpochTimestamp")
	proto.RegisterType((*Sequence)(nil), "atomix.primitive.meta.Sequence")
}

func init() {
	proto.RegisterFile("atomix/primitive/meta/timestamp.proto", fileDescriptor_4d95b12fc10183fd)
}

var fileDescriptor_4d95b12fc10183fd = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0xaa, 0xd3, 0x40,
	0x18, 0xc5, 0x93, 0xdb, 0x5c, 0x69, 0xbf, 0x94, 0xa6, 0x1d, 0x14, 0x4a, 0x91, 0x44, 0x23, 0xb5,
	0xdd, 0x38, 0x81, 0x0a, 0xea, 0xd6, 0x80, 0xd0, 0x85, 0x48, 0x49, 0xa5, 0xe0, 0x42, 0x24, 0x0d,
	0x63, 0x1a, 0x48, 0x3a, 0xb1, 0x4d, 0x8a, 0x3e, 0x84, 0xd0, 0xc7, 0xea, 0xb2, 0x4b, 0x57, 0x51,
	0xda, 0x37, 0x70, 0xd9, 0x95, 0x64, 0xf2, 0xc7, 0x69, 0x34, 0x77, 0x17, 0xbe, 0xef, 0x9c, 0xdf,
	0x9c, 0x39, 0x19, 0x18, 0xda, 0x11, 0x0d, 0xbc, 0xaf, 0x46, 0xb8, 0xf1, 0x02, 0x2f, 0xf2, 0x76,
	0xc4, 0x08, 0x48, 0x64, 0x1b, 0x91, 0x17, 0x90, 0x6d, 0x64, 0x07, 0x21, 0x0e, 0x37, 0x34, 0xa2,
	0xe8, 0x41, 0x26, 0xc3, 0xa5, 0x0c, 0xa7, 0xb2, 0x81, 0xe6, 0x52, 0xea, 0xfa, 0xc4, 0x60, 0xa2,
	0x65, 0xfc, 0xb9, 0xea, 0x1b, 0xdc, 0x77, 0xa9, 0x4b, 0xd9, 0xa7, 0x91, 0x7e, 0x65, 0x53, 0xfd,
	0xf7, 0x0d, 0xb4, 0xde, 0x17, 0x4a, 0xf4, 0x01, 0x50, 0xb8, 0xfa, 0xb6, 0xf5, 0x1c, 0xdb, 0xff,
	0x54, 0xfa, 0xfb, 0xe2, 0x23, 0x71, 0x2c, 0x4f, 0xc6, 0xf8, 0xbf, 0x07, 0xe3, 0x59, 0x6e, 0x28,
	0x29, 0x53, 0xc1, 0xea, 0x85, 0xd5, 0x21, 0x5a, 0x40, 0xcf, 0xa7, 0x6e, 0x85, 0x7c, 0xc3, 0xc8,
	0xa3, 0x1a, 0xf2, 0xdb, 0x4c, 0xcf, 0x83, 0xbb, 0x7e, 0x65, 0x86, 0xe6, 0xd0, 0xdd, 0x11, 0x27,
	0xa2, 0x1b, 0x0e, 0xdb, 0x60, 0xd8, 0xa7, 0x35, 0xd8, 0x05, 0x93, 0xf3, 0x54, 0x65, 0x77, 0x3d,
	0x42, 0x33, 0x50, 0x48, 0x48, 0x9d, 0x15, 0xc7, 0x94, 0x18, 0x73, 0x58, 0xc3, 0x7c, 0x93, 0xaa,
	0x79, 0x64, 0x87, 0x5c, 0x4d, 0x4c, 0x19, 0x5a, 0x25, 0x4b, 0x7f, 0x09, 0xdd, 0xea, 0xdd, 0xd0,
	0x13, 0x90, 0x52, 0x01, 0x2b, 0x5b, 0x32, 0x95, 0x4b, 0xa2, 0xc9, 0x9c, 0xc6, 0x62, 0x4b, 0xfd,
	0x05, 0x28, 0x95, 0xf4, 0x9c, 0xaf, 0x51, 0xef, 0xfb, 0x08, 0xbd, 0x7f, 0x7e, 0x13, 0x9a, 0x72,
	0x27, 0xca, 0x93, 0x01, 0xce, 0x1e, 0x10, 0x2e, 0x1e, 0x10, 0xfe, 0x1b, 0xbe, 0x7f, 0x48, 0x34,
	0xe1, 0x92, 0x68, 0x6d, 0x1e, 0xb2, 0xff, 0xa9, 0x89, 0x39, 0x7e, 0x04, 0xb7, 0xac, 0x00, 0xa4,
	0x42, 0x63, 0x1d, 0x07, 0xf9, 0x1d, 0xda, 0x97, 0x44, 0x6b, 0xb2, 0xf9, 0xbb, 0x38, 0xb0, 0xd2,
	0x85, 0xfe, 0x5d, 0x84, 0xce, 0x75, 0x55, 0xe8, 0x15, 0xdc, 0xb2, 0xaa, 0xf2, 0x18, 0x0f, 0xef,
	0x2a, 0xd8, 0x94, 0xd2, 0x20, 0x56, 0x66, 0x40, 0xaf, 0xa1, 0xb9, 0x25, 0x5f, 0x62, 0xb2, 0x76,
	0x48, 0xfe, 0x90, 0xb4, 0x1a, 0xf3, 0x3c, 0x97, 0xe5, 0xfe, 0xd2, 0xa6, 0x3f, 0x83, 0x66, 0xb1,
	0x43, 0x8f, 0xf9, 0xec, 0xac, 0xc7, 0x62, 0x55, 0xc4, 0x37, 0xfb, 0x87, 0x93, 0x2a, 0x1e, 0x4f,
	0xaa, 0xf8, 0xeb, 0xa4, 0x8a, 0xfb, 0xb3, 0x2a, 0x1c, 0xcf, 0xaa, 0xf0, 0xe3, 0xac, 0x0a, 0xcb,
	0x7b, 0xac, 0xb5, 0xe7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xd6, 0x01, 0x96, 0xc4, 0x03,
	0x00, 0x00,
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size := m.Timestamp.Size()
			i -= size
			if _, err := m.Timestamp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Timestamp_PhysicalTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp_PhysicalTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PhysicalTimestamp != nil {
		{
			size, err := m.PhysicalTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimestamp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Timestamp_LogicalTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp_LogicalTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogicalTimestamp != nil {
		{
			size, err := m.LogicalTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimestamp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Timestamp_VectorTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp_VectorTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VectorTimestamp != nil {
		{
			size, err := m.VectorTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimestamp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Timestamp_EpochTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp_EpochTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EpochTimestamp != nil {
		{
			size, err := m.EpochTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimestamp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *LogicalTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicalTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicalTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintTimestamp(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VectorTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VectorTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Time) > 0 {
		dAtA6 := make([]byte, len(m.Time)*10)
		var j5 int
		for _, num := range m.Time {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTimestamp(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PhysicalTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhysicalTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhysicalTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintTimestamp(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintTimestamp(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Sequence.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTimestamp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTimestamp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Sequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		i = encodeVarintTimestamp(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimestamp(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimestamp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		n += m.Timestamp.Size()
	}
	return n
}

func (m *Timestamp_PhysicalTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhysicalTimestamp != nil {
		l = m.PhysicalTimestamp.Size()
		n += 1 + l + sovTimestamp(uint64(l))
	}
	return n
}
func (m *Timestamp_LogicalTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogicalTimestamp != nil {
		l = m.LogicalTimestamp.Size()
		n += 1 + l + sovTimestamp(uint64(l))
	}
	return n
}
func (m *Timestamp_VectorTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VectorTimestamp != nil {
		l = m.VectorTimestamp.Size()
		n += 1 + l + sovTimestamp(uint64(l))
	}
	return n
}
func (m *Timestamp_EpochTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochTimestamp != nil {
		l = m.EpochTimestamp.Size()
		n += 1 + l + sovTimestamp(uint64(l))
	}
	return n
}
func (m *LogicalTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTimestamp(uint64(m.Time))
	}
	return n
}

func (m *VectorTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovTimestamp(uint64(e))
		}
		n += 1 + sovTimestamp(uint64(l)) + l
	}
	return n
}

func (m *PhysicalTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovTimestamp(uint64(l))
	return n
}

func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovTimestamp(uint64(m.Num))
	}
	return n
}

func (m *EpochTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Epoch.Size()
	n += 1 + l + sovTimestamp(uint64(l))
	l = m.Sequence.Size()
	n += 1 + l + sovTimestamp(uint64(l))
	return n
}

func (m *Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovTimestamp(uint64(m.Num))
	}
	return n
}

func sovTimestamp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimestamp(x uint64) (n int) {
	return sovTimestamp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PhysicalTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &Timestamp_PhysicalTimestamp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicalTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &Timestamp_LogicalTimestamp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VectorTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VectorTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &Timestamp_VectorTimestamp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EpochTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &Timestamp_EpochTimestamp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicalTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicalTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicalTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= LogicalTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VectorTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VectorTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v LogicalTime
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTimestamp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LogicalTime(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTimestamp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTimestamp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTimestamp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Time) == 0 {
					m.Time = make([]LogicalTime, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LogicalTime
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTimestamp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LogicalTime(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhysicalTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhysicalTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhysicalTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= EpochNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sequence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= SequenceNum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimestamp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimestamp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimestamp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimestamp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimestamp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimestamp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimestamp = fmt.Errorf("proto: unexpected end of group")
)
