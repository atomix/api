// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/primitive/meta/timestamp.proto

package meta

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Timestamp struct {
	// Types that are valid to be assigned to Timestamp:
	//	*Timestamp_LogicalTimestamp
	//	*Timestamp_WallClockTimestamp
	//	*Timestamp_EpochTimestamp
	Timestamp isTimestamp_Timestamp `protobuf_oneof:"timestamp"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{0}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

type isTimestamp_Timestamp interface {
	isTimestamp_Timestamp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Timestamp_LogicalTimestamp struct {
	LogicalTimestamp *LogicalTimestamp `protobuf:"bytes,1,opt,name=logical_timestamp,json=logicalTimestamp,proto3,oneof" json:"logical_timestamp,omitempty"`
}
type Timestamp_WallClockTimestamp struct {
	WallClockTimestamp *WallClockTimestamp `protobuf:"bytes,2,opt,name=wall_clock_timestamp,json=wallClockTimestamp,proto3,oneof" json:"wall_clock_timestamp,omitempty"`
}
type Timestamp_EpochTimestamp struct {
	EpochTimestamp *EpochTimestamp `protobuf:"bytes,3,opt,name=epoch_timestamp,json=epochTimestamp,proto3,oneof" json:"epoch_timestamp,omitempty"`
}

func (*Timestamp_LogicalTimestamp) isTimestamp_Timestamp()   {}
func (*Timestamp_WallClockTimestamp) isTimestamp_Timestamp() {}
func (*Timestamp_EpochTimestamp) isTimestamp_Timestamp()     {}

func (m *Timestamp) GetTimestamp() isTimestamp_Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Timestamp) GetLogicalTimestamp() *LogicalTimestamp {
	if x, ok := m.GetTimestamp().(*Timestamp_LogicalTimestamp); ok {
		return x.LogicalTimestamp
	}
	return nil
}

func (m *Timestamp) GetWallClockTimestamp() *WallClockTimestamp {
	if x, ok := m.GetTimestamp().(*Timestamp_WallClockTimestamp); ok {
		return x.WallClockTimestamp
	}
	return nil
}

func (m *Timestamp) GetEpochTimestamp() *EpochTimestamp {
	if x, ok := m.GetTimestamp().(*Timestamp_EpochTimestamp); ok {
		return x.EpochTimestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Timestamp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Timestamp_LogicalTimestamp)(nil),
		(*Timestamp_WallClockTimestamp)(nil),
		(*Timestamp_EpochTimestamp)(nil),
	}
}

type LogicalTimestamp struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogicalTimestamp) Reset()         { *m = LogicalTimestamp{} }
func (m *LogicalTimestamp) String() string { return proto.CompactTextString(m) }
func (*LogicalTimestamp) ProtoMessage()    {}
func (*LogicalTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{1}
}
func (m *LogicalTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicalTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogicalTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogicalTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalTimestamp.Merge(m, src)
}
func (m *LogicalTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *LogicalTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalTimestamp proto.InternalMessageInfo

func (m *LogicalTimestamp) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type WallClockTimestamp struct {
	Value time.Time `protobuf:"bytes,1,opt,name=value,proto3,stdtime" json:"value"`
}

func (m *WallClockTimestamp) Reset()         { *m = WallClockTimestamp{} }
func (m *WallClockTimestamp) String() string { return proto.CompactTextString(m) }
func (*WallClockTimestamp) ProtoMessage()    {}
func (*WallClockTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{2}
}
func (m *WallClockTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WallClockTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WallClockTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WallClockTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WallClockTimestamp.Merge(m, src)
}
func (m *WallClockTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *WallClockTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_WallClockTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_WallClockTimestamp proto.InternalMessageInfo

func (m *WallClockTimestamp) GetValue() time.Time {
	if m != nil {
		return m.Value
	}
	return time.Time{}
}

type Epoch struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{3}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type EpochTimestamp struct {
	Epoch          Epoch  `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch"`
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (m *EpochTimestamp) Reset()         { *m = EpochTimestamp{} }
func (m *EpochTimestamp) String() string { return proto.CompactTextString(m) }
func (*EpochTimestamp) ProtoMessage()    {}
func (*EpochTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d95b12fc10183fd, []int{4}
}
func (m *EpochTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochTimestamp.Merge(m, src)
}
func (m *EpochTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *EpochTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_EpochTimestamp proto.InternalMessageInfo

func (m *EpochTimestamp) GetEpoch() Epoch {
	if m != nil {
		return m.Epoch
	}
	return Epoch{}
}

func (m *EpochTimestamp) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*Timestamp)(nil), "atomix.primitive.meta.Timestamp")
	proto.RegisterType((*LogicalTimestamp)(nil), "atomix.primitive.meta.LogicalTimestamp")
	proto.RegisterType((*WallClockTimestamp)(nil), "atomix.primitive.meta.WallClockTimestamp")
	proto.RegisterType((*Epoch)(nil), "atomix.primitive.meta.Epoch")
	proto.RegisterType((*EpochTimestamp)(nil), "atomix.primitive.meta.EpochTimestamp")
}

func init() {
	proto.RegisterFile("atomix/primitive/meta/timestamp.proto", fileDescriptor_4d95b12fc10183fd)
}

var fileDescriptor_4d95b12fc10183fd = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0x02, 0x41,
	0x1c, 0xc6, 0x77, 0x4d, 0x23, 0xff, 0x82, 0xda, 0x60, 0x20, 0x52, 0x6b, 0x08, 0xa2, 0x5d, 0x66,
	0xc1, 0x2e, 0xd1, 0xd1, 0x08, 0x3a, 0x44, 0xc8, 0x12, 0x75, 0x0a, 0x19, 0x97, 0x69, 0x5b, 0x9a,
	0x75, 0x36, 0x9d, 0xd5, 0x1e, 0xc3, 0x57, 0xe8, 0x6d, 0x3c, 0x7a, 0xec, 0x54, 0xa1, 0x2f, 0x12,
	0x3b, 0xd3, 0x6e, 0xab, 0xb6, 0xdd, 0x66, 0x3e, 0xbe, 0xff, 0xef, 0x9b, 0x6f, 0xfe, 0xd0, 0x24,
	0x82, 0x7b, 0xee, 0xab, 0xe9, 0x8f, 0x5c, 0xcf, 0x15, 0xee, 0x84, 0x9a, 0x1e, 0x15, 0xc4, 0x14,
	0xae, 0x47, 0xc7, 0x82, 0x78, 0x3e, 0xf6, 0x47, 0x5c, 0x70, 0x74, 0xa0, 0x6c, 0x38, 0xb6, 0xe1,
	0xd0, 0x56, 0xab, 0x3b, 0x9c, 0x3b, 0x8c, 0x9a, 0xd2, 0x34, 0x08, 0x1e, 0x37, 0xe7, 0x6a, 0x15,
	0x87, 0x3b, 0x5c, 0x1e, 0xcd, 0xf0, 0xa4, 0xd4, 0xc6, 0x5b, 0x06, 0xf2, 0xb7, 0x91, 0x13, 0xdd,
	0xc1, 0x3e, 0xe3, 0x8e, 0x6b, 0x13, 0xd6, 0x8f, 0xc7, 0xab, 0xfa, 0xb1, 0xde, 0x2e, 0x74, 0x5a,
	0xf8, 0xcf, 0x5c, 0x7c, 0xad, 0xfc, 0x31, 0xe3, 0x4a, 0xb3, 0xca, 0x6c, 0x43, 0x43, 0x0f, 0x50,
	0x99, 0x12, 0xc6, 0xfa, 0x36, 0xe3, 0xf6, 0x73, 0x02, 0x9d, 0x91, 0xe8, 0x93, 0x14, 0xf4, 0x3d,
	0x61, 0xec, 0x22, 0x9c, 0x48, 0xc2, 0xd1, 0x74, 0x4b, 0x45, 0x3d, 0x28, 0x51, 0x9f, 0xdb, 0x4f,
	0x09, 0xf2, 0x8e, 0x24, 0x37, 0x53, 0xc8, 0x97, 0xa1, 0x3b, 0x49, 0x2d, 0xd2, 0x35, 0xa5, 0x5b,
	0x80, 0x7c, 0xcc, 0x6a, 0xb4, 0xa1, 0xbc, 0xd9, 0x12, 0x55, 0x20, 0x37, 0x21, 0x2c, 0xa0, 0xf2,
	0x77, 0xb2, 0x96, 0xba, 0x34, 0x7a, 0x80, 0xb6, 0x1f, 0x8d, 0xce, 0x93, 0xde, 0x42, 0xa7, 0x86,
	0xd5, 0xaa, 0x70, 0xb4, 0x2a, 0xfc, 0x9b, 0xbb, 0x37, 0xff, 0xa8, 0x6b, 0xb3, 0xcf, 0xba, 0x1e,
	0x11, 0x8f, 0x20, 0x27, 0x1f, 0x9b, 0x12, 0x38, 0x86, 0xe2, 0x7a, 0x17, 0x74, 0x06, 0x39, 0xd9,
	0xe5, 0x27, 0xec, 0xf0, 0xbf, 0x1f, 0xe8, 0x66, 0xc3, 0x38, 0x4b, 0x0d, 0xa0, 0x16, 0x94, 0xc6,
	0xf4, 0x25, 0xa0, 0x43, 0x9b, 0xf6, 0x87, 0x81, 0x37, 0xa0, 0x23, 0xb9, 0x9f, 0xac, 0x55, 0x8c,
	0xe4, 0x1b, 0xa9, 0x76, 0xab, 0xf3, 0xa5, 0xa1, 0x2f, 0x96, 0x86, 0xfe, 0xb5, 0x34, 0xf4, 0xd9,
	0xca, 0xd0, 0x16, 0x2b, 0x43, 0x7b, 0x5f, 0x19, 0xda, 0x60, 0x57, 0x56, 0x3a, 0xfd, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x2a, 0xe8, 0xbd, 0x09, 0xcb, 0x02, 0x00, 0x00,
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size := m.Timestamp.Size()
			i -= size
			if _, err := m.Timestamp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Timestamp_LogicalTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp_LogicalTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogicalTimestamp != nil {
		{
			size, err := m.LogicalTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimestamp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Timestamp_WallClockTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp_WallClockTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WallClockTimestamp != nil {
		{
			size, err := m.WallClockTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimestamp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Timestamp_EpochTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp_EpochTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EpochTimestamp != nil {
		{
			size, err := m.EpochTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimestamp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *LogicalTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicalTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicalTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintTimestamp(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WallClockTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WallClockTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WallClockTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Value, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Value):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTimestamp(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintTimestamp(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		i = encodeVarintTimestamp(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTimestamp(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTimestamp(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimestamp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		n += m.Timestamp.Size()
	}
	return n
}

func (m *Timestamp_LogicalTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogicalTimestamp != nil {
		l = m.LogicalTimestamp.Size()
		n += 1 + l + sovTimestamp(uint64(l))
	}
	return n
}
func (m *Timestamp_WallClockTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WallClockTimestamp != nil {
		l = m.WallClockTimestamp.Size()
		n += 1 + l + sovTimestamp(uint64(l))
	}
	return n
}
func (m *Timestamp_EpochTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochTimestamp != nil {
		l = m.EpochTimestamp.Size()
		n += 1 + l + sovTimestamp(uint64(l))
	}
	return n
}
func (m *LogicalTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovTimestamp(uint64(m.Value))
	}
	return n
}

func (m *WallClockTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Value)
	n += 1 + l + sovTimestamp(uint64(l))
	return n
}

func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovTimestamp(uint64(m.Value))
	}
	return n
}

func (m *EpochTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Epoch.Size()
	n += 1 + l + sovTimestamp(uint64(l))
	if m.SequenceNumber != 0 {
		n += 1 + sovTimestamp(uint64(m.SequenceNumber))
	}
	return n
}

func sovTimestamp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimestamp(x uint64) (n int) {
	return sovTimestamp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicalTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &Timestamp_LogicalTimestamp{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallClockTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WallClockTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &Timestamp_WallClockTimestamp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EpochTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &Timestamp_EpochTimestamp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicalTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicalTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicalTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WallClockTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WallClockTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WallClockTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Value, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimestamp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimestamp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimestamp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTimestamp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimestamp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimestamp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimestamp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimestamp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimestamp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimestamp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimestamp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimestamp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimestamp = fmt.Errorf("proto: unexpected end of group")
)
