// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/primitive/meta/object.proto

package meta

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ObjectMeta struct {
	Revision *Revision `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	// Types that are valid to be assigned to Timestamp:
	//	*ObjectMeta_PhysicalTimestamp
	//	*ObjectMeta_LogicalTimestamp
	//	*ObjectMeta_VectorTimestamp
	//	*ObjectMeta_EpochTimestamp
	Timestamp isObjectMeta_Timestamp `protobuf_oneof:"timestamp"`
}

func (m *ObjectMeta) Reset()         { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()    {}
func (*ObjectMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6b6f53349a8ecc, []int{0}
}
func (m *ObjectMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectMeta.Merge(m, src)
}
func (m *ObjectMeta) XXX_Size() int {
	return m.Size()
}
func (m *ObjectMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectMeta proto.InternalMessageInfo

type isObjectMeta_Timestamp interface {
	isObjectMeta_Timestamp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ObjectMeta_PhysicalTimestamp struct {
	PhysicalTimestamp *PhysicalTimestamp `protobuf:"bytes,2,opt,name=physical_timestamp,json=physicalTimestamp,proto3,oneof" json:"physical_timestamp,omitempty"`
}
type ObjectMeta_LogicalTimestamp struct {
	LogicalTimestamp *LogicalTimestamp `protobuf:"bytes,3,opt,name=logical_timestamp,json=logicalTimestamp,proto3,oneof" json:"logical_timestamp,omitempty"`
}
type ObjectMeta_VectorTimestamp struct {
	VectorTimestamp *VectorTimestamp `protobuf:"bytes,4,opt,name=vector_timestamp,json=vectorTimestamp,proto3,oneof" json:"vector_timestamp,omitempty"`
}
type ObjectMeta_EpochTimestamp struct {
	EpochTimestamp *EpochTimestamp `protobuf:"bytes,5,opt,name=epoch_timestamp,json=epochTimestamp,proto3,oneof" json:"epoch_timestamp,omitempty"`
}

func (*ObjectMeta_PhysicalTimestamp) isObjectMeta_Timestamp() {}
func (*ObjectMeta_LogicalTimestamp) isObjectMeta_Timestamp()  {}
func (*ObjectMeta_VectorTimestamp) isObjectMeta_Timestamp()   {}
func (*ObjectMeta_EpochTimestamp) isObjectMeta_Timestamp()    {}

func (m *ObjectMeta) GetTimestamp() isObjectMeta_Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ObjectMeta) GetRevision() *Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *ObjectMeta) GetPhysicalTimestamp() *PhysicalTimestamp {
	if x, ok := m.GetTimestamp().(*ObjectMeta_PhysicalTimestamp); ok {
		return x.PhysicalTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetLogicalTimestamp() *LogicalTimestamp {
	if x, ok := m.GetTimestamp().(*ObjectMeta_LogicalTimestamp); ok {
		return x.LogicalTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetVectorTimestamp() *VectorTimestamp {
	if x, ok := m.GetTimestamp().(*ObjectMeta_VectorTimestamp); ok {
		return x.VectorTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetEpochTimestamp() *EpochTimestamp {
	if x, ok := m.GetTimestamp().(*ObjectMeta_EpochTimestamp); ok {
		return x.EpochTimestamp
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ObjectMeta) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ObjectMeta_PhysicalTimestamp)(nil),
		(*ObjectMeta_LogicalTimestamp)(nil),
		(*ObjectMeta_VectorTimestamp)(nil),
		(*ObjectMeta_EpochTimestamp)(nil),
	}
}

func init() {
	proto.RegisterType((*ObjectMeta)(nil), "atomix.primitive.meta.ObjectMeta")
}

func init() { proto.RegisterFile("atomix/primitive/meta/object.proto", fileDescriptor_5a6b6f53349a8ecc) }

var fileDescriptor_5a6b6f53349a8ecc = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0x2c, 0xc9, 0xcf,
	0xcd, 0xac, 0xd0, 0x2f, 0x28, 0xca, 0xcc, 0xcd, 0x2c, 0xc9, 0x2c, 0x4b, 0xd5, 0xcf, 0x4d, 0x2d,
	0x49, 0xd4, 0xcf, 0x4f, 0xca, 0x4a, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x85, 0xa8, 0xd1, 0x83, 0xab, 0xd1, 0x03, 0xa9, 0x91, 0x52, 0xc5, 0xae, 0xb5, 0x24, 0x33, 0x37,
	0xb5, 0xb8, 0x24, 0x31, 0xb7, 0x00, 0xa2, 0x5b, 0x69, 0x03, 0x33, 0x17, 0x97, 0x3f, 0xd8, 0x38,
	0xdf, 0xd4, 0x92, 0x44, 0x21, 0x6b, 0x2e, 0x8e, 0xa2, 0xd4, 0xb2, 0xcc, 0xe2, 0xcc, 0xfc, 0x3c,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x79, 0x3d, 0xac, 0xe6, 0xeb, 0x05, 0x41, 0x95, 0x05,
	0xc1, 0x35, 0x08, 0x45, 0x72, 0x09, 0x15, 0x64, 0x54, 0x16, 0x67, 0x26, 0x27, 0xe6, 0xc4, 0xc3,
	0xed, 0x91, 0x60, 0x02, 0x1b, 0xa3, 0x81, 0xc3, 0x98, 0x00, 0xa8, 0x86, 0x10, 0x98, 0x7a, 0x0f,
	0x86, 0x20, 0xc1, 0x02, 0x74, 0x41, 0xa1, 0x30, 0x2e, 0xc1, 0x9c, 0xfc, 0x74, 0x34, 0x93, 0x99,
	0xc1, 0x26, 0xab, 0xe3, 0x30, 0xd9, 0x07, 0xa2, 0x1e, 0xd9, 0x60, 0x81, 0x1c, 0x34, 0x31, 0xa1,
	0x60, 0x2e, 0x81, 0xb2, 0xd4, 0xe4, 0x92, 0xfc, 0x22, 0x24, 0x63, 0x59, 0xc0, 0xc6, 0xaa, 0xe1,
	0x30, 0x36, 0x0c, 0xac, 0x1c, 0xd9, 0x54, 0xfe, 0x32, 0x54, 0x21, 0xa1, 0x00, 0x2e, 0xfe, 0xd4,
	0x82, 0xfc, 0xe4, 0x0c, 0x24, 0x33, 0x59, 0xc1, 0x66, 0xaa, 0xe2, 0x30, 0xd3, 0x15, 0xa4, 0x1a,
	0xd9, 0x48, 0xbe, 0x54, 0x14, 0x11, 0x27, 0x6e, 0x2e, 0x4e, 0xb8, 0x59, 0x4e, 0x12, 0x27, 0x1e,
	0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17,
	0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x90, 0xc4, 0x06, 0x8e, 0x53, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x25, 0x8a, 0x27, 0x78, 0x37, 0x02, 0x00, 0x00,
}

func (m *ObjectMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size := m.Timestamp.Size()
			i -= size
			if _, err := m.Timestamp.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Revision != nil {
		{
			size, err := m.Revision.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectMeta_PhysicalTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectMeta_PhysicalTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PhysicalTimestamp != nil {
		{
			size, err := m.PhysicalTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ObjectMeta_LogicalTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectMeta_LogicalTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogicalTimestamp != nil {
		{
			size, err := m.LogicalTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ObjectMeta_VectorTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectMeta_VectorTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VectorTimestamp != nil {
		{
			size, err := m.VectorTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ObjectMeta_EpochTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectMeta_EpochTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EpochTimestamp != nil {
		{
			size, err := m.EpochTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObjectMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Revision != nil {
		l = m.Revision.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	if m.Timestamp != nil {
		n += m.Timestamp.Size()
	}
	return n
}

func (m *ObjectMeta_PhysicalTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhysicalTimestamp != nil {
		l = m.PhysicalTimestamp.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}
func (m *ObjectMeta_LogicalTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogicalTimestamp != nil {
		l = m.LogicalTimestamp.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}
func (m *ObjectMeta_VectorTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VectorTimestamp != nil {
		l = m.VectorTimestamp.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}
func (m *ObjectMeta_EpochTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochTimestamp != nil {
		l = m.EpochTimestamp.Size()
		n += 1 + l + sovObject(uint64(l))
	}
	return n
}

func sovObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObject(x uint64) (n int) {
	return sovObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revision == nil {
				m.Revision = &Revision{}
			}
			if err := m.Revision.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysicalTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PhysicalTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &ObjectMeta_PhysicalTimestamp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogicalTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &ObjectMeta_LogicalTimestamp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VectorTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VectorTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &ObjectMeta_VectorTimestamp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EpochTimestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Timestamp = &ObjectMeta_EpochTimestamp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObject = fmt.Errorf("proto: unexpected end of group")
)
