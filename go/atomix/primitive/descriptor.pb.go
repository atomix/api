// Code generated by protoc-gen-go. DO NOT EDIT.
// source: atomix/primitive/descriptor.proto

package primitive

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// OperationType is an enum for specifying the type of operation
type OperationType int32

const (
	OperationType_COMMAND  OperationType = 0
	OperationType_QUERY    OperationType = 1
	OperationType_SNAPSHOT OperationType = 2
	OperationType_RESTORE  OperationType = 3
)

var OperationType_name = map[int32]string{
	0: "COMMAND",
	1: "QUERY",
	2: "SNAPSHOT",
	3: "RESTORE",
}

var OperationType_value = map[string]int32{
	"COMMAND":  0,
	"QUERY":    1,
	"SNAPSHOT": 2,
	"RESTORE":  3,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}

func (OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d554510a2ebd9555, []int{0}
}

// PartitionStrategy is an enum for indicating the strategy used to partition a primitive
type PartitionStrategy int32

const (
	PartitionStrategy_NONE        PartitionStrategy = 0
	PartitionStrategy_HASH        PartitionStrategy = 1
	PartitionStrategy_RANGE       PartitionStrategy = 2
	PartitionStrategy_RANDOM      PartitionStrategy = 3
	PartitionStrategy_ROUND_ROBIN PartitionStrategy = 4
)

var PartitionStrategy_name = map[int32]string{
	0: "NONE",
	1: "HASH",
	2: "RANGE",
	3: "RANDOM",
	4: "ROUND_ROBIN",
}

var PartitionStrategy_value = map[string]int32{
	"NONE":        0,
	"HASH":        1,
	"RANGE":       2,
	"RANDOM":      3,
	"ROUND_ROBIN": 4,
}

func (x PartitionStrategy) String() string {
	return proto.EnumName(PartitionStrategy_name, int32(x))
}

func (PartitionStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d554510a2ebd9555, []int{1}
}

// AggregateStrategy is an enum for indicating the strategy used to aggregate a field
type AggregateStrategy int32

const (
	AggregateStrategy_CHOOSE_FIRST AggregateStrategy = 0
	AggregateStrategy_APPEND       AggregateStrategy = 1
	AggregateStrategy_SUM          AggregateStrategy = 2
)

var AggregateStrategy_name = map[int32]string{
	0: "CHOOSE_FIRST",
	1: "APPEND",
	2: "SUM",
}

var AggregateStrategy_value = map[string]int32{
	"CHOOSE_FIRST": 0,
	"APPEND":       1,
	"SUM":          2,
}

func (x AggregateStrategy) String() string {
	return proto.EnumName(AggregateStrategy_name, int32(x))
}

func (AggregateStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d554510a2ebd9555, []int{2}
}

var E_Type = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         50000,
	Name:          "atomix.primitive.type",
	Tag:           "bytes,50000,opt,name=type",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Partition = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50001,
	Name:          "atomix.primitive.partition",
	Tag:           "varint,50001,opt,name=partition",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Opname = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51000,
	Name:          "atomix.primitive.opname",
	Tag:           "bytes,51000,opt,name=opname",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Optype = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*OperationType)(nil),
	Field:         51001,
	Name:          "atomix.primitive.optype",
	Tag:           "varint,51001,opt,name=optype,enum=atomix.primitive.OperationType",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Partitionby = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*PartitionStrategy)(nil),
	Field:         51002,
	Name:          "atomix.primitive.partitionby",
	Tag:           "varint,51002,opt,name=partitionby,enum=atomix.primitive.PartitionStrategy",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Async = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         51003,
	Name:          "atomix.primitive.async",
	Tag:           "varint,51003,opt,name=async",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Header = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52000,
	Name:          "atomix.primitive.header",
	Tag:           "varint,52000,opt,name=header",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Input = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52001,
	Name:          "atomix.primitive.input",
	Tag:           "varint,52001,opt,name=input",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Output = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52002,
	Name:          "atomix.primitive.output",
	Tag:           "varint,52002,opt,name=output",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Partitionkey = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52003,
	Name:          "atomix.primitive.partitionkey",
	Tag:           "varint,52003,opt,name=partitionkey",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Partitionrange = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         52004,
	Name:          "atomix.primitive.partitionrange",
	Tag:           "varint,52004,opt,name=partitionrange",
	Filename:      "atomix/primitive/descriptor.proto",
}

var E_Aggregate = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*AggregateStrategy)(nil),
	Field:         52005,
	Name:          "atomix.primitive.aggregate",
	Tag:           "varint,52005,opt,name=aggregate,enum=atomix.primitive.AggregateStrategy",
	Filename:      "atomix/primitive/descriptor.proto",
}

func init() {
	proto.RegisterEnum("atomix.primitive.OperationType", OperationType_name, OperationType_value)
	proto.RegisterEnum("atomix.primitive.PartitionStrategy", PartitionStrategy_name, PartitionStrategy_value)
	proto.RegisterEnum("atomix.primitive.AggregateStrategy", AggregateStrategy_name, AggregateStrategy_value)
	proto.RegisterExtension(E_Type)
	proto.RegisterExtension(E_Partition)
	proto.RegisterExtension(E_Opname)
	proto.RegisterExtension(E_Optype)
	proto.RegisterExtension(E_Partitionby)
	proto.RegisterExtension(E_Async)
	proto.RegisterExtension(E_Header)
	proto.RegisterExtension(E_Input)
	proto.RegisterExtension(E_Output)
	proto.RegisterExtension(E_Partitionkey)
	proto.RegisterExtension(E_Partitionrange)
	proto.RegisterExtension(E_Aggregate)
}

func init() { proto.RegisterFile("atomix/primitive/descriptor.proto", fileDescriptor_d554510a2ebd9555) }

var fileDescriptor_d554510a2ebd9555 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x73, 0x6f, 0x72, 0x12, 0xca, 0x74, 0x56, 0x08, 0x09, 0x5a, 0xc4, 0x06, 0x65, 0xe1,
	0x48, 0xa0, 0x02, 0x9a, 0x0d, 0x72, 0x13, 0xb7, 0xe9, 0x22, 0x9e, 0x30, 0x4e, 0x16, 0x5d, 0x55,
	0x93, 0x64, 0x70, 0x47, 0x34, 0x19, 0x6b, 0x32, 0xa9, 0xc8, 0x0b, 0xb0, 0xec, 0xb2, 0x6b, 0xae,
	0xef, 0xc0, 0xe5, 0x25, 0xe0, 0x8d, 0x90, 0x2f, 0x71, 0x69, 0x2d, 0x64, 0x76, 0xb6, 0xfc, 0x7f,
	0xdf, 0x99, 0xdf, 0x47, 0x03, 0x8f, 0xb8, 0x51, 0x73, 0xf9, 0xae, 0x13, 0x68, 0x39, 0x97, 0x46,
	0x5e, 0x88, 0xce, 0x4c, 0x2c, 0xa7, 0x5a, 0x06, 0x46, 0x69, 0x2b, 0xd0, 0xca, 0x28, 0x8c, 0xe2,
	0x88, 0x95, 0x46, 0xee, 0xef, 0xf9, 0x4a, 0xf9, 0xe7, 0xa2, 0x13, 0x7d, 0x9f, 0xac, 0xde, 0x64,
	0x98, 0xf6, 0x01, 0xdc, 0xa1, 0x81, 0xd0, 0xdc, 0x48, 0xb5, 0x18, 0xad, 0x03, 0x81, 0x9b, 0xb0,
	0xd5, 0xa5, 0x83, 0x81, 0xed, 0xf6, 0x50, 0x01, 0x37, 0xa0, 0xfa, 0x7a, 0xec, 0xb0, 0x13, 0x54,
	0xc4, 0x2d, 0xa8, 0x7b, 0xae, 0x3d, 0xf4, 0xfa, 0x74, 0x84, 0x4a, 0x61, 0x8a, 0x39, 0xde, 0x88,
	0x32, 0x07, 0x95, 0xdb, 0x14, 0x76, 0x86, 0x5c, 0x1b, 0x19, 0x3a, 0x3c, 0xa3, 0xb9, 0x11, 0xfe,
	0x1a, 0xd7, 0xa1, 0xe2, 0x52, 0xd7, 0x41, 0x85, 0xf0, 0xa9, 0x6f, 0x7b, 0x7d, 0x54, 0x0c, 0x75,
	0xcc, 0x76, 0x8f, 0x1c, 0x54, 0xc2, 0x00, 0x35, 0x66, 0xbb, 0x3d, 0x3a, 0x40, 0x65, 0x7c, 0x17,
	0x9a, 0x8c, 0x8e, 0xdd, 0xde, 0x29, 0xa3, 0x07, 0xc7, 0x2e, 0xaa, 0xb4, 0x09, 0xec, 0xd8, 0xbe,
	0xaf, 0x85, 0xcf, 0x8d, 0x48, 0x85, 0x08, 0x5a, 0xdd, 0x3e, 0xa5, 0x9e, 0x73, 0x7a, 0x78, 0xcc,
	0xbc, 0x11, 0x2a, 0x84, 0x0e, 0x7b, 0x38, 0x74, 0xdc, 0x1e, 0x2a, 0xe2, 0x2d, 0x28, 0x7b, 0xe3,
	0x01, 0x2a, 0x91, 0x7d, 0xa8, 0x98, 0xb0, 0xc7, 0xae, 0x15, 0x77, 0xb7, 0x36, 0xdd, 0x2d, 0x4f,
	0xe8, 0x0b, 0x39, 0x15, 0x34, 0x08, 0xcf, 0xb9, 0xbc, 0xf7, 0xeb, 0x7d, 0x79, 0xaf, 0xf8, 0xa4,
	0xc1, 0xa2, 0x38, 0x79, 0x05, 0x8d, 0x60, 0xd3, 0x21, 0x9f, 0xfd, 0x1d, 0xb1, 0x75, 0x76, 0xcd,
	0x90, 0x97, 0x50, 0x53, 0xc1, 0x82, 0xcf, 0x05, 0x7e, 0x98, 0xa1, 0x07, 0xc2, 0x9c, 0xa9, 0xd9,
	0x06, 0xfe, 0x76, 0x19, 0x0f, 0x4e, 0xf2, 0xe4, 0x24, 0x24, 0xa3, 0x33, 0xe7, 0x91, 0xdf, 0x23,
	0x72, 0xfb, 0xe9, 0xae, 0x75, 0x7b, 0xd3, 0xd6, 0x8d, 0x25, 0xb2, 0x44, 0x48, 0x7c, 0x68, 0xa6,
	0x27, 0x9c, 0xac, 0x73, 0xfd, 0x3f, 0x12, 0xff, 0xe3, 0xac, 0x3f, 0xb3, 0x60, 0xf6, 0xb7, 0x99,
	0x3c, 0x87, 0x2a, 0x5f, 0xae, 0x17, 0xd3, 0xdc, 0x11, 0x3f, 0x2f, 0xe3, 0x3f, 0x17, 0xc7, 0xc9,
	0x0b, 0xa8, 0x9d, 0x09, 0x3e, 0x13, 0x1a, 0x3f, 0xc8, 0x80, 0x87, 0x52, 0x9c, 0xa7, 0xdc, 0x87,
	0xab, 0x98, 0x4b, 0xe2, 0x64, 0x1f, 0xaa, 0x72, 0x11, 0xac, 0x4c, 0x1e, 0xf7, 0x31, 0xe1, 0xe2,
	0x74, 0x38, 0x4f, 0xad, 0xcc, 0x7f, 0x70, 0x9f, 0x36, 0xf3, 0xe2, 0x38, 0xe9, 0x42, 0x2b, 0xed,
	0xfb, 0x56, 0xac, 0xf3, 0xf0, 0xcf, 0x09, 0x7e, 0x03, 0x22, 0x47, 0xb0, 0x9d, 0xbe, 0x6b, 0xbe,
	0xf0, 0x45, 0x9e, 0xe6, 0x4b, 0xa2, 0xb9, 0x85, 0x91, 0x09, 0x34, 0xf8, 0xe6, 0x82, 0xe4, 0x39,
	0xbe, 0x5e, 0xfd, 0x73, 0xa9, 0x99, 0x4b, 0xc6, 0xae, 0xb5, 0x93, 0x5a, 0xa4, 0x7b, 0xf6, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x84, 0xa1, 0x6b, 0x77, 0x79, 0x04, 0x00, 0x00,
}
