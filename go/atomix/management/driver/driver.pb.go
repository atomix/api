// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/management/driver/driver.proto

package driver

import (
	context "context"
	fmt "fmt"
	protocol "github.com/atomix/atomix-api/go/atomix/protocol"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AgentId struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *AgentId) Reset()         { *m = AgentId{} }
func (m *AgentId) String() string { return proto.CompactTextString(m) }
func (*AgentId) ProtoMessage()    {}
func (*AgentId) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{0}
}
func (m *AgentId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentId.Merge(m, src)
}
func (m *AgentId) XXX_Size() int {
	return m.Size()
}
func (m *AgentId) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentId.DiscardUnknown(m)
}

var xxx_messageInfo_AgentId proto.InternalMessageInfo

func (m *AgentId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AgentId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AgentAddress struct {
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *AgentAddress) Reset()         { *m = AgentAddress{} }
func (m *AgentAddress) String() string { return proto.CompactTextString(m) }
func (*AgentAddress) ProtoMessage()    {}
func (*AgentAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{1}
}
func (m *AgentAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentAddress.Merge(m, src)
}
func (m *AgentAddress) XXX_Size() int {
	return m.Size()
}
func (m *AgentAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentAddress.DiscardUnknown(m)
}

var xxx_messageInfo_AgentAddress proto.InternalMessageInfo

func (m *AgentAddress) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AgentAddress) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type AgentConfig struct {
	Protocol protocol.ProtocolConfig `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol"`
}

func (m *AgentConfig) Reset()         { *m = AgentConfig{} }
func (m *AgentConfig) String() string { return proto.CompactTextString(m) }
func (*AgentConfig) ProtoMessage()    {}
func (*AgentConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{2}
}
func (m *AgentConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentConfig.Merge(m, src)
}
func (m *AgentConfig) XXX_Size() int {
	return m.Size()
}
func (m *AgentConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AgentConfig proto.InternalMessageInfo

func (m *AgentConfig) GetProtocol() protocol.ProtocolConfig {
	if m != nil {
		return m.Protocol
	}
	return protocol.ProtocolConfig{}
}

type StartAgentRequest struct {
	AgentID AgentId      `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id"`
	Address AgentAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address"`
	Config  AgentConfig  `protobuf:"bytes,3,opt,name=config,proto3" json:"config"`
}

func (m *StartAgentRequest) Reset()         { *m = StartAgentRequest{} }
func (m *StartAgentRequest) String() string { return proto.CompactTextString(m) }
func (*StartAgentRequest) ProtoMessage()    {}
func (*StartAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{3}
}
func (m *StartAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartAgentRequest.Merge(m, src)
}
func (m *StartAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartAgentRequest proto.InternalMessageInfo

func (m *StartAgentRequest) GetAgentID() AgentId {
	if m != nil {
		return m.AgentID
	}
	return AgentId{}
}

func (m *StartAgentRequest) GetAddress() AgentAddress {
	if m != nil {
		return m.Address
	}
	return AgentAddress{}
}

func (m *StartAgentRequest) GetConfig() AgentConfig {
	if m != nil {
		return m.Config
	}
	return AgentConfig{}
}

type StartAgentResponse struct {
}

func (m *StartAgentResponse) Reset()         { *m = StartAgentResponse{} }
func (m *StartAgentResponse) String() string { return proto.CompactTextString(m) }
func (*StartAgentResponse) ProtoMessage()    {}
func (*StartAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{4}
}
func (m *StartAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartAgentResponse.Merge(m, src)
}
func (m *StartAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartAgentResponse proto.InternalMessageInfo

type ConfigureAgentRequest struct {
	AgentID AgentId     `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id"`
	Config  AgentConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config"`
}

func (m *ConfigureAgentRequest) Reset()         { *m = ConfigureAgentRequest{} }
func (m *ConfigureAgentRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureAgentRequest) ProtoMessage()    {}
func (*ConfigureAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{5}
}
func (m *ConfigureAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureAgentRequest.Merge(m, src)
}
func (m *ConfigureAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureAgentRequest proto.InternalMessageInfo

func (m *ConfigureAgentRequest) GetAgentID() AgentId {
	if m != nil {
		return m.AgentID
	}
	return AgentId{}
}

func (m *ConfigureAgentRequest) GetConfig() AgentConfig {
	if m != nil {
		return m.Config
	}
	return AgentConfig{}
}

type ConfigureAgentResponse struct {
}

func (m *ConfigureAgentResponse) Reset()         { *m = ConfigureAgentResponse{} }
func (m *ConfigureAgentResponse) String() string { return proto.CompactTextString(m) }
func (*ConfigureAgentResponse) ProtoMessage()    {}
func (*ConfigureAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{6}
}
func (m *ConfigureAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigureAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigureAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigureAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureAgentResponse.Merge(m, src)
}
func (m *ConfigureAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfigureAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureAgentResponse proto.InternalMessageInfo

type StopAgentRequest struct {
	AgentID AgentId `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id"`
}

func (m *StopAgentRequest) Reset()         { *m = StopAgentRequest{} }
func (m *StopAgentRequest) String() string { return proto.CompactTextString(m) }
func (*StopAgentRequest) ProtoMessage()    {}
func (*StopAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{7}
}
func (m *StopAgentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopAgentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopAgentRequest.Merge(m, src)
}
func (m *StopAgentRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopAgentRequest proto.InternalMessageInfo

func (m *StopAgentRequest) GetAgentID() AgentId {
	if m != nil {
		return m.AgentID
	}
	return AgentId{}
}

type StopAgentResponse struct {
}

func (m *StopAgentResponse) Reset()         { *m = StopAgentResponse{} }
func (m *StopAgentResponse) String() string { return proto.CompactTextString(m) }
func (*StopAgentResponse) ProtoMessage()    {}
func (*StopAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475f4bfeda7e9685, []int{8}
}
func (m *StopAgentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopAgentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopAgentResponse.Merge(m, src)
}
func (m *StopAgentResponse) XXX_Size() int {
	return m.Size()
}
func (m *StopAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopAgentResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AgentId)(nil), "atomix.management.driver.AgentId")
	proto.RegisterType((*AgentAddress)(nil), "atomix.management.driver.AgentAddress")
	proto.RegisterType((*AgentConfig)(nil), "atomix.management.driver.AgentConfig")
	proto.RegisterType((*StartAgentRequest)(nil), "atomix.management.driver.StartAgentRequest")
	proto.RegisterType((*StartAgentResponse)(nil), "atomix.management.driver.StartAgentResponse")
	proto.RegisterType((*ConfigureAgentRequest)(nil), "atomix.management.driver.ConfigureAgentRequest")
	proto.RegisterType((*ConfigureAgentResponse)(nil), "atomix.management.driver.ConfigureAgentResponse")
	proto.RegisterType((*StopAgentRequest)(nil), "atomix.management.driver.StopAgentRequest")
	proto.RegisterType((*StopAgentResponse)(nil), "atomix.management.driver.StopAgentResponse")
}

func init() {
	proto.RegisterFile("atomix/management/driver/driver.proto", fileDescriptor_475f4bfeda7e9685)
}

var fileDescriptor_475f4bfeda7e9685 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcd, 0xca, 0xd3, 0x40,
	0x14, 0x4d, 0xea, 0x67, 0xfb, 0xf5, 0x56, 0xfc, 0x19, 0x3f, 0x25, 0x04, 0x49, 0x35, 0x50, 0x11,
	0x2b, 0x89, 0x54, 0x70, 0xe3, 0xaa, 0x3f, 0x08, 0x2e, 0x84, 0x92, 0x3e, 0x80, 0x8c, 0xcd, 0x18,
	0x03, 0x26, 0x13, 0x33, 0x53, 0xf1, 0x31, 0x7c, 0x0f, 0x5f, 0xa4, 0x0b, 0x17, 0x5d, 0xba, 0x2a,
	0x92, 0x3e, 0x80, 0xaf, 0x20, 0xb9, 0x33, 0x4d, 0xac, 0x5a, 0x5b, 0x3e, 0xe8, 0x2a, 0x77, 0x66,
	0xce, 0x39, 0xf7, 0x9e, 0x33, 0x13, 0xe8, 0x51, 0xc9, 0x93, 0xf8, 0xb3, 0x9f, 0xd0, 0x94, 0x46,
	0x2c, 0x61, 0xa9, 0xf4, 0xc3, 0x3c, 0xfe, 0xc4, 0x72, 0xfd, 0xf1, 0xb2, 0x9c, 0x4b, 0x4e, 0x2c,
	0x05, 0xf3, 0x6a, 0x98, 0xa7, 0xce, 0x6d, 0x47, 0x0b, 0x20, 0x6e, 0xce, 0x3f, 0x54, 0x85, 0x62,
	0xda, 0x17, 0x11, 0x8f, 0x38, 0x96, 0x7e, 0x59, 0xa9, 0x5d, 0xf7, 0x05, 0xb4, 0x86, 0x11, 0x4b,
	0xe5, 0xab, 0x90, 0xdc, 0x83, 0x76, 0x4a, 0x13, 0x26, 0x32, 0x3a, 0x67, 0x96, 0x79, 0xdf, 0x7c,
	0xd4, 0x0e, 0xea, 0x0d, 0x42, 0xe0, 0xac, 0x5c, 0x58, 0x0d, 0x3c, 0xc0, 0xda, 0x7d, 0x0e, 0xd7,
	0x90, 0x3c, 0x0c, 0xc3, 0x9c, 0x09, 0x51, 0x62, 0xde, 0x73, 0x21, 0x35, 0x19, 0xeb, 0x72, 0x2f,
	0xe3, 0xb9, 0x44, 0xde, 0xd5, 0x00, 0x6b, 0x77, 0x0a, 0x1d, 0xe4, 0x8d, 0x79, 0xfa, 0x2e, 0x8e,
	0xc8, 0x10, 0xce, 0xb7, 0xb3, 0x22, 0xb5, 0x33, 0xe8, 0x7a, 0xda, 0x66, 0xe5, 0x61, 0xaa, 0x0b,
	0x45, 0x19, 0x9d, 0x2d, 0xd7, 0x5d, 0x23, 0xa8, 0x68, 0xee, 0x4f, 0x13, 0x6e, 0xcd, 0x24, 0xcd,
	0x25, 0xea, 0x06, 0xec, 0xe3, 0x82, 0x09, 0x49, 0x5e, 0xc3, 0x39, 0x2d, 0xd7, 0x6f, 0xe2, 0x50,
	0x0b, 0x3f, 0xf0, 0xf6, 0xe5, 0xe7, 0xe9, 0x18, 0x46, 0x37, 0x4a, 0xe9, 0x62, 0xdd, 0xd5, 0xb9,
	0x4c, 0x82, 0x16, 0xd5, 0x01, 0xbd, 0x84, 0x16, 0x55, 0x4e, 0xd1, 0x4d, 0x67, 0xf0, 0xf0, 0x80,
	0x9a, 0xce, 0x45, 0x4f, 0xbb, 0x25, 0x93, 0x31, 0x34, 0xe7, 0x68, 0xc3, 0xba, 0x82, 0x32, 0xbd,
	0x03, 0x32, 0x3b, 0x9e, 0x35, 0xd5, 0xbd, 0x00, 0xf2, 0xbb, 0x61, 0x91, 0xf1, 0x54, 0x30, 0xf7,
	0xab, 0x09, 0x77, 0x14, 0x7c, 0x91, 0xb3, 0x53, 0x66, 0x51, 0x7b, 0x68, 0x5c, 0xde, 0x83, 0x05,
	0x77, 0xff, 0x1c, 0x56, 0xfb, 0xa0, 0x70, 0x73, 0x26, 0x79, 0x76, 0x42, 0x07, 0xee, 0xed, 0xf2,
	0xc5, 0x54, 0x2d, 0x54, 0xdf, 0xc1, 0xb7, 0x06, 0x34, 0x27, 0xa8, 0x40, 0x22, 0x80, 0x3a, 0x60,
	0xd2, 0xdf, 0xdf, 0xea, 0xaf, 0x77, 0x67, 0x3f, 0x39, 0x0e, 0xac, 0x7a, 0x12, 0x01, 0xd7, 0x77,
	0x53, 0x20, 0xfe, 0x7e, 0xfe, 0x3f, 0x2f, 0xd7, 0x7e, 0x7a, 0x3c, 0x41, 0x37, 0x0d, 0xa1, 0x5d,
	0xb9, 0x27, 0x8f, 0xff, 0x37, 0xef, 0xee, 0x2d, 0xd8, 0xfd, 0xa3, 0xb0, 0xaa, 0xcb, 0xc8, 0x5a,
	0x16, 0x8e, 0xb9, 0x2a, 0x1c, 0xf3, 0x47, 0xe1, 0x98, 0x5f, 0x36, 0x8e, 0xb1, 0xda, 0x38, 0xc6,
	0xf7, 0x8d, 0x63, 0xbc, 0x6d, 0xe2, 0xaf, 0xfb, 0xec, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xac,
	0x12, 0xac, 0x5f, 0xf7, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverClient interface {
	StartAgent(ctx context.Context, in *StartAgentRequest, opts ...grpc.CallOption) (*StartAgentResponse, error)
	ConfigureAgent(ctx context.Context, in *ConfigureAgentRequest, opts ...grpc.CallOption) (*ConfigureAgentResponse, error)
	StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*StopAgentResponse, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) StartAgent(ctx context.Context, in *StartAgentRequest, opts ...grpc.CallOption) (*StartAgentResponse, error) {
	out := new(StartAgentResponse)
	err := c.cc.Invoke(ctx, "/atomix.management.driver.Driver/StartAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) ConfigureAgent(ctx context.Context, in *ConfigureAgentRequest, opts ...grpc.CallOption) (*ConfigureAgentResponse, error) {
	out := new(ConfigureAgentResponse)
	err := c.cc.Invoke(ctx, "/atomix.management.driver.Driver/ConfigureAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*StopAgentResponse, error) {
	out := new(StopAgentResponse)
	err := c.cc.Invoke(ctx, "/atomix.management.driver.Driver/StopAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServer is the server API for Driver service.
type DriverServer interface {
	StartAgent(context.Context, *StartAgentRequest) (*StartAgentResponse, error)
	ConfigureAgent(context.Context, *ConfigureAgentRequest) (*ConfigureAgentResponse, error)
	StopAgent(context.Context, *StopAgentRequest) (*StopAgentResponse, error)
}

// UnimplementedDriverServer can be embedded to have forward compatible implementations.
type UnimplementedDriverServer struct {
}

func (*UnimplementedDriverServer) StartAgent(ctx context.Context, req *StartAgentRequest) (*StartAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAgent not implemented")
}
func (*UnimplementedDriverServer) ConfigureAgent(ctx context.Context, req *ConfigureAgentRequest) (*ConfigureAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureAgent not implemented")
}
func (*UnimplementedDriverServer) StopAgent(ctx context.Context, req *StopAgentRequest) (*StopAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAgent not implemented")
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_StartAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).StartAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.management.driver.Driver/StartAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).StartAgent(ctx, req.(*StartAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_ConfigureAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).ConfigureAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.management.driver.Driver/ConfigureAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).ConfigureAgent(ctx, req.(*ConfigureAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_StopAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).StopAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.management.driver.Driver/StopAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).StopAgent(ctx, req.(*StopAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.management.driver.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartAgent",
			Handler:    _Driver_StartAgent_Handler,
		},
		{
			MethodName: "ConfigureAgent",
			Handler:    _Driver_ConfigureAgent_Handler,
		},
		{
			MethodName: "StopAgent",
			Handler:    _Driver_StopAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/management/driver/driver.proto",
}

func (m *AgentId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDriver(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintDriver(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintDriver(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintDriver(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDriver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StartAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDriver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDriver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDriver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StartAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConfigureAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDriver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDriver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConfigureAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigureAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StopAgentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopAgentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopAgentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AgentID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDriver(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StopAgentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopAgentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StopAgentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintDriver(dAtA []byte, offset int, v uint64) int {
	offset -= sovDriver(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AgentId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovDriver(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDriver(uint64(l))
	}
	return n
}

func (m *AgentAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovDriver(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovDriver(uint64(m.Port))
	}
	return n
}

func (m *AgentConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Protocol.Size()
	n += 1 + l + sovDriver(uint64(l))
	return n
}

func (m *StartAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AgentID.Size()
	n += 1 + l + sovDriver(uint64(l))
	l = m.Address.Size()
	n += 1 + l + sovDriver(uint64(l))
	l = m.Config.Size()
	n += 1 + l + sovDriver(uint64(l))
	return n
}

func (m *StartAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConfigureAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AgentID.Size()
	n += 1 + l + sovDriver(uint64(l))
	l = m.Config.Size()
	n += 1 + l + sovDriver(uint64(l))
	return n
}

func (m *ConfigureAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StopAgentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AgentID.Size()
	n += 1 + l + sovDriver(uint64(l))
	return n
}

func (m *StopAgentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovDriver(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDriver(x uint64) (n int) {
	return sovDriver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AgentId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopAgentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopAgentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopAgentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDriver
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDriver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AgentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopAgentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopAgentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopAgentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDriver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDriver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDriver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDriver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDriver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDriver
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDriver
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDriver
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDriver        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDriver          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDriver = fmt.Errorf("proto: unexpected end of group")
)
