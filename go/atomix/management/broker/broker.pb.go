// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/management/broker/broker.proto

package broker

import (
	context "context"
	fmt "fmt"
	protocol "github.com/atomix/api/go/atomix/protocol"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrimitiveConfig struct {
	ID     PrimitiveId `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Driver DriverId    `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver"`
	Proxy  ProxyConfig `protobuf:"bytes,3,opt,name=proxy,proto3" json:"proxy"`
}

func (m *PrimitiveConfig) Reset()         { *m = PrimitiveConfig{} }
func (m *PrimitiveConfig) String() string { return proto.CompactTextString(m) }
func (*PrimitiveConfig) ProtoMessage()    {}
func (*PrimitiveConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{0}
}
func (m *PrimitiveConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveConfig.Merge(m, src)
}
func (m *PrimitiveConfig) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveConfig proto.InternalMessageInfo

func (m *PrimitiveConfig) GetID() PrimitiveId {
	if m != nil {
		return m.ID
	}
	return PrimitiveId{}
}

func (m *PrimitiveConfig) GetDriver() DriverId {
	if m != nil {
		return m.Driver
	}
	return DriverId{}
}

func (m *PrimitiveConfig) GetProxy() ProxyConfig {
	if m != nil {
		return m.Proxy
	}
	return ProxyConfig{}
}

type PrimitiveId struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *PrimitiveId) Reset()         { *m = PrimitiveId{} }
func (m *PrimitiveId) String() string { return proto.CompactTextString(m) }
func (*PrimitiveId) ProtoMessage()    {}
func (*PrimitiveId) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{1}
}
func (m *PrimitiveId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitiveId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitiveId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitiveId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveId.Merge(m, src)
}
func (m *PrimitiveId) XXX_Size() int {
	return m.Size()
}
func (m *PrimitiveId) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveId.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveId proto.InternalMessageInfo

func (m *PrimitiveId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PrimitiveId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrimitiveId) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type StorageConfig struct {
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *StorageConfig) Reset()         { *m = StorageConfig{} }
func (m *StorageConfig) String() string { return proto.CompactTextString(m) }
func (*StorageConfig) ProtoMessage()    {}
func (*StorageConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{2}
}
func (m *StorageConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageConfig.Merge(m, src)
}
func (m *StorageConfig) XXX_Size() int {
	return m.Size()
}
func (m *StorageConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StorageConfig proto.InternalMessageInfo

func (m *StorageConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *StorageConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ProxyConfig struct {
	Read  bool `protobuf:"varint,1,opt,name=read,proto3" json:"read,omitempty"`
	Write bool `protobuf:"varint,2,opt,name=write,proto3" json:"write,omitempty"`
	Cache bool `protobuf:"varint,3,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (m *ProxyConfig) Reset()         { *m = ProxyConfig{} }
func (m *ProxyConfig) String() string { return proto.CompactTextString(m) }
func (*ProxyConfig) ProtoMessage()    {}
func (*ProxyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{3}
}
func (m *ProxyConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyConfig.Merge(m, src)
}
func (m *ProxyConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProxyConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyConfig proto.InternalMessageInfo

func (m *ProxyConfig) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *ProxyConfig) GetWrite() bool {
	if m != nil {
		return m.Write
	}
	return false
}

func (m *ProxyConfig) GetCache() bool {
	if m != nil {
		return m.Cache
	}
	return false
}

type AddPrimitiveRequest struct {
	Primitive PrimitiveConfig `protobuf:"bytes,1,opt,name=primitive,proto3" json:"primitive"`
}

func (m *AddPrimitiveRequest) Reset()         { *m = AddPrimitiveRequest{} }
func (m *AddPrimitiveRequest) String() string { return proto.CompactTextString(m) }
func (*AddPrimitiveRequest) ProtoMessage()    {}
func (*AddPrimitiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{4}
}
func (m *AddPrimitiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPrimitiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPrimitiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPrimitiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPrimitiveRequest.Merge(m, src)
}
func (m *AddPrimitiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddPrimitiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPrimitiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPrimitiveRequest proto.InternalMessageInfo

func (m *AddPrimitiveRequest) GetPrimitive() PrimitiveConfig {
	if m != nil {
		return m.Primitive
	}
	return PrimitiveConfig{}
}

type AddPrimitiveResponse struct {
}

func (m *AddPrimitiveResponse) Reset()         { *m = AddPrimitiveResponse{} }
func (m *AddPrimitiveResponse) String() string { return proto.CompactTextString(m) }
func (*AddPrimitiveResponse) ProtoMessage()    {}
func (*AddPrimitiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{5}
}
func (m *AddPrimitiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPrimitiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPrimitiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPrimitiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPrimitiveResponse.Merge(m, src)
}
func (m *AddPrimitiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddPrimitiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPrimitiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPrimitiveResponse proto.InternalMessageInfo

type RemovePrimitiveRequest struct {
	PrimitiveID PrimitiveId `protobuf:"bytes,1,opt,name=primitive_id,json=primitiveId,proto3" json:"primitive_id"`
}

func (m *RemovePrimitiveRequest) Reset()         { *m = RemovePrimitiveRequest{} }
func (m *RemovePrimitiveRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePrimitiveRequest) ProtoMessage()    {}
func (*RemovePrimitiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{6}
}
func (m *RemovePrimitiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePrimitiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePrimitiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePrimitiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePrimitiveRequest.Merge(m, src)
}
func (m *RemovePrimitiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemovePrimitiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePrimitiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePrimitiveRequest proto.InternalMessageInfo

func (m *RemovePrimitiveRequest) GetPrimitiveID() PrimitiveId {
	if m != nil {
		return m.PrimitiveID
	}
	return PrimitiveId{}
}

type RemovePrimitiveResponse struct {
}

func (m *RemovePrimitiveResponse) Reset()         { *m = RemovePrimitiveResponse{} }
func (m *RemovePrimitiveResponse) String() string { return proto.CompactTextString(m) }
func (*RemovePrimitiveResponse) ProtoMessage()    {}
func (*RemovePrimitiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{7}
}
func (m *RemovePrimitiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovePrimitiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovePrimitiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovePrimitiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePrimitiveResponse.Merge(m, src)
}
func (m *RemovePrimitiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemovePrimitiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePrimitiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePrimitiveResponse proto.InternalMessageInfo

type DriverId struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type      string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *DriverId) Reset()         { *m = DriverId{} }
func (m *DriverId) String() string { return proto.CompactTextString(m) }
func (*DriverId) ProtoMessage()    {}
func (*DriverId) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{8}
}
func (m *DriverId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverId.Merge(m, src)
}
func (m *DriverId) XXX_Size() int {
	return m.Size()
}
func (m *DriverId) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverId.DiscardUnknown(m)
}

var xxx_messageInfo_DriverId proto.InternalMessageInfo

func (m *DriverId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DriverId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DriverId) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type DriverConfig struct {
	ID       DriverId                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Host     string                   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port     int32                    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Protocol *protocol.ProtocolConfig `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *DriverConfig) Reset()         { *m = DriverConfig{} }
func (m *DriverConfig) String() string { return proto.CompactTextString(m) }
func (*DriverConfig) ProtoMessage()    {}
func (*DriverConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{9}
}
func (m *DriverConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriverConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriverConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriverConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverConfig.Merge(m, src)
}
func (m *DriverConfig) XXX_Size() int {
	return m.Size()
}
func (m *DriverConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DriverConfig proto.InternalMessageInfo

func (m *DriverConfig) GetID() DriverId {
	if m != nil {
		return m.ID
	}
	return DriverId{}
}

func (m *DriverConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DriverConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DriverConfig) GetProtocol() *protocol.ProtocolConfig {
	if m != nil {
		return m.Protocol
	}
	return nil
}

type AddDriverRequest struct {
	Driver DriverConfig `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver"`
}

func (m *AddDriverRequest) Reset()         { *m = AddDriverRequest{} }
func (m *AddDriverRequest) String() string { return proto.CompactTextString(m) }
func (*AddDriverRequest) ProtoMessage()    {}
func (*AddDriverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{10}
}
func (m *AddDriverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDriverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDriverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDriverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDriverRequest.Merge(m, src)
}
func (m *AddDriverRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDriverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDriverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDriverRequest proto.InternalMessageInfo

func (m *AddDriverRequest) GetDriver() DriverConfig {
	if m != nil {
		return m.Driver
	}
	return DriverConfig{}
}

type AddDriverResponse struct {
}

func (m *AddDriverResponse) Reset()         { *m = AddDriverResponse{} }
func (m *AddDriverResponse) String() string { return proto.CompactTextString(m) }
func (*AddDriverResponse) ProtoMessage()    {}
func (*AddDriverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{11}
}
func (m *AddDriverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDriverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDriverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDriverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDriverResponse.Merge(m, src)
}
func (m *AddDriverResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddDriverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDriverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddDriverResponse proto.InternalMessageInfo

type UpdateDriverRequest struct {
	Driver DriverConfig `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver"`
}

func (m *UpdateDriverRequest) Reset()         { *m = UpdateDriverRequest{} }
func (m *UpdateDriverRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDriverRequest) ProtoMessage()    {}
func (*UpdateDriverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{12}
}
func (m *UpdateDriverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDriverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDriverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDriverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDriverRequest.Merge(m, src)
}
func (m *UpdateDriverRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDriverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDriverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDriverRequest proto.InternalMessageInfo

func (m *UpdateDriverRequest) GetDriver() DriverConfig {
	if m != nil {
		return m.Driver
	}
	return DriverConfig{}
}

type UpdateDriverResponse struct {
}

func (m *UpdateDriverResponse) Reset()         { *m = UpdateDriverResponse{} }
func (m *UpdateDriverResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateDriverResponse) ProtoMessage()    {}
func (*UpdateDriverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{13}
}
func (m *UpdateDriverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDriverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDriverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDriverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDriverResponse.Merge(m, src)
}
func (m *UpdateDriverResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDriverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDriverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDriverResponse proto.InternalMessageInfo

type RemoveDriverRequest struct {
	DriverID DriverId `protobuf:"bytes,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id"`
}

func (m *RemoveDriverRequest) Reset()         { *m = RemoveDriverRequest{} }
func (m *RemoveDriverRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveDriverRequest) ProtoMessage()    {}
func (*RemoveDriverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{14}
}
func (m *RemoveDriverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveDriverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveDriverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveDriverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveDriverRequest.Merge(m, src)
}
func (m *RemoveDriverRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveDriverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveDriverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveDriverRequest proto.InternalMessageInfo

func (m *RemoveDriverRequest) GetDriverID() DriverId {
	if m != nil {
		return m.DriverID
	}
	return DriverId{}
}

type RemoveDriverResponse struct {
}

func (m *RemoveDriverResponse) Reset()         { *m = RemoveDriverResponse{} }
func (m *RemoveDriverResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveDriverResponse) ProtoMessage()    {}
func (*RemoveDriverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16e6b244155e2fc1, []int{15}
}
func (m *RemoveDriverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveDriverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveDriverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveDriverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveDriverResponse.Merge(m, src)
}
func (m *RemoveDriverResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveDriverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveDriverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveDriverResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PrimitiveConfig)(nil), "atomix.management.broker.PrimitiveConfig")
	proto.RegisterType((*PrimitiveId)(nil), "atomix.management.broker.PrimitiveId")
	proto.RegisterType((*StorageConfig)(nil), "atomix.management.broker.StorageConfig")
	proto.RegisterType((*ProxyConfig)(nil), "atomix.management.broker.ProxyConfig")
	proto.RegisterType((*AddPrimitiveRequest)(nil), "atomix.management.broker.AddPrimitiveRequest")
	proto.RegisterType((*AddPrimitiveResponse)(nil), "atomix.management.broker.AddPrimitiveResponse")
	proto.RegisterType((*RemovePrimitiveRequest)(nil), "atomix.management.broker.RemovePrimitiveRequest")
	proto.RegisterType((*RemovePrimitiveResponse)(nil), "atomix.management.broker.RemovePrimitiveResponse")
	proto.RegisterType((*DriverId)(nil), "atomix.management.broker.DriverId")
	proto.RegisterType((*DriverConfig)(nil), "atomix.management.broker.DriverConfig")
	proto.RegisterType((*AddDriverRequest)(nil), "atomix.management.broker.AddDriverRequest")
	proto.RegisterType((*AddDriverResponse)(nil), "atomix.management.broker.AddDriverResponse")
	proto.RegisterType((*UpdateDriverRequest)(nil), "atomix.management.broker.UpdateDriverRequest")
	proto.RegisterType((*UpdateDriverResponse)(nil), "atomix.management.broker.UpdateDriverResponse")
	proto.RegisterType((*RemoveDriverRequest)(nil), "atomix.management.broker.RemoveDriverRequest")
	proto.RegisterType((*RemoveDriverResponse)(nil), "atomix.management.broker.RemoveDriverResponse")
}

func init() {
	proto.RegisterFile("atomix/management/broker/broker.proto", fileDescriptor_16e6b244155e2fc1)
}

var fileDescriptor_16e6b244155e2fc1 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x8e, 0xdd, 0xb4, 0xb2, 0xa7, 0xf9, 0xa9, 0xfd, 0x6d, 0xa2, 0xd6, 0x58, 0xc8, 0x45, 0x96,
	0x8a, 0xf8, 0x23, 0x5c, 0x28, 0x07, 0x0e, 0x48, 0x88, 0x94, 0x5c, 0x7a, 0xa8, 0x54, 0xb6, 0x42,
	0x42, 0x42, 0xa8, 0x72, 0xb3, 0x4b, 0x6a, 0x81, 0xb3, 0x66, 0x63, 0xd2, 0xe6, 0xcc, 0x0b, 0xf0,
	0x2e, 0xbc, 0x44, 0x8f, 0x3d, 0xc2, 0x81, 0x0a, 0x25, 0x2f, 0x82, 0xbc, 0xbb, 0x76, 0xec, 0xc6,
	0x49, 0x13, 0x09, 0x4e, 0x19, 0x4f, 0x66, 0xbe, 0xef, 0xdb, 0x99, 0x6f, 0x60, 0xdb, 0x8f, 0x59,
	0x18, 0x9c, 0xef, 0x84, 0x7e, 0xd7, 0xef, 0xd0, 0x90, 0x76, 0xe3, 0x9d, 0x13, 0xce, 0x3e, 0x52,
	0xae, 0x7e, 0xbc, 0x88, 0xb3, 0x98, 0x21, 0x4b, 0x96, 0x79, 0xe3, 0x32, 0x4f, 0xfe, 0x6f, 0x3b,
	0x0a, 0x40, 0xd4, 0xb5, 0xd9, 0xa7, 0x2c, 0x90, 0x9d, 0x76, 0xa3, 0xc3, 0x3a, 0x4c, 0x84, 0x3b,
	0x49, 0x24, 0xb3, 0xee, 0x4f, 0x0d, 0xd6, 0x0e, 0x79, 0x10, 0x06, 0x71, 0xd0, 0xa7, 0xaf, 0x58,
	0xf7, 0x43, 0xd0, 0x41, 0x4d, 0xd0, 0x03, 0x62, 0x69, 0x77, 0xb4, 0x7b, 0xab, 0xbb, 0xdb, 0xde,
	0x34, 0x42, 0x2f, 0x6b, 0xdb, 0x27, 0x7b, 0x70, 0x71, 0xb5, 0x55, 0x19, 0x5e, 0x6d, 0xe9, 0xfb,
	0x2d, 0xac, 0x07, 0x04, 0xbd, 0x84, 0x15, 0xc2, 0x83, 0x3e, 0xe5, 0x96, 0x2e, 0x60, 0xdc, 0xe9,
	0x30, 0x2d, 0x51, 0xb7, 0x4f, 0xf6, 0xaa, 0x09, 0x06, 0x56, 0x7d, 0xa8, 0x09, 0xcb, 0x11, 0x67,
	0xe7, 0x03, 0x6b, 0xe9, 0x66, 0x1d, 0xec, 0x7c, 0x20, 0xa5, 0x2b, 0x0c, 0xd9, 0xe9, 0x1e, 0xc1,
	0x6a, 0x4e, 0x23, 0xba, 0x0d, 0x66, 0xd7, 0x0f, 0x69, 0x2f, 0xf2, 0xdb, 0x54, 0xbc, 0xce, 0xc4,
	0xe3, 0x04, 0x42, 0x50, 0x4d, 0x3e, 0x84, 0x5e, 0x13, 0x8b, 0x38, 0xc9, 0xc5, 0x83, 0x88, 0x0a,
	0x09, 0x26, 0x16, 0xb1, 0xfb, 0x0c, 0xfe, 0x3b, 0x8a, 0x19, 0xf7, 0x3b, 0xe9, 0xb4, 0x10, 0x54,
	0x4f, 0x59, 0x2f, 0x56, 0x88, 0x22, 0x4e, 0x72, 0x11, 0xe3, 0xb1, 0x00, 0x5b, 0xc6, 0x22, 0x76,
	0x0f, 0x12, 0x35, 0x99, 0xd2, 0xa4, 0x84, 0x53, 0x5f, 0x8e, 0xd9, 0xc0, 0x22, 0x46, 0x0d, 0x58,
	0x3e, 0xe3, 0x41, 0x2c, 0x45, 0x18, 0x58, 0x7e, 0x24, 0xd9, 0xb6, 0xdf, 0x3e, 0x95, 0x32, 0x0c,
	0x2c, 0x3f, 0x5c, 0x02, 0xf5, 0x26, 0x21, 0xd9, 0xfb, 0x30, 0xfd, 0xfc, 0x85, 0xf6, 0x62, 0x74,
	0x00, 0x66, 0x94, 0xe6, 0xd4, 0x0a, 0xef, 0xcf, 0xb1, 0xc2, 0xc2, 0xf8, 0xc6, 0x08, 0xee, 0x06,
	0x34, 0x8a, 0x2c, 0xbd, 0x88, 0x75, 0x7b, 0xd4, 0x3d, 0x83, 0x0d, 0x4c, 0x43, 0xd6, 0xa7, 0x13,
	0x02, 0xde, 0x43, 0x2d, 0x6b, 0x3f, 0x5e, 0xd4, 0x46, 0x75, 0x65, 0xa3, 0xdc, 0xde, 0x5a, 0x78,
	0x35, 0x1a, 0x57, 0xb8, 0xb7, 0x60, 0x73, 0x82, 0x58, 0x69, 0x3a, 0x04, 0x23, 0xf5, 0xd2, 0x5f,
	0xda, 0xf5, 0x77, 0x0d, 0x6a, 0x12, 0x52, 0x2d, 0xed, 0x45, 0xee, 0x32, 0xe6, 0xb1, 0xf4, 0xf5,
	0xb3, 0x48, 0xbd, 0xa2, 0x97, 0x78, 0x65, 0x69, 0xec, 0x15, 0xf4, 0x1c, 0x8c, 0xf4, 0x7a, 0xad,
	0xaa, 0x60, 0xdb, 0x4a, 0xd9, 0xb2, 0xab, 0x3e, 0x54, 0x81, 0x94, 0x86, 0xb3, 0x06, 0xf7, 0x2d,
	0xac, 0x37, 0x09, 0x91, 0x1a, 0xd2, 0xad, 0xb4, 0xb2, 0x7b, 0x94, 0xe2, 0xef, 0xde, 0x24, 0xbe,
	0x60, 0x08, 0xd5, 0xeb, 0xd6, 0xe1, 0xff, 0x1c, 0xb2, 0x1a, 0xfb, 0x3b, 0xa8, 0xbf, 0x89, 0x88,
	0x1f, 0xd3, 0x7f, 0xc1, 0xb8, 0x01, 0x8d, 0x22, 0xb8, 0x22, 0x3d, 0x85, 0xba, 0xb4, 0x41, 0x91,
	0xf4, 0x35, 0x98, 0xb2, 0xf1, 0x78, 0xa1, 0x35, 0xad, 0xab, 0x35, 0xa5, 0xfe, 0x69, 0x61, 0x83,
	0xa8, 0xff, 0x12, 0x05, 0x45, 0x26, 0xa9, 0x60, 0xf7, 0xab, 0x0e, 0x76, 0xe6, 0xc1, 0x83, 0x0c,
	0xfb, 0x88, 0xf2, 0x7e, 0xd0, 0xa6, 0x28, 0x84, 0x5a, 0xfe, 0x70, 0xd0, 0xa3, 0xe9, 0x32, 0x4a,
	0xce, 0xd8, 0xf6, 0xe6, 0x2d, 0x97, 0x6a, 0x50, 0x1f, 0xd6, 0xae, 0x9d, 0x05, 0x7a, 0x3c, 0x1d,
	0xa2, 0xfc, 0x74, 0xed, 0x27, 0x0b, 0x74, 0xa8, 0x29, 0xfc, 0xd2, 0x61, 0x53, 0x0e, 0x66, 0x72,
	0x04, 0x04, 0xcc, 0xcc, 0x2d, 0xe8, 0xc1, 0xcc, 0x07, 0x15, 0xb6, 0x68, 0x3f, 0x9c, 0xab, 0x56,
	0xbd, 0x3c, 0x84, 0x5a, 0xde, 0x21, 0xb3, 0x06, 0x5d, 0x62, 0xd3, 0x59, 0x83, 0x2e, 0x33, 0x5e,
	0x42, 0x97, 0xb7, 0xc3, 0x2c, 0xba, 0x12, 0x83, 0xce, 0xa2, 0x2b, 0x73, 0xd9, 0x9e, 0x75, 0x31,
	0x74, 0xb4, 0xcb, 0xa1, 0xa3, 0xfd, 0x1e, 0x3a, 0xda, 0xb7, 0x91, 0x53, 0xb9, 0x1c, 0x39, 0x95,
	0x1f, 0x23, 0xa7, 0x72, 0xb2, 0x22, 0xee, 0xfd, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5,
	0xbb, 0xb4, 0x92, 0x38, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrimitiveManagementServiceClient is the client API for PrimitiveManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrimitiveManagementServiceClient interface {
	AddPrimitive(ctx context.Context, in *AddPrimitiveRequest, opts ...grpc.CallOption) (*AddPrimitiveResponse, error)
	RemovePrimitive(ctx context.Context, in *RemovePrimitiveRequest, opts ...grpc.CallOption) (*RemovePrimitiveResponse, error)
}

type primitiveManagementServiceClient struct {
	cc *grpc.ClientConn
}

func NewPrimitiveManagementServiceClient(cc *grpc.ClientConn) PrimitiveManagementServiceClient {
	return &primitiveManagementServiceClient{cc}
}

func (c *primitiveManagementServiceClient) AddPrimitive(ctx context.Context, in *AddPrimitiveRequest, opts ...grpc.CallOption) (*AddPrimitiveResponse, error) {
	out := new(AddPrimitiveResponse)
	err := c.cc.Invoke(ctx, "/atomix.management.broker.PrimitiveManagementService/AddPrimitive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *primitiveManagementServiceClient) RemovePrimitive(ctx context.Context, in *RemovePrimitiveRequest, opts ...grpc.CallOption) (*RemovePrimitiveResponse, error) {
	out := new(RemovePrimitiveResponse)
	err := c.cc.Invoke(ctx, "/atomix.management.broker.PrimitiveManagementService/RemovePrimitive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimitiveManagementServiceServer is the server API for PrimitiveManagementService service.
type PrimitiveManagementServiceServer interface {
	AddPrimitive(context.Context, *AddPrimitiveRequest) (*AddPrimitiveResponse, error)
	RemovePrimitive(context.Context, *RemovePrimitiveRequest) (*RemovePrimitiveResponse, error)
}

// UnimplementedPrimitiveManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPrimitiveManagementServiceServer struct {
}

func (*UnimplementedPrimitiveManagementServiceServer) AddPrimitive(ctx context.Context, req *AddPrimitiveRequest) (*AddPrimitiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrimitive not implemented")
}
func (*UnimplementedPrimitiveManagementServiceServer) RemovePrimitive(ctx context.Context, req *RemovePrimitiveRequest) (*RemovePrimitiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePrimitive not implemented")
}

func RegisterPrimitiveManagementServiceServer(s *grpc.Server, srv PrimitiveManagementServiceServer) {
	s.RegisterService(&_PrimitiveManagementService_serviceDesc, srv)
}

func _PrimitiveManagementService_AddPrimitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPrimitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimitiveManagementServiceServer).AddPrimitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.management.broker.PrimitiveManagementService/AddPrimitive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimitiveManagementServiceServer).AddPrimitive(ctx, req.(*AddPrimitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrimitiveManagementService_RemovePrimitive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePrimitiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimitiveManagementServiceServer).RemovePrimitive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.management.broker.PrimitiveManagementService/RemovePrimitive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimitiveManagementServiceServer).RemovePrimitive(ctx, req.(*RemovePrimitiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrimitiveManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.management.broker.PrimitiveManagementService",
	HandlerType: (*PrimitiveManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPrimitive",
			Handler:    _PrimitiveManagementService_AddPrimitive_Handler,
		},
		{
			MethodName: "RemovePrimitive",
			Handler:    _PrimitiveManagementService_RemovePrimitive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/management/broker/broker.proto",
}

// DriverManagementServiceClient is the client API for DriverManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverManagementServiceClient interface {
	AddDriver(ctx context.Context, in *AddDriverRequest, opts ...grpc.CallOption) (*AddDriverResponse, error)
	UpdateDriver(ctx context.Context, in *UpdateDriverRequest, opts ...grpc.CallOption) (*UpdateDriverResponse, error)
	RemoveDriver(ctx context.Context, in *RemoveDriverRequest, opts ...grpc.CallOption) (*RemoveDriverResponse, error)
}

type driverManagementServiceClient struct {
	cc *grpc.ClientConn
}

func NewDriverManagementServiceClient(cc *grpc.ClientConn) DriverManagementServiceClient {
	return &driverManagementServiceClient{cc}
}

func (c *driverManagementServiceClient) AddDriver(ctx context.Context, in *AddDriverRequest, opts ...grpc.CallOption) (*AddDriverResponse, error) {
	out := new(AddDriverResponse)
	err := c.cc.Invoke(ctx, "/atomix.management.broker.DriverManagementService/AddDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverManagementServiceClient) UpdateDriver(ctx context.Context, in *UpdateDriverRequest, opts ...grpc.CallOption) (*UpdateDriverResponse, error) {
	out := new(UpdateDriverResponse)
	err := c.cc.Invoke(ctx, "/atomix.management.broker.DriverManagementService/UpdateDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverManagementServiceClient) RemoveDriver(ctx context.Context, in *RemoveDriverRequest, opts ...grpc.CallOption) (*RemoveDriverResponse, error) {
	out := new(RemoveDriverResponse)
	err := c.cc.Invoke(ctx, "/atomix.management.broker.DriverManagementService/RemoveDriver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverManagementServiceServer is the server API for DriverManagementService service.
type DriverManagementServiceServer interface {
	AddDriver(context.Context, *AddDriverRequest) (*AddDriverResponse, error)
	UpdateDriver(context.Context, *UpdateDriverRequest) (*UpdateDriverResponse, error)
	RemoveDriver(context.Context, *RemoveDriverRequest) (*RemoveDriverResponse, error)
}

// UnimplementedDriverManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDriverManagementServiceServer struct {
}

func (*UnimplementedDriverManagementServiceServer) AddDriver(ctx context.Context, req *AddDriverRequest) (*AddDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDriver not implemented")
}
func (*UnimplementedDriverManagementServiceServer) UpdateDriver(ctx context.Context, req *UpdateDriverRequest) (*UpdateDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriver not implemented")
}
func (*UnimplementedDriverManagementServiceServer) RemoveDriver(ctx context.Context, req *RemoveDriverRequest) (*RemoveDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDriver not implemented")
}

func RegisterDriverManagementServiceServer(s *grpc.Server, srv DriverManagementServiceServer) {
	s.RegisterService(&_DriverManagementService_serviceDesc, srv)
}

func _DriverManagementService_AddDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverManagementServiceServer).AddDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.management.broker.DriverManagementService/AddDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverManagementServiceServer).AddDriver(ctx, req.(*AddDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverManagementService_UpdateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverManagementServiceServer).UpdateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.management.broker.DriverManagementService/UpdateDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverManagementServiceServer).UpdateDriver(ctx, req.(*UpdateDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverManagementService_RemoveDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverManagementServiceServer).RemoveDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.management.broker.DriverManagementService/RemoveDriver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverManagementServiceServer).RemoveDriver(ctx, req.(*RemoveDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DriverManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.management.broker.DriverManagementService",
	HandlerType: (*DriverManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDriver",
			Handler:    _DriverManagementService_AddDriver_Handler,
		},
		{
			MethodName: "UpdateDriver",
			Handler:    _DriverManagementService_UpdateDriver_Handler,
		},
		{
			MethodName: "RemoveDriver",
			Handler:    _DriverManagementService_RemoveDriver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/management/broker/broker.proto",
}

func (m *PrimitiveConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Proxy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Driver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PrimitiveId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitiveId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimitiveId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProxyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cache {
		i--
		if m.Cache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Write {
		i--
		if m.Write {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Read {
		i--
		if m.Read {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddPrimitiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPrimitiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPrimitiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Primitive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AddPrimitiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPrimitiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPrimitiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemovePrimitiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePrimitiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePrimitiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PrimitiveID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RemovePrimitiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovePrimitiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovePrimitiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DriverId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DriverConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriverConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriverConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBroker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Port != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AddDriverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDriverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDriverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Driver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AddDriverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDriverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDriverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateDriverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDriverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDriverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Driver.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpdateDriverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDriverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDriverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveDriverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveDriverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveDriverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DriverID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RemoveDriverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveDriverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveDriverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBroker(dAtA []byte, offset int, v uint64) int {
	offset -= sovBroker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrimitiveConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.Driver.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.Proxy.Size()
	n += 1 + l + sovBroker(uint64(l))
	return n
}

func (m *PrimitiveId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *StorageConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovBroker(uint64(m.Port))
	}
	return n
}

func (m *ProxyConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Read {
		n += 2
	}
	if m.Write {
		n += 2
	}
	if m.Cache {
		n += 2
	}
	return n
}

func (m *AddPrimitiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Primitive.Size()
	n += 1 + l + sovBroker(uint64(l))
	return n
}

func (m *AddPrimitiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemovePrimitiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrimitiveID.Size()
	n += 1 + l + sovBroker(uint64(l))
	return n
}

func (m *RemovePrimitiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DriverId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *DriverConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovBroker(uint64(m.Port))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *AddDriverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Driver.Size()
	n += 1 + l + sovBroker(uint64(l))
	return n
}

func (m *AddDriverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateDriverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Driver.Size()
	n += 1 + l + sovBroker(uint64(l))
	return n
}

func (m *UpdateDriverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveDriverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DriverID.Size()
	n += 1 + l + sovBroker(uint64(l))
	return n
}

func (m *RemoveDriverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBroker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBroker(x uint64) (n int) {
	return sovBroker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrimitiveConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Driver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitiveId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitiveId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitiveId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Read = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Write", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Write = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPrimitiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPrimitiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPrimitiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primitive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Primitive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPrimitiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPrimitiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPrimitiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePrimitiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePrimitiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePrimitiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimitiveID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrimitiveID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovePrimitiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovePrimitiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovePrimitiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriverConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriverConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriverConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &protocol.ProtocolConfig{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDriverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDriverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDriverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Driver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDriverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDriverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDriverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDriverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDriverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDriverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Driver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDriverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDriverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDriverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveDriverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveDriverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveDriverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DriverID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveDriverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveDriverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveDriverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBroker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBroker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBroker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBroker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBroker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBroker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBroker = fmt.Errorf("proto: unexpected end of group")
)
