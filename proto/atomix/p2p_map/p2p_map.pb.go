// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/p2p_map/p2p_map.proto

package p2p_map

import (
	context "context"
	fmt "fmt"
	_ "github.com/atomix/api/proto/atomix/controller"
	github_com_atomix_api_proto_atomix_controller "github.com/atomix/api/proto/atomix/controller"
	primitive "github.com/atomix/api/proto/atomix/primitive"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Target *primitive.Name `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*Message_Command
	//	*Message_CommandResponse
	//	*Message_Query
	//	*Message_QueryResponse
	//	*Message_SlotLookup
	//	*Message_GapCommit
	//	*Message_GapCommitResponse
	//	*Message_ViewChangeRequest
	//	*Message_ViewChange
	//	*Message_ViewChangeRepair
	//	*Message_ViewChangeRepairResponse
	//	*Message_StartView
	//	*Message_ViewRepair
	//	*Message_ViewRepairResponse
	//	*Message_SyncPrepare
	//	*Message_SyncRepair
	//	*Message_SyncRepairResponse
	//	*Message_SyncResponse
	//	*Message_SyncCommit
	//	*Message_Recover
	//	*Message_RecoverResponse
	//	*Message_Ping
	Message isMessage_Message `protobuf_oneof:"message"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Message interface {
	isMessage_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Command struct {
	Command *CommandRequest `protobuf:"bytes,2,opt,name=command,proto3,oneof" json:"command,omitempty"`
}
type Message_CommandResponse struct {
	CommandResponse *CommandResponse `protobuf:"bytes,3,opt,name=command_response,json=commandResponse,proto3,oneof" json:"command_response,omitempty"`
}
type Message_Query struct {
	Query *QueryRequest `protobuf:"bytes,4,opt,name=query,proto3,oneof" json:"query,omitempty"`
}
type Message_QueryResponse struct {
	QueryResponse *QueryResponse `protobuf:"bytes,5,opt,name=query_response,json=queryResponse,proto3,oneof" json:"query_response,omitempty"`
}
type Message_SlotLookup struct {
	SlotLookup *SlotLookup `protobuf:"bytes,6,opt,name=slot_lookup,json=slotLookup,proto3,oneof" json:"slot_lookup,omitempty"`
}
type Message_GapCommit struct {
	GapCommit *GapCommitRequest `protobuf:"bytes,7,opt,name=gap_commit,json=gapCommit,proto3,oneof" json:"gap_commit,omitempty"`
}
type Message_GapCommitResponse struct {
	GapCommitResponse *GapCommitResponse `protobuf:"bytes,8,opt,name=gap_commit_response,json=gapCommitResponse,proto3,oneof" json:"gap_commit_response,omitempty"`
}
type Message_ViewChangeRequest struct {
	ViewChangeRequest *ViewChangeRequest `protobuf:"bytes,9,opt,name=view_change_request,json=viewChangeRequest,proto3,oneof" json:"view_change_request,omitempty"`
}
type Message_ViewChange struct {
	ViewChange *ViewChange `protobuf:"bytes,10,opt,name=view_change,json=viewChange,proto3,oneof" json:"view_change,omitempty"`
}
type Message_ViewChangeRepair struct {
	ViewChangeRepair *ViewChangeRepair `protobuf:"bytes,11,opt,name=view_change_repair,json=viewChangeRepair,proto3,oneof" json:"view_change_repair,omitempty"`
}
type Message_ViewChangeRepairResponse struct {
	ViewChangeRepairResponse *ViewChangeRepairResponse `protobuf:"bytes,12,opt,name=view_change_repair_response,json=viewChangeRepairResponse,proto3,oneof" json:"view_change_repair_response,omitempty"`
}
type Message_StartView struct {
	StartView *StartView `protobuf:"bytes,13,opt,name=start_view,json=startView,proto3,oneof" json:"start_view,omitempty"`
}
type Message_ViewRepair struct {
	ViewRepair *ViewRepair `protobuf:"bytes,14,opt,name=view_repair,json=viewRepair,proto3,oneof" json:"view_repair,omitempty"`
}
type Message_ViewRepairResponse struct {
	ViewRepairResponse *ViewRepairResponse `protobuf:"bytes,15,opt,name=view_repair_response,json=viewRepairResponse,proto3,oneof" json:"view_repair_response,omitempty"`
}
type Message_SyncPrepare struct {
	SyncPrepare *SyncPrepare `protobuf:"bytes,16,opt,name=sync_prepare,json=syncPrepare,proto3,oneof" json:"sync_prepare,omitempty"`
}
type Message_SyncRepair struct {
	SyncRepair *SyncRepair `protobuf:"bytes,17,opt,name=sync_repair,json=syncRepair,proto3,oneof" json:"sync_repair,omitempty"`
}
type Message_SyncRepairResponse struct {
	SyncRepairResponse *SyncRepairResponse `protobuf:"bytes,18,opt,name=sync_repair_response,json=syncRepairResponse,proto3,oneof" json:"sync_repair_response,omitempty"`
}
type Message_SyncResponse struct {
	SyncResponse *SyncResponse `protobuf:"bytes,19,opt,name=sync_response,json=syncResponse,proto3,oneof" json:"sync_response,omitempty"`
}
type Message_SyncCommit struct {
	SyncCommit *SyncCommit `protobuf:"bytes,20,opt,name=sync_commit,json=syncCommit,proto3,oneof" json:"sync_commit,omitempty"`
}
type Message_Recover struct {
	Recover *Recover `protobuf:"bytes,21,opt,name=recover,proto3,oneof" json:"recover,omitempty"`
}
type Message_RecoverResponse struct {
	RecoverResponse *RecoverResponse `protobuf:"bytes,22,opt,name=recover_response,json=recoverResponse,proto3,oneof" json:"recover_response,omitempty"`
}
type Message_Ping struct {
	Ping *Ping `protobuf:"bytes,23,opt,name=ping,proto3,oneof" json:"ping,omitempty"`
}

func (*Message_Command) isMessage_Message()                  {}
func (*Message_CommandResponse) isMessage_Message()          {}
func (*Message_Query) isMessage_Message()                    {}
func (*Message_QueryResponse) isMessage_Message()            {}
func (*Message_SlotLookup) isMessage_Message()               {}
func (*Message_GapCommit) isMessage_Message()                {}
func (*Message_GapCommitResponse) isMessage_Message()        {}
func (*Message_ViewChangeRequest) isMessage_Message()        {}
func (*Message_ViewChange) isMessage_Message()               {}
func (*Message_ViewChangeRepair) isMessage_Message()         {}
func (*Message_ViewChangeRepairResponse) isMessage_Message() {}
func (*Message_StartView) isMessage_Message()                {}
func (*Message_ViewRepair) isMessage_Message()               {}
func (*Message_ViewRepairResponse) isMessage_Message()       {}
func (*Message_SyncPrepare) isMessage_Message()              {}
func (*Message_SyncRepair) isMessage_Message()               {}
func (*Message_SyncRepairResponse) isMessage_Message()       {}
func (*Message_SyncResponse) isMessage_Message()             {}
func (*Message_SyncCommit) isMessage_Message()               {}
func (*Message_Recover) isMessage_Message()                  {}
func (*Message_RecoverResponse) isMessage_Message()          {}
func (*Message_Ping) isMessage_Message()                     {}

func (m *Message) GetMessage() isMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Message) GetTarget() *primitive.Name {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Message) GetCommand() *CommandRequest {
	if x, ok := m.GetMessage().(*Message_Command); ok {
		return x.Command
	}
	return nil
}

func (m *Message) GetCommandResponse() *CommandResponse {
	if x, ok := m.GetMessage().(*Message_CommandResponse); ok {
		return x.CommandResponse
	}
	return nil
}

func (m *Message) GetQuery() *QueryRequest {
	if x, ok := m.GetMessage().(*Message_Query); ok {
		return x.Query
	}
	return nil
}

func (m *Message) GetQueryResponse() *QueryResponse {
	if x, ok := m.GetMessage().(*Message_QueryResponse); ok {
		return x.QueryResponse
	}
	return nil
}

func (m *Message) GetSlotLookup() *SlotLookup {
	if x, ok := m.GetMessage().(*Message_SlotLookup); ok {
		return x.SlotLookup
	}
	return nil
}

func (m *Message) GetGapCommit() *GapCommitRequest {
	if x, ok := m.GetMessage().(*Message_GapCommit); ok {
		return x.GapCommit
	}
	return nil
}

func (m *Message) GetGapCommitResponse() *GapCommitResponse {
	if x, ok := m.GetMessage().(*Message_GapCommitResponse); ok {
		return x.GapCommitResponse
	}
	return nil
}

func (m *Message) GetViewChangeRequest() *ViewChangeRequest {
	if x, ok := m.GetMessage().(*Message_ViewChangeRequest); ok {
		return x.ViewChangeRequest
	}
	return nil
}

func (m *Message) GetViewChange() *ViewChange {
	if x, ok := m.GetMessage().(*Message_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *Message) GetViewChangeRepair() *ViewChangeRepair {
	if x, ok := m.GetMessage().(*Message_ViewChangeRepair); ok {
		return x.ViewChangeRepair
	}
	return nil
}

func (m *Message) GetViewChangeRepairResponse() *ViewChangeRepairResponse {
	if x, ok := m.GetMessage().(*Message_ViewChangeRepairResponse); ok {
		return x.ViewChangeRepairResponse
	}
	return nil
}

func (m *Message) GetStartView() *StartView {
	if x, ok := m.GetMessage().(*Message_StartView); ok {
		return x.StartView
	}
	return nil
}

func (m *Message) GetViewRepair() *ViewRepair {
	if x, ok := m.GetMessage().(*Message_ViewRepair); ok {
		return x.ViewRepair
	}
	return nil
}

func (m *Message) GetViewRepairResponse() *ViewRepairResponse {
	if x, ok := m.GetMessage().(*Message_ViewRepairResponse); ok {
		return x.ViewRepairResponse
	}
	return nil
}

func (m *Message) GetSyncPrepare() *SyncPrepare {
	if x, ok := m.GetMessage().(*Message_SyncPrepare); ok {
		return x.SyncPrepare
	}
	return nil
}

func (m *Message) GetSyncRepair() *SyncRepair {
	if x, ok := m.GetMessage().(*Message_SyncRepair); ok {
		return x.SyncRepair
	}
	return nil
}

func (m *Message) GetSyncRepairResponse() *SyncRepairResponse {
	if x, ok := m.GetMessage().(*Message_SyncRepairResponse); ok {
		return x.SyncRepairResponse
	}
	return nil
}

func (m *Message) GetSyncResponse() *SyncResponse {
	if x, ok := m.GetMessage().(*Message_SyncResponse); ok {
		return x.SyncResponse
	}
	return nil
}

func (m *Message) GetSyncCommit() *SyncCommit {
	if x, ok := m.GetMessage().(*Message_SyncCommit); ok {
		return x.SyncCommit
	}
	return nil
}

func (m *Message) GetRecover() *Recover {
	if x, ok := m.GetMessage().(*Message_Recover); ok {
		return x.Recover
	}
	return nil
}

func (m *Message) GetRecoverResponse() *RecoverResponse {
	if x, ok := m.GetMessage().(*Message_RecoverResponse); ok {
		return x.RecoverResponse
	}
	return nil
}

func (m *Message) GetPing() *Ping {
	if x, ok := m.GetMessage().(*Message_Ping); ok {
		return x.Ping
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Command)(nil),
		(*Message_CommandResponse)(nil),
		(*Message_Query)(nil),
		(*Message_QueryResponse)(nil),
		(*Message_SlotLookup)(nil),
		(*Message_GapCommit)(nil),
		(*Message_GapCommitResponse)(nil),
		(*Message_ViewChangeRequest)(nil),
		(*Message_ViewChange)(nil),
		(*Message_ViewChangeRepair)(nil),
		(*Message_ViewChangeRepairResponse)(nil),
		(*Message_StartView)(nil),
		(*Message_ViewRepair)(nil),
		(*Message_ViewRepairResponse)(nil),
		(*Message_SyncPrepare)(nil),
		(*Message_SyncRepair)(nil),
		(*Message_SyncRepairResponse)(nil),
		(*Message_SyncResponse)(nil),
		(*Message_SyncCommit)(nil),
		(*Message_Recover)(nil),
		(*Message_RecoverResponse)(nil),
		(*Message_Ping)(nil),
	}
}

type ViewId struct {
	LeaderID github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=leader_id,json=leaderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"leader_id,omitempty"`
	TermID   github_com_atomix_api_proto_atomix_controller.TermID   `protobuf:"varint,2,opt,name=term_id,json=termId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.TermID" json:"term_id,omitempty"`
}

func (m *ViewId) Reset()         { *m = ViewId{} }
func (m *ViewId) String() string { return proto.CompactTextString(m) }
func (*ViewId) ProtoMessage()    {}
func (*ViewId) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{1}
}
func (m *ViewId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewId.Merge(m, src)
}
func (m *ViewId) XXX_Size() int {
	return m.Size()
}
func (m *ViewId) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewId.DiscardUnknown(m)
}

var xxx_messageInfo_ViewId proto.InternalMessageInfo

func (m *ViewId) GetLeaderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.LeaderID
	}
	return ""
}

func (m *ViewId) GetTermID() github_com_atomix_api_proto_atomix_controller.TermID {
	if m != nil {
		return m.TermID
	}
	return 0
}

type CommandRequest struct {
	TermID    github_com_atomix_api_proto_atomix_controller.TermID `protobuf:"varint,1,opt,name=term_id,json=termId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.TermID" json:"term_id,omitempty"`
	MessageID MessageID                                            `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Timestamp time.Time                                            `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Value     []byte                                               `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{2}
}
func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetTermID() github_com_atomix_api_proto_atomix_controller.TermID {
	if m != nil {
		return m.TermID
	}
	return 0
}

func (m *CommandRequest) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *CommandRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *CommandRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CommandResponse struct {
	MessageID MessageID                                              `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	SenderID  github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID    *ViewId                                                `protobuf:"bytes,3,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Index     Index                                                  `protobuf:"varint,4,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Value     []byte                                                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommandResponse) Reset()         { *m = CommandResponse{} }
func (m *CommandResponse) String() string { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()    {}
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{3}
}
func (m *CommandResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponse.Merge(m, src)
}
func (m *CommandResponse) XXX_Size() int {
	return m.Size()
}
func (m *CommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponse proto.InternalMessageInfo

func (m *CommandResponse) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *CommandResponse) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *CommandResponse) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *CommandResponse) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CommandResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CommandClose struct {
	MessageID MessageID                                              `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	SenderID  github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID    *ViewId                                                `protobuf:"bytes,3,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (m *CommandClose) Reset()         { *m = CommandClose{} }
func (m *CommandClose) String() string { return proto.CompactTextString(m) }
func (*CommandClose) ProtoMessage()    {}
func (*CommandClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{4}
}
func (m *CommandClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandClose.Merge(m, src)
}
func (m *CommandClose) XXX_Size() int {
	return m.Size()
}
func (m *CommandClose) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandClose.DiscardUnknown(m)
}

var xxx_messageInfo_CommandClose proto.InternalMessageInfo

func (m *CommandClose) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *CommandClose) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *CommandClose) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

type QueryRequest struct {
	TermID    github_com_atomix_api_proto_atomix_controller.TermID `protobuf:"varint,1,opt,name=term_id,json=termId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.TermID" json:"term_id,omitempty"`
	MessageID MessageID                                            `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Timestamp time.Time                                            `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Value     []byte                                               `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{5}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetTermID() github_com_atomix_api_proto_atomix_controller.TermID {
	if m != nil {
		return m.TermID
	}
	return 0
}

func (m *QueryRequest) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *QueryRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *QueryRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryResponse struct {
	MessageID MessageID                                              `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	SenderID  github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID    *ViewId                                                `protobuf:"bytes,3,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Value     []byte                                                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{6}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *QueryResponse) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *QueryResponse) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *QueryResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryClose struct {
	MessageID MessageID                                              `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	SenderID  github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID    *ViewId                                                `protobuf:"bytes,3,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (m *QueryClose) Reset()         { *m = QueryClose{} }
func (m *QueryClose) String() string { return proto.CompactTextString(m) }
func (*QueryClose) ProtoMessage()    {}
func (*QueryClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{7}
}
func (m *QueryClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClose.Merge(m, src)
}
func (m *QueryClose) XXX_Size() int {
	return m.Size()
}
func (m *QueryClose) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClose.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClose proto.InternalMessageInfo

func (m *QueryClose) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *QueryClose) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *QueryClose) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

type Recover struct {
	SenderID   github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	RecoveryID string                                                 `protobuf:"bytes,2,opt,name=recovery_id,json=recoveryId,proto3" json:"recovery_id,omitempty"`
}

func (m *Recover) Reset()         { *m = Recover{} }
func (m *Recover) String() string { return proto.CompactTextString(m) }
func (*Recover) ProtoMessage()    {}
func (*Recover) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{8}
}
func (m *Recover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recover.Merge(m, src)
}
func (m *Recover) XXX_Size() int {
	return m.Size()
}
func (m *Recover) XXX_DiscardUnknown() {
	xxx_messageInfo_Recover.DiscardUnknown(m)
}

var xxx_messageInfo_Recover proto.InternalMessageInfo

func (m *Recover) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *Recover) GetRecoveryID() string {
	if m != nil {
		return m.RecoveryID
	}
	return ""
}

type RecoverResponse struct {
	SenderID        github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	RecoveryID      string                                                 `protobuf:"bytes,2,opt,name=recovery_id,json=recoveryId,proto3" json:"recovery_id,omitempty"`
	ViewID          *ViewId                                                `protobuf:"bytes,3,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageID       MessageID                                              `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	CheckpointIndex Index                                                  `protobuf:"varint,5,opt,name=checkpoint_index,json=checkpointIndex,proto3,casttype=Index" json:"checkpoint_index,omitempty"`
	Checkpoint      []byte                                                 `protobuf:"bytes,6,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Log             []*Entry                                               `protobuf:"bytes,7,rep,name=log,proto3" json:"log,omitempty"`
}

func (m *RecoverResponse) Reset()         { *m = RecoverResponse{} }
func (m *RecoverResponse) String() string { return proto.CompactTextString(m) }
func (*RecoverResponse) ProtoMessage()    {}
func (*RecoverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{9}
}
func (m *RecoverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecoverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecoverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverResponse.Merge(m, src)
}
func (m *RecoverResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecoverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverResponse proto.InternalMessageInfo

func (m *RecoverResponse) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *RecoverResponse) GetRecoveryID() string {
	if m != nil {
		return m.RecoveryID
	}
	return ""
}

func (m *RecoverResponse) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *RecoverResponse) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *RecoverResponse) GetCheckpointIndex() Index {
	if m != nil {
		return m.CheckpointIndex
	}
	return 0
}

func (m *RecoverResponse) GetCheckpoint() []byte {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *RecoverResponse) GetLog() []*Entry {
	if m != nil {
		return m.Log
	}
	return nil
}

type SlotLookup struct {
	SenderID  github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID    *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageID MessageID                                              `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
}

func (m *SlotLookup) Reset()         { *m = SlotLookup{} }
func (m *SlotLookup) String() string { return proto.CompactTextString(m) }
func (*SlotLookup) ProtoMessage()    {}
func (*SlotLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{10}
}
func (m *SlotLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotLookup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotLookup.Merge(m, src)
}
func (m *SlotLookup) XXX_Size() int {
	return m.Size()
}
func (m *SlotLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotLookup.DiscardUnknown(m)
}

var xxx_messageInfo_SlotLookup proto.InternalMessageInfo

func (m *SlotLookup) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *SlotLookup) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SlotLookup) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

type GapCommitRequest struct {
	SenderID github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID   *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Index    Index                                                  `protobuf:"varint,3,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
}

func (m *GapCommitRequest) Reset()         { *m = GapCommitRequest{} }
func (m *GapCommitRequest) String() string { return proto.CompactTextString(m) }
func (*GapCommitRequest) ProtoMessage()    {}
func (*GapCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{11}
}
func (m *GapCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GapCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GapCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GapCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GapCommitRequest.Merge(m, src)
}
func (m *GapCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *GapCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GapCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GapCommitRequest proto.InternalMessageInfo

func (m *GapCommitRequest) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *GapCommitRequest) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *GapCommitRequest) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

type GapCommitResponse struct {
	SenderID github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID   *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Index    Index                                                  `protobuf:"varint,3,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
}

func (m *GapCommitResponse) Reset()         { *m = GapCommitResponse{} }
func (m *GapCommitResponse) String() string { return proto.CompactTextString(m) }
func (*GapCommitResponse) ProtoMessage()    {}
func (*GapCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{12}
}
func (m *GapCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GapCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GapCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GapCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GapCommitResponse.Merge(m, src)
}
func (m *GapCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *GapCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GapCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GapCommitResponse proto.InternalMessageInfo

func (m *GapCommitResponse) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *GapCommitResponse) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *GapCommitResponse) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

type ViewChangeRequest struct {
	SenderID github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID   *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (m *ViewChangeRequest) Reset()         { *m = ViewChangeRequest{} }
func (m *ViewChangeRequest) String() string { return proto.CompactTextString(m) }
func (*ViewChangeRequest) ProtoMessage()    {}
func (*ViewChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{13}
}
func (m *ViewChangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeRequest.Merge(m, src)
}
func (m *ViewChangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeRequest proto.InternalMessageInfo

func (m *ViewChangeRequest) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ViewChangeRequest) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

type ViewChange struct {
	SenderID      github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID        *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	LastNormal    *ViewId                                                `protobuf:"bytes,3,opt,name=last_normal,json=lastNormal,proto3" json:"last_normal,omitempty"`
	MessageID     MessageID                                              `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	NoOpFilter    []byte                                                 `protobuf:"bytes,5,opt,name=no_op_filter,json=noOpFilter,proto3" json:"no_op_filter,omitempty"`
	FirstLogIndex Index                                                  `protobuf:"varint,6,opt,name=first_log_index,json=firstLogIndex,proto3,casttype=Index" json:"first_log_index,omitempty"`
	LastLogIndex  Index                                                  `protobuf:"varint,7,opt,name=last_log_index,json=lastLogIndex,proto3,casttype=Index" json:"last_log_index,omitempty"`
}

func (m *ViewChange) Reset()         { *m = ViewChange{} }
func (m *ViewChange) String() string { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()    {}
func (*ViewChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{14}
}
func (m *ViewChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChange.Merge(m, src)
}
func (m *ViewChange) XXX_Size() int {
	return m.Size()
}
func (m *ViewChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChange.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChange proto.InternalMessageInfo

func (m *ViewChange) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ViewChange) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewChange) GetLastNormal() *ViewId {
	if m != nil {
		return m.LastNormal
	}
	return nil
}

func (m *ViewChange) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ViewChange) GetNoOpFilter() []byte {
	if m != nil {
		return m.NoOpFilter
	}
	return nil
}

func (m *ViewChange) GetFirstLogIndex() Index {
	if m != nil {
		return m.FirstLogIndex
	}
	return 0
}

func (m *ViewChange) GetLastLogIndex() Index {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

type ViewChangeRepair struct {
	SenderID   github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID     *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageID  MessageID                                              `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Checkpoint Index                                                  `protobuf:"varint,4,opt,name=checkpoint,proto3,casttype=Index" json:"checkpoint,omitempty"`
	Indexs     []Index                                                `protobuf:"varint,5,rep,packed,name=indexs,proto3,casttype=Index" json:"indexs,omitempty"`
}

func (m *ViewChangeRepair) Reset()         { *m = ViewChangeRepair{} }
func (m *ViewChangeRepair) String() string { return proto.CompactTextString(m) }
func (*ViewChangeRepair) ProtoMessage()    {}
func (*ViewChangeRepair) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{15}
}
func (m *ViewChangeRepair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeRepair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeRepair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeRepair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeRepair.Merge(m, src)
}
func (m *ViewChangeRepair) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeRepair) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeRepair.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeRepair proto.InternalMessageInfo

func (m *ViewChangeRepair) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ViewChangeRepair) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewChangeRepair) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ViewChangeRepair) GetCheckpoint() Index {
	if m != nil {
		return m.Checkpoint
	}
	return 0
}

func (m *ViewChangeRepair) GetIndexs() []Index {
	if m != nil {
		return m.Indexs
	}
	return nil
}

type ViewChangeRepairResponse struct {
	SenderID        github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID          *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageID       MessageID                                              `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	CheckpointIndex Index                                                  `protobuf:"varint,4,opt,name=checkpoint_index,json=checkpointIndex,proto3,casttype=Index" json:"checkpoint_index,omitempty"`
	Checkpoint      []byte                                                 `protobuf:"bytes,5,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Indexs          []Index                                                `protobuf:"varint,6,rep,packed,name=indexs,proto3,casttype=Index" json:"indexs,omitempty"`
}

func (m *ViewChangeRepairResponse) Reset()         { *m = ViewChangeRepairResponse{} }
func (m *ViewChangeRepairResponse) String() string { return proto.CompactTextString(m) }
func (*ViewChangeRepairResponse) ProtoMessage()    {}
func (*ViewChangeRepairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{16}
}
func (m *ViewChangeRepairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeRepairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeRepairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeRepairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeRepairResponse.Merge(m, src)
}
func (m *ViewChangeRepairResponse) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeRepairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeRepairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeRepairResponse proto.InternalMessageInfo

func (m *ViewChangeRepairResponse) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ViewChangeRepairResponse) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewChangeRepairResponse) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ViewChangeRepairResponse) GetCheckpointIndex() Index {
	if m != nil {
		return m.CheckpointIndex
	}
	return 0
}

func (m *ViewChangeRepairResponse) GetCheckpoint() []byte {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *ViewChangeRepairResponse) GetIndexs() []Index {
	if m != nil {
		return m.Indexs
	}
	return nil
}

type StartView struct {
	SenderID      github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID        *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageID     MessageID                                              `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	NoOpFilter    []byte                                                 `protobuf:"bytes,4,opt,name=no_op_filter,json=noOpFilter,proto3" json:"no_op_filter,omitempty"`
	FirstLogIndex Index                                                  `protobuf:"varint,5,opt,name=first_log_index,json=firstLogIndex,proto3,casttype=Index" json:"first_log_index,omitempty"`
	LastLogIndex  Index                                                  `protobuf:"varint,6,opt,name=last_log_index,json=lastLogIndex,proto3,casttype=Index" json:"last_log_index,omitempty"`
}

func (m *StartView) Reset()         { *m = StartView{} }
func (m *StartView) String() string { return proto.CompactTextString(m) }
func (*StartView) ProtoMessage()    {}
func (*StartView) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{17}
}
func (m *StartView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartView.Merge(m, src)
}
func (m *StartView) XXX_Size() int {
	return m.Size()
}
func (m *StartView) XXX_DiscardUnknown() {
	xxx_messageInfo_StartView.DiscardUnknown(m)
}

var xxx_messageInfo_StartView proto.InternalMessageInfo

func (m *StartView) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *StartView) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *StartView) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *StartView) GetNoOpFilter() []byte {
	if m != nil {
		return m.NoOpFilter
	}
	return nil
}

func (m *StartView) GetFirstLogIndex() Index {
	if m != nil {
		return m.FirstLogIndex
	}
	return 0
}

func (m *StartView) GetLastLogIndex() Index {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

type ViewRepair struct {
	SenderID   github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID     *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageID  MessageID                                              `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Checkpoint Index                                                  `protobuf:"varint,4,opt,name=checkpoint,proto3,casttype=Index" json:"checkpoint,omitempty"`
	Indexs     []Index                                                `protobuf:"varint,5,rep,packed,name=indexs,proto3,casttype=Index" json:"indexs,omitempty"`
}

func (m *ViewRepair) Reset()         { *m = ViewRepair{} }
func (m *ViewRepair) String() string { return proto.CompactTextString(m) }
func (*ViewRepair) ProtoMessage()    {}
func (*ViewRepair) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{18}
}
func (m *ViewRepair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewRepair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewRepair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewRepair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewRepair.Merge(m, src)
}
func (m *ViewRepair) XXX_Size() int {
	return m.Size()
}
func (m *ViewRepair) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewRepair.DiscardUnknown(m)
}

var xxx_messageInfo_ViewRepair proto.InternalMessageInfo

func (m *ViewRepair) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ViewRepair) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewRepair) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *ViewRepair) GetCheckpoint() Index {
	if m != nil {
		return m.Checkpoint
	}
	return 0
}

func (m *ViewRepair) GetIndexs() []Index {
	if m != nil {
		return m.Indexs
	}
	return nil
}

type ViewRepairResponse struct {
	SenderID        github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID          *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	CheckpointIndex Index                                                  `protobuf:"varint,3,opt,name=checkpoint_index,json=checkpointIndex,proto3,casttype=Index" json:"checkpoint_index,omitempty"`
	Checkpoint      []byte                                                 `protobuf:"bytes,4,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Entries         []*Entry                                               `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *ViewRepairResponse) Reset()         { *m = ViewRepairResponse{} }
func (m *ViewRepairResponse) String() string { return proto.CompactTextString(m) }
func (*ViewRepairResponse) ProtoMessage()    {}
func (*ViewRepairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{19}
}
func (m *ViewRepairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewRepairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewRepairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewRepairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewRepairResponse.Merge(m, src)
}
func (m *ViewRepairResponse) XXX_Size() int {
	return m.Size()
}
func (m *ViewRepairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewRepairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ViewRepairResponse proto.InternalMessageInfo

func (m *ViewRepairResponse) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ViewRepairResponse) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewRepairResponse) GetCheckpointIndex() Index {
	if m != nil {
		return m.CheckpointIndex
	}
	return 0
}

func (m *ViewRepairResponse) GetCheckpoint() []byte {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *ViewRepairResponse) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type SyncPrepare struct {
	SenderID      github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID        *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageID     MessageID                                              `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	NoOpFilter    []byte                                                 `protobuf:"bytes,4,opt,name=no_op_filter,json=noOpFilter,proto3" json:"no_op_filter,omitempty"`
	FirstLogIndex Index                                                  `protobuf:"varint,5,opt,name=first_log_index,json=firstLogIndex,proto3,casttype=Index" json:"first_log_index,omitempty"`
	LastLogIndex  Index                                                  `protobuf:"varint,6,opt,name=last_log_index,json=lastLogIndex,proto3,casttype=Index" json:"last_log_index,omitempty"`
}

func (m *SyncPrepare) Reset()         { *m = SyncPrepare{} }
func (m *SyncPrepare) String() string { return proto.CompactTextString(m) }
func (*SyncPrepare) ProtoMessage()    {}
func (*SyncPrepare) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{20}
}
func (m *SyncPrepare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncPrepare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncPrepare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncPrepare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncPrepare.Merge(m, src)
}
func (m *SyncPrepare) XXX_Size() int {
	return m.Size()
}
func (m *SyncPrepare) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncPrepare.DiscardUnknown(m)
}

var xxx_messageInfo_SyncPrepare proto.InternalMessageInfo

func (m *SyncPrepare) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *SyncPrepare) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncPrepare) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *SyncPrepare) GetNoOpFilter() []byte {
	if m != nil {
		return m.NoOpFilter
	}
	return nil
}

func (m *SyncPrepare) GetFirstLogIndex() Index {
	if m != nil {
		return m.FirstLogIndex
	}
	return 0
}

func (m *SyncPrepare) GetLastLogIndex() Index {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

type SyncRepair struct {
	SenderID   github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID     *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Checkpoint Index                                                  `protobuf:"varint,3,opt,name=checkpoint,proto3,casttype=Index" json:"checkpoint,omitempty"`
	Indexs     []Index                                                `protobuf:"varint,4,rep,packed,name=indexs,proto3,casttype=Index" json:"indexs,omitempty"`
}

func (m *SyncRepair) Reset()         { *m = SyncRepair{} }
func (m *SyncRepair) String() string { return proto.CompactTextString(m) }
func (*SyncRepair) ProtoMessage()    {}
func (*SyncRepair) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{21}
}
func (m *SyncRepair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRepair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRepair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRepair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRepair.Merge(m, src)
}
func (m *SyncRepair) XXX_Size() int {
	return m.Size()
}
func (m *SyncRepair) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRepair.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRepair proto.InternalMessageInfo

func (m *SyncRepair) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *SyncRepair) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncRepair) GetCheckpoint() Index {
	if m != nil {
		return m.Checkpoint
	}
	return 0
}

func (m *SyncRepair) GetIndexs() []Index {
	if m != nil {
		return m.Indexs
	}
	return nil
}

type SyncRepairResponse struct {
	SenderID        github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID          *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	CheckpointIndex Index                                                  `protobuf:"varint,3,opt,name=checkpoint_index,json=checkpointIndex,proto3,casttype=Index" json:"checkpoint_index,omitempty"`
	Checkpoint      []byte                                                 `protobuf:"bytes,4,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Entries         []*Entry                                               `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *SyncRepairResponse) Reset()         { *m = SyncRepairResponse{} }
func (m *SyncRepairResponse) String() string { return proto.CompactTextString(m) }
func (*SyncRepairResponse) ProtoMessage()    {}
func (*SyncRepairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{22}
}
func (m *SyncRepairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRepairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRepairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRepairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRepairResponse.Merge(m, src)
}
func (m *SyncRepairResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncRepairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRepairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRepairResponse proto.InternalMessageInfo

func (m *SyncRepairResponse) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *SyncRepairResponse) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncRepairResponse) GetCheckpointIndex() Index {
	if m != nil {
		return m.CheckpointIndex
	}
	return 0
}

func (m *SyncRepairResponse) GetCheckpoint() []byte {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *SyncRepairResponse) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type SyncResponse struct {
	SenderID github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID   *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Index    Index                                                  `protobuf:"varint,3,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
}

func (m *SyncResponse) Reset()         { *m = SyncResponse{} }
func (m *SyncResponse) String() string { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()    {}
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{23}
}
func (m *SyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResponse.Merge(m, src)
}
func (m *SyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResponse proto.InternalMessageInfo

func (m *SyncResponse) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *SyncResponse) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncResponse) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

type SyncCommit struct {
	SenderID  github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID    *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageID MessageID                                              `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	SyncPoint Index                                                  `protobuf:"varint,4,opt,name=sync_point,json=syncPoint,proto3,casttype=Index" json:"sync_point,omitempty"`
}

func (m *SyncCommit) Reset()         { *m = SyncCommit{} }
func (m *SyncCommit) String() string { return proto.CompactTextString(m) }
func (*SyncCommit) ProtoMessage()    {}
func (*SyncCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{24}
}
func (m *SyncCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommit.Merge(m, src)
}
func (m *SyncCommit) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommit.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommit proto.InternalMessageInfo

func (m *SyncCommit) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *SyncCommit) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncCommit) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *SyncCommit) GetSyncPoint() Index {
	if m != nil {
		return m.SyncPoint
	}
	return 0
}

type Ping struct {
	SenderID github_com_atomix_api_proto_atomix_controller.MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=github.com/atomix/api/proto/atomix/controller.MemberID" json:"sender_id,omitempty"`
	ViewID   *ViewId                                                `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{25}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetSenderID() github_com_atomix_api_proto_atomix_controller.MemberID {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *Ping) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

type Entry struct {
	Index     Index     `protobuf:"varint,1,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Timestamp time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	MessageID MessageID `protobuf:"varint,3,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	Value     []byte    `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{26}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Entry) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *Entry) GetMessageID() MessageID {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *Entry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Indexed struct {
	Index Index  `protobuf:"varint,1,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Indexed) Reset()         { *m = Indexed{} }
func (m *Indexed) String() string { return proto.CompactTextString(m) }
func (*Indexed) ProtoMessage()    {}
func (*Indexed) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c191cfc48bb1235, []int{27}
}
func (m *Indexed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Indexed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Indexed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Indexed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Indexed.Merge(m, src)
}
func (m *Indexed) XXX_Size() int {
	return m.Size()
}
func (m *Indexed) XXX_DiscardUnknown() {
	xxx_messageInfo_Indexed.DiscardUnknown(m)
}

var xxx_messageInfo_Indexed proto.InternalMessageInfo

func (m *Indexed) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Indexed) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "atomix.map.Message")
	proto.RegisterType((*ViewId)(nil), "atomix.map.ViewId")
	proto.RegisterType((*CommandRequest)(nil), "atomix.map.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "atomix.map.CommandResponse")
	proto.RegisterType((*CommandClose)(nil), "atomix.map.CommandClose")
	proto.RegisterType((*QueryRequest)(nil), "atomix.map.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "atomix.map.QueryResponse")
	proto.RegisterType((*QueryClose)(nil), "atomix.map.QueryClose")
	proto.RegisterType((*Recover)(nil), "atomix.map.Recover")
	proto.RegisterType((*RecoverResponse)(nil), "atomix.map.RecoverResponse")
	proto.RegisterType((*SlotLookup)(nil), "atomix.map.SlotLookup")
	proto.RegisterType((*GapCommitRequest)(nil), "atomix.map.GapCommitRequest")
	proto.RegisterType((*GapCommitResponse)(nil), "atomix.map.GapCommitResponse")
	proto.RegisterType((*ViewChangeRequest)(nil), "atomix.map.ViewChangeRequest")
	proto.RegisterType((*ViewChange)(nil), "atomix.map.ViewChange")
	proto.RegisterType((*ViewChangeRepair)(nil), "atomix.map.ViewChangeRepair")
	proto.RegisterType((*ViewChangeRepairResponse)(nil), "atomix.map.ViewChangeRepairResponse")
	proto.RegisterType((*StartView)(nil), "atomix.map.StartView")
	proto.RegisterType((*ViewRepair)(nil), "atomix.map.ViewRepair")
	proto.RegisterType((*ViewRepairResponse)(nil), "atomix.map.ViewRepairResponse")
	proto.RegisterType((*SyncPrepare)(nil), "atomix.map.SyncPrepare")
	proto.RegisterType((*SyncRepair)(nil), "atomix.map.SyncRepair")
	proto.RegisterType((*SyncRepairResponse)(nil), "atomix.map.SyncRepairResponse")
	proto.RegisterType((*SyncResponse)(nil), "atomix.map.SyncResponse")
	proto.RegisterType((*SyncCommit)(nil), "atomix.map.SyncCommit")
	proto.RegisterType((*Ping)(nil), "atomix.map.Ping")
	proto.RegisterType((*Entry)(nil), "atomix.map.Entry")
	proto.RegisterType((*Indexed)(nil), "atomix.map.Indexed")
}

func init() { proto.RegisterFile("atomix/p2p_map/p2p_map.proto", fileDescriptor_9c191cfc48bb1235) }

var fileDescriptor_9c191cfc48bb1235 = []byte{
	// 1568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x5d, 0x8f, 0xdb, 0x44,
	0x17, 0x8e, 0x9d, 0xaf, 0xcd, 0x49, 0xf6, 0x6b, 0xba, 0x6d, 0xfd, 0x6e, 0xfb, 0x26, 0xfb, 0xe6,
	0x45, 0x68, 0x11, 0x52, 0x52, 0xb6, 0x55, 0x51, 0x05, 0x08, 0x94, 0x2d, 0x25, 0x91, 0xb6, 0xed,
	0xd6, 0xad, 0xb8, 0xe1, 0xc2, 0xf2, 0x3a, 0x53, 0xd7, 0xaa, 0xed, 0x71, 0x6d, 0x27, 0xed, 0xde,
	0x21, 0xfe, 0x00, 0xbd, 0xe2, 0x16, 0x90, 0xf8, 0x03, 0x08, 0x71, 0xc1, 0x15, 0xb7, 0x15, 0x12,
	0x52, 0xe1, 0x8a, 0xab, 0x05, 0x6d, 0x85, 0x90, 0x10, 0x3f, 0x00, 0x15, 0x09, 0xa1, 0x19, 0x4f,
	0x32, 0xfe, 0xc8, 0xb6, 0x4d, 0x4b, 0xd1, 0x76, 0xe9, 0x55, 0x3c, 0x67, 0xce, 0x79, 0xe6, 0x9c,
	0xc7, 0x73, 0xce, 0xc9, 0x8c, 0xe1, 0xb8, 0x1e, 0x12, 0xc7, 0xba, 0xd5, 0xf6, 0xd6, 0x3c, 0xcd,
	0xd1, 0xbd, 0xd1, 0x6f, 0xcb, 0xf3, 0x49, 0x48, 0x10, 0x44, 0xb3, 0x2d, 0x47, 0xf7, 0x96, 0x97,
	0x4c, 0x62, 0x12, 0x26, 0x6e, 0xd3, 0xa7, 0x48, 0x63, 0xb9, 0xc9, 0xed, 0x0d, 0xe2, 0x86, 0x3e,
	0xb1, 0x6d, 0xec, 0xc7, 0x1e, 0xb9, 0xce, 0xca, 0x68, 0x0d, 0xdf, 0x72, 0xac, 0xd0, 0x1a, 0x62,
	0xf1, 0xc4, 0x35, 0x1a, 0x26, 0x21, 0xa6, 0x4d, 0xe5, 0x24, 0x24, 0x5b, 0x83, 0xab, 0xed, 0xd0,
	0x72, 0x70, 0x10, 0xea, 0x0e, 0x77, 0xa4, 0xf9, 0x47, 0x15, 0xca, 0xe7, 0x71, 0x10, 0xe8, 0x26,
	0x46, 0x2d, 0x28, 0x85, 0xba, 0x6f, 0xe2, 0x50, 0x91, 0x56, 0xa4, 0xd5, 0xea, 0xda, 0x91, 0x16,
	0xf7, 0x52, 0xa0, 0x5e, 0xd0, 0x1d, 0xac, 0x72, 0x2d, 0x74, 0x1a, 0xca, 0x06, 0x71, 0x1c, 0xdd,
	0xed, 0x2b, 0x32, 0x33, 0x58, 0x6e, 0x89, 0xb0, 0x5a, 0xeb, 0xd1, 0x94, 0x8a, 0x6f, 0x0c, 0x70,
	0x10, 0x76, 0x73, 0xea, 0x48, 0x19, 0x75, 0x61, 0x81, 0x3f, 0x6a, 0x3e, 0x0e, 0x3c, 0xe2, 0x06,
	0x58, 0xc9, 0x33, 0x80, 0x63, 0x13, 0x01, 0x22, 0x95, 0x6e, 0x4e, 0x9d, 0x37, 0x92, 0x22, 0x74,
	0x02, 0x8a, 0x37, 0x06, 0xd8, 0xdf, 0x56, 0x0a, 0xcc, 0x5c, 0x89, 0x9b, 0x5f, 0xa2, 0x13, 0x62,
	0xf5, 0x48, 0x11, 0x75, 0x60, 0x8e, 0x3d, 0x88, 0x95, 0x8b, 0xcc, 0xf4, 0x3f, 0x13, 0x4c, 0xc7,
	0xeb, 0xce, 0xde, 0x88, 0x0b, 0xd0, 0x19, 0xa8, 0x06, 0x36, 0x09, 0x35, 0x9b, 0x90, 0xeb, 0x03,
	0x4f, 0x29, 0x25, 0xc9, 0xa2, 0x00, 0x97, 0x6d, 0x12, 0x6e, 0xb0, 0xd9, 0x6e, 0x4e, 0x85, 0x60,
	0x3c, 0x42, 0x6f, 0x00, 0x98, 0xba, 0xa7, 0xd1, 0x38, 0xac, 0x50, 0x29, 0x33, 0xcb, 0xe3, 0x71,
	0xcb, 0x77, 0x74, 0x6f, 0x9d, 0x4d, 0x0a, 0xcf, 0x2b, 0xe6, 0x48, 0x86, 0x2e, 0xc2, 0x21, 0x61,
	0x2e, 0x42, 0x98, 0x61, 0x38, 0xff, 0xdd, 0x03, 0x67, 0x1c, 0xc6, 0xa2, 0x99, 0x16, 0x52, 0xc0,
	0xa1, 0x85, 0x6f, 0x6a, 0xc6, 0x35, 0xdd, 0x35, 0xb1, 0xe6, 0x47, 0x8b, 0x2a, 0x95, 0x2c, 0xe0,
	0xbb, 0x16, 0xbe, 0xb9, 0xce, 0xb4, 0x84, 0x67, 0x8b, 0xc3, 0xb4, 0x90, 0x72, 0x13, 0x03, 0x54,
	0x20, 0xcb, 0x8d, 0x00, 0xa2, 0xdc, 0x08, 0x04, 0xb4, 0x01, 0x28, 0xe9, 0x8b, 0xa7, 0x5b, 0xbe,
	0x52, 0xcd, 0x72, 0x14, 0x77, 0x85, 0xea, 0x74, 0x73, 0xea, 0xc2, 0x30, 0x25, 0x43, 0x18, 0x8e,
	0x65, 0xd1, 0x04, 0x65, 0x35, 0x06, 0xfb, 0xc2, 0x83, 0x60, 0x63, 0xcc, 0x29, 0xc3, 0x3d, 0xe6,
	0xd0, 0x69, 0x80, 0x20, 0xd4, 0xfd, 0x50, 0xa3, 0x1a, 0xca, 0x2c, 0x43, 0x3d, 0x9c, 0xd8, 0x0a,
	0x74, 0x96, 0x42, 0xd3, 0x37, 0x19, 0x8c, 0x06, 0x63, 0x9e, 0x78, 0x94, 0x73, 0x93, 0x79, 0x1a,
	0xc7, 0xc7, 0x78, 0xe2, 0x91, 0xa9, 0xb0, 0x14, 0x33, 0x15, 0x21, 0xcd, 0x33, 0x8c, 0xfa, 0x64,
	0x8c, 0x58, 0x30, 0x68, 0x98, 0x91, 0xa2, 0xd7, 0xa1, 0x16, 0x6c, 0xbb, 0x86, 0xe6, 0x51, 0x50,
	0x1f, 0x2b, 0x0b, 0x0c, 0xeb, 0x68, 0x22, 0x90, 0x6d, 0xd7, 0xd8, 0x8c, 0xa6, 0xbb, 0x39, 0xb5,
	0x1a, 0x88, 0x21, 0x4b, 0x08, 0x6a, 0xcd, 0x83, 0x59, 0x9c, 0x90, 0x10, 0xdb, 0xae, 0x21, 0x82,
	0x09, 0xc6, 0x23, 0x1a, 0x4c, 0xcc, 0x54, 0x04, 0x83, 0xb2, 0xc1, 0x08, 0x8c, 0x78, 0x30, 0x41,
	0x46, 0x8a, 0xde, 0x84, 0x59, 0x8e, 0xc9, 0xc1, 0x0e, 0x65, 0xab, 0x43, 0x04, 0x36, 0x86, 0xa9,
	0x05, 0xb1, 0xf1, 0x38, 0x1e, 0x9e, 0xa6, 0x4b, 0x93, 0xe3, 0x89, 0x52, 0x69, 0x14, 0x0f, 0xcf,
	0xd0, 0x36, 0x94, 0x7d, 0x6c, 0x90, 0x21, 0xf6, 0x95, 0xc3, 0xcc, 0xec, 0x50, 0xdc, 0x4c, 0x8d,
	0xa6, 0x68, 0x31, 0xe4, 0x5a, 0xb4, 0x18, 0xf2, 0x47, 0xe1, 0xef, 0x91, 0x6c, 0x31, 0xe4, 0x96,
	0xf1, 0x62, 0xe8, 0x27, 0x45, 0xe8, 0x45, 0x28, 0x78, 0x96, 0x6b, 0x2a, 0x47, 0x99, 0xf5, 0x42,
	0xdc, 0x7a, 0xd3, 0x72, 0xcd, 0x6e, 0x4e, 0x65, 0xf3, 0x9d, 0x0a, 0x94, 0x9d, 0xa8, 0xe2, 0x37,
	0xbf, 0x91, 0xa0, 0x44, 0xf7, 0x48, 0xaf, 0x8f, 0x0c, 0xa8, 0xd8, 0x58, 0xef, 0x63, 0x5f, 0xb3,
	0xfa, 0xac, 0xfe, 0x57, 0x3a, 0xe7, 0x76, 0x77, 0x1a, 0x33, 0x1b, 0x4c, 0xd8, 0x3b, 0x7b, 0x7f,
	0xa7, 0x71, 0xda, 0xb4, 0xc2, 0x6b, 0x83, 0xad, 0x96, 0x41, 0x9c, 0x36, 0xef, 0x3c, 0xba, 0x67,
	0x45, 0xbd, 0xa5, 0x9d, 0x69, 0x57, 0xad, 0xf3, 0xd8, 0xd9, 0xa2, 0x96, 0xea, 0x4c, 0x04, 0xdc,
	0xeb, 0xa3, 0xf7, 0xa0, 0x1c, 0x62, 0xdf, 0xa1, 0x4b, 0xd0, 0x8e, 0x51, 0xe8, 0x74, 0x76, 0x77,
	0x1a, 0xa5, 0x2b, 0xd8, 0x77, 0xd8, 0x02, 0xa7, 0xa6, 0x5b, 0x20, 0xb2, 0x53, 0x4b, 0x14, 0xb2,
	0xd7, 0x6f, 0x7e, 0x20, 0xc3, 0x5c, 0xb2, 0xe9, 0xc4, 0xd7, 0x93, 0xfe, 0xee, 0xf5, 0xd0, 0x19,
	0x00, 0xce, 0xa3, 0x88, 0x67, 0x79, 0x77, 0xa7, 0x51, 0xe1, 0xfd, 0x94, 0x2d, 0x21, 0x06, 0x6a,
	0x85, 0x6b, 0xf7, 0xfa, 0xa8, 0x03, 0x95, 0x71, 0x23, 0xe6, 0xad, 0x6f, 0xb9, 0x15, 0xb5, 0xea,
	0xd6, 0xa8, 0x55, 0xb7, 0xae, 0x8c, 0x34, 0x3a, 0x33, 0x77, 0x76, 0x1a, 0xb9, 0xdb, 0x3f, 0x36,
	0x24, 0x55, 0x98, 0xa1, 0x25, 0x28, 0x0e, 0x75, 0x7b, 0x80, 0x59, 0xef, 0xab, 0xa9, 0xd1, 0xa0,
	0xf9, 0xa9, 0x0c, 0xf3, 0xa9, 0xc6, 0x99, 0x72, 0x54, 0x9a, 0xc6, 0x51, 0x03, 0x2a, 0x01, 0x76,
	0xf9, 0xae, 0x90, 0xc5, 0xae, 0xb8, 0xcc, 0x84, 0x4f, 0xb6, 0x2b, 0x22, 0xe0, 0x5e, 0x1f, 0xbd,
	0x0a, 0x65, 0x56, 0xd0, 0xac, 0x3e, 0xe7, 0x02, 0xa5, 0x6b, 0x58, 0xaf, 0xdf, 0x01, 0xfa, 0xe6,
	0xd8, 0xf3, 0x59, 0xb5, 0x34, 0x8c, 0xf6, 0x6c, 0x03, 0x8a, 0x96, 0xdb, 0xc7, 0xb7, 0x18, 0x05,
	0x85, 0x4e, 0xe5, 0xfe, 0x4e, 0xa3, 0xd8, 0xa3, 0x02, 0x35, 0x92, 0x0b, 0x8e, 0x8a, 0x71, 0x8e,
	0x7e, 0x91, 0xa0, 0xc6, 0x39, 0x5a, 0xb7, 0xc9, 0x01, 0x26, 0xa8, 0xf9, 0xbe, 0x0c, 0xb5, 0xf8,
	0xff, 0xa0, 0x7f, 0x61, 0x42, 0xfc, 0x29, 0xc1, 0xec, 0xa5, 0xd4, 0xdf, 0xb7, 0x03, 0x9a, 0x0e,
	0x93, 0x09, 0xf8, 0x59, 0x02, 0x60, 0x04, 0x1c, 0xf0, 0xbd, 0xfe, 0xb1, 0x04, 0x65, 0xde, 0x25,
	0x93, 0x9e, 0x4a, 0x4f, 0xc9, 0xd3, 0x36, 0x54, 0x79, 0x0b, 0xde, 0x16, 0x84, 0xcc, 0xed, 0xee,
	0x34, 0x80, 0xbb, 0xb1, 0xdd, 0x3b, 0xab, 0xc2, 0x48, 0xa5, 0xd7, 0x6f, 0x7e, 0x94, 0x87, 0xf9,
	0x54, 0x1f, 0xdf, 0x9f, 0x9e, 0x3e, 0xfe, 0x16, 0x4c, 0xee, 0xae, 0xc2, 0x34, 0xbb, 0xeb, 0x14,
	0x2c, 0x18, 0xd7, 0xb0, 0x71, 0xdd, 0x23, 0x96, 0x1b, 0x6a, 0x51, 0x5d, 0x2f, 0xa6, 0xeb, 0xfa,
	0xbc, 0x50, 0x61, 0x02, 0x54, 0x07, 0x10, 0x22, 0x76, 0x14, 0xab, 0xa9, 0x31, 0x09, 0xfa, 0x3f,
	0xe4, 0x6d, 0x62, 0x2a, 0xe5, 0x95, 0xfc, 0x6a, 0x75, 0x6d, 0x31, 0x1e, 0xc5, 0xdb, 0x6e, 0xe8,
	0x6f, 0xab, 0x74, 0x96, 0xa5, 0x88, 0x38, 0xb2, 0xfd, 0x33, 0xef, 0x24, 0x46, 0xb1, 0xfc, 0x04,
	0x14, 0xe7, 0xa7, 0xa0, 0xb8, 0xf9, 0x9d, 0x04, 0x0b, 0xe9, 0x03, 0xe6, 0x3e, 0x8f, 0x76, 0xdc,
	0xe2, 0xf3, 0x93, 0x5b, 0x7c, 0xf3, 0x7b, 0x09, 0x16, 0x33, 0x87, 0xdd, 0x67, 0x3d, 0xa8, 0xcf,
	0x25, 0x58, 0xcc, 0x1c, 0xb8, 0xf7, 0x77, 0x50, 0xcd, 0x4f, 0xf2, 0x00, 0xc2, 0xe7, 0x7d, 0xfe,
	0x06, 0x4e, 0x42, 0xd5, 0xd6, 0x83, 0x50, 0x73, 0x89, 0xef, 0xe8, 0xf6, 0xde, 0x45, 0x4e, 0x05,
	0xaa, 0x76, 0x81, 0x69, 0x3d, 0x49, 0x71, 0x5b, 0x81, 0x9a, 0x4b, 0x34, 0xe2, 0x69, 0x57, 0x2d,
	0x3b, 0xc4, 0x3e, 0xff, 0x3f, 0x0a, 0x2e, 0xb9, 0xe8, 0x9d, 0x63, 0x12, 0xf4, 0x0a, 0xcc, 0x5f,
	0xb5, 0xfc, 0x20, 0xd4, 0x6c, 0x62, 0xf2, 0xea, 0x57, 0x4a, 0xef, 0x8e, 0x59, 0xa6, 0xb1, 0x41,
	0xcc, 0xa8, 0xf6, 0xb5, 0x61, 0x8e, 0x05, 0x21, 0x2c, 0xca, 0x69, 0x8b, 0x1a, 0x55, 0x18, 0x19,
	0x34, 0xbf, 0x92, 0x61, 0x21, 0x7d, 0xcb, 0x71, 0x60, 0xab, 0x1d, 0x7a, 0x29, 0xd1, 0x1a, 0x32,
	0x47, 0x84, 0x78, 0x97, 0xf8, 0x1f, 0x94, 0x18, 0x81, 0x81, 0x52, 0x5c, 0xc9, 0x27, 0xd5, 0xf8,
	0x44, 0xf3, 0x37, 0x19, 0x94, 0xbd, 0x6e, 0x88, 0x0e, 0x2e, 0x87, 0x93, 0x9a, 0x72, 0x61, 0xca,
	0xa6, 0x5c, 0xcc, 0x34, 0x65, 0x41, 0x77, 0x69, 0x2f, 0xba, 0x7f, 0x95, 0xa1, 0x32, 0xbe, 0x3a,
	0x3b, 0xb8, 0xfc, 0xa6, 0xeb, 0x42, 0xe1, 0x51, 0xea, 0x42, 0x71, 0xea, 0xba, 0x50, 0x7a, 0x70,
	0x5d, 0xf8, 0x42, 0x8e, 0x4a, 0xf7, 0xf3, 0x8a, 0x30, 0x4d, 0x45, 0xf8, 0x52, 0x06, 0x94, 0xbd,
	0x60, 0xdd, 0xe7, 0xec, 0x4d, 0x4a, 0xe8, 0xfc, 0x94, 0x09, 0x5d, 0xc8, 0x24, 0xf4, 0xcb, 0x50,
	0xc6, 0x6e, 0xe8, 0x5b, 0x38, 0xa2, 0x6b, 0xe2, 0x3f, 0xed, 0x91, 0x06, 0xad, 0xa4, 0xd5, 0xd8,
	0x65, 0xf2, 0xf3, 0xe4, 0x7e, 0xba, 0xc9, 0xfd, 0x3b, 0x3d, 0xdc, 0x88, 0x0b, 0xf7, 0xfd, 0xcd,
	0x76, 0x32, 0x43, 0xf3, 0x8f, 0x96, 0xa1, 0x85, 0x07, 0x65, 0x68, 0xf6, 0xab, 0xc1, 0xf3, 0x0c,
	0x7d, 0x58, 0x86, 0x7e, 0x2b, 0x41, 0x2d, 0xfe, 0x81, 0xe4, 0x59, 0x3f, 0x4e, 0x7d, 0x28, 0x47,
	0x29, 0xc0, 0xbf, 0xd1, 0x1c, 0xd8, 0x82, 0xb3, 0x0a, 0x10, 0x7d, 0xc5, 0x9b, 0xdc, 0xdf, 0x2a,
	0xec, 0x9b, 0x1d, 0x9d, 0x6b, 0x7e, 0x26, 0x41, 0x61, 0xd3, 0x72, 0xcd, 0x7d, 0x7e, 0xa6, 0xfc,
	0x5a, 0x82, 0x22, 0xdb, 0x9b, 0xe2, 0x1d, 0x4b, 0x7b, 0x5c, 0xf5, 0x27, 0x6e, 0x90, 0xe5, 0xc7,
	0xbb, 0x41, 0x7e, 0x0d, 0xaa, 0x23, 0xea, 0xdd, 0x81, 0xf3, 0x08, 0xdc, 0x8f, 0xde, 0xd4, 0x85,
	0x81, 0xb3, 0xc7, 0xed, 0xeb, 0x5b, 0x50, 0x66, 0x6e, 0xe2, 0xfe, 0xc3, 0x43, 0x18, 0x23, 0xc8,
	0x31, 0x84, 0xb5, 0x2e, 0xcc, 0x6e, 0xae, 0x6d, 0x9e, 0xd7, 0xbd, 0xcb, 0xd8, 0x1f, 0x5a, 0x06,
	0xa6, 0x6c, 0xae, 0x13, 0xd7, 0xc5, 0x46, 0x88, 0x12, 0x1f, 0x17, 0xb9, 0x5b, 0xcb, 0x93, 0x84,
	0xab, 0xd2, 0x09, 0xa9, 0xa3, 0xdc, 0xd9, 0xad, 0x4b, 0x77, 0x77, 0xeb, 0xd2, 0x4f, 0xbb, 0x75,
	0xe9, 0xf6, 0xbd, 0x7a, 0xee, 0xee, 0xbd, 0x7a, 0xee, 0x87, 0x7b, 0xf5, 0xdc, 0x56, 0x89, 0x31,
	0x74, 0xf2, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x59, 0xbb, 0x71, 0xb5, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// P2PMapServiceClient is the client API for P2PMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type P2PMapServiceClient interface {
	// Connect connects to a peer
	Connect(ctx context.Context, opts ...grpc.CallOption) (P2PMapService_ConnectClient, error)
}

type p2PMapServiceClient struct {
	cc *grpc.ClientConn
}

func NewP2PMapServiceClient(cc *grpc.ClientConn) P2PMapServiceClient {
	return &p2PMapServiceClient{cc}
}

func (c *p2PMapServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (P2PMapService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2PMapService_serviceDesc.Streams[0], "/atomix.map.P2PMapService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PMapServiceConnectClient{stream}
	return x, nil
}

type P2PMapService_ConnectClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type p2PMapServiceConnectClient struct {
	grpc.ClientStream
}

func (x *p2PMapServiceConnectClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PMapServiceConnectClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PMapServiceServer is the server API for P2PMapService service.
type P2PMapServiceServer interface {
	// Connect connects to a peer
	Connect(P2PMapService_ConnectServer) error
}

// UnimplementedP2PMapServiceServer can be embedded to have forward compatible implementations.
type UnimplementedP2PMapServiceServer struct {
}

func (*UnimplementedP2PMapServiceServer) Connect(srv P2PMapService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterP2PMapServiceServer(s *grpc.Server, srv P2PMapServiceServer) {
	s.RegisterService(&_P2PMapService_serviceDesc, srv)
}

func _P2PMapService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PMapServiceServer).Connect(&p2PMapServiceConnectServer{stream})
}

type P2PMapService_ConnectServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type p2PMapServiceConnectServer struct {
	grpc.ServerStream
}

func (x *p2PMapServiceConnectServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PMapServiceConnectServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _P2PMapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.map.P2PMapService",
	HandlerType: (*P2PMapServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _P2PMapService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "atomix/p2p_map/p2p_map.proto",
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message_Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_CommandResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_CommandResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommandResponse != nil {
		{
			size, err := m.CommandResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Message_QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_QueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QueryResponse != nil {
		{
			size, err := m.QueryResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Message_SlotLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SlotLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlotLookup != nil {
		{
			size, err := m.SlotLookup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Message_GapCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_GapCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GapCommit != nil {
		{
			size, err := m.GapCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Message_GapCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_GapCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GapCommitResponse != nil {
		{
			size, err := m.GapCommitResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Message_ViewChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ViewChangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChangeRequest != nil {
		{
			size, err := m.ViewChangeRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Message_ViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChange != nil {
		{
			size, err := m.ViewChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Message_ViewChangeRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ViewChangeRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChangeRepair != nil {
		{
			size, err := m.ViewChangeRepair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Message_ViewChangeRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ViewChangeRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChangeRepairResponse != nil {
		{
			size, err := m.ViewChangeRepairResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Message_StartView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_StartView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartView != nil {
		{
			size, err := m.StartView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Message_ViewRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ViewRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewRepair != nil {
		{
			size, err := m.ViewRepair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *Message_ViewRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ViewRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewRepairResponse != nil {
		{
			size, err := m.ViewRepairResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *Message_SyncPrepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SyncPrepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncPrepare != nil {
		{
			size, err := m.SyncPrepare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *Message_SyncRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SyncRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncRepair != nil {
		{
			size, err := m.SyncRepair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Message_SyncRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SyncRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncRepairResponse != nil {
		{
			size, err := m.SyncRepairResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *Message_SyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncResponse != nil {
		{
			size, err := m.SyncResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *Message_SyncCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SyncCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncCommit != nil {
		{
			size, err := m.SyncCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *Message_Recover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Recover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Recover != nil {
		{
			size, err := m.Recover.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *Message_RecoverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_RecoverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RecoverResponse != nil {
		{
			size, err := m.RecoverResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *Message_Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ping != nil {
		{
			size, err := m.Ping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *ViewId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TermID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.TermID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LeaderID) > 0 {
		i -= len(m.LeaderID)
		copy(dAtA[i:], m.LeaderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.LeaderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintP2PMap(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0x1a
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x10
	}
	if m.TermID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.TermID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Index != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0x12
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0x12
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	n27, err27 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err27 != nil {
		return 0, err27
	}
	i -= n27
	i = encodeVarintP2PMap(dAtA, i, uint64(n27))
	i--
	dAtA[i] = 0x1a
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x10
	}
	if m.TermID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.TermID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0x12
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0x12
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Recover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecoveryID) > 0 {
		i -= len(m.RecoveryID)
		copy(dAtA[i:], m.RecoveryID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.RecoveryID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecoverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for iNdEx := len(m.Log) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Log[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintP2PMap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Checkpoint) > 0 {
		i -= len(m.Checkpoint)
		copy(dAtA[i:], m.Checkpoint)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Checkpoint)))
		i--
		dAtA[i] = 0x32
	}
	if m.CheckpointIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.CheckpointIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x20
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecoveryID) > 0 {
		i -= len(m.RecoveryID)
		copy(dAtA[i:], m.RecoveryID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.RecoveryID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlotLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GapCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GapCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GapCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GapCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GapCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GapCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastLogIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.LastLogIndex))
		i--
		dAtA[i] = 0x38
	}
	if m.FirstLogIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.FirstLogIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.NoOpFilter) > 0 {
		i -= len(m.NoOpFilter)
		copy(dAtA[i:], m.NoOpFilter)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.NoOpFilter)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x20
	}
	if m.LastNormal != nil {
		{
			size, err := m.LastNormal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeRepair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indexs) > 0 {
		dAtA38 := make([]byte, len(m.Indexs)*10)
		var j37 int
		for _, num := range m.Indexs {
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		i -= j37
		copy(dAtA[i:], dAtA38[:j37])
		i = encodeVarintP2PMap(dAtA, i, uint64(j37))
		i--
		dAtA[i] = 0x2a
	}
	if m.Checkpoint != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Checkpoint))
		i--
		dAtA[i] = 0x20
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeRepairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indexs) > 0 {
		dAtA41 := make([]byte, len(m.Indexs)*10)
		var j40 int
		for _, num := range m.Indexs {
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		i -= j40
		copy(dAtA[i:], dAtA41[:j40])
		i = encodeVarintP2PMap(dAtA, i, uint64(j40))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Checkpoint) > 0 {
		i -= len(m.Checkpoint)
		copy(dAtA[i:], m.Checkpoint)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Checkpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CheckpointIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.CheckpointIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastLogIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.LastLogIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.FirstLogIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.FirstLogIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoOpFilter) > 0 {
		i -= len(m.NoOpFilter)
		copy(dAtA[i:], m.NoOpFilter)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.NoOpFilter)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewRepair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indexs) > 0 {
		dAtA45 := make([]byte, len(m.Indexs)*10)
		var j44 int
		for _, num := range m.Indexs {
			for num >= 1<<7 {
				dAtA45[j44] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j44++
			}
			dAtA45[j44] = uint8(num)
			j44++
		}
		i -= j44
		copy(dAtA[i:], dAtA45[:j44])
		i = encodeVarintP2PMap(dAtA, i, uint64(j44))
		i--
		dAtA[i] = 0x2a
	}
	if m.Checkpoint != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Checkpoint))
		i--
		dAtA[i] = 0x20
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewRepairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintP2PMap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Checkpoint) > 0 {
		i -= len(m.Checkpoint)
		copy(dAtA[i:], m.Checkpoint)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Checkpoint)))
		i--
		dAtA[i] = 0x22
	}
	if m.CheckpointIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.CheckpointIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncPrepare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncPrepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncPrepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastLogIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.LastLogIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.FirstLogIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.FirstLogIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoOpFilter) > 0 {
		i -= len(m.NoOpFilter)
		copy(dAtA[i:], m.NoOpFilter)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.NoOpFilter)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncRepair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indexs) > 0 {
		dAtA50 := make([]byte, len(m.Indexs)*10)
		var j49 int
		for _, num := range m.Indexs {
			for num >= 1<<7 {
				dAtA50[j49] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j49++
			}
			dAtA50[j49] = uint8(num)
			j49++
		}
		i -= j49
		copy(dAtA[i:], dAtA50[:j49])
		i = encodeVarintP2PMap(dAtA, i, uint64(j49))
		i--
		dAtA[i] = 0x22
	}
	if m.Checkpoint != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Checkpoint))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncRepairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRepairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRepairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintP2PMap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Checkpoint) > 0 {
		i -= len(m.Checkpoint)
		copy(dAtA[i:], m.Checkpoint)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Checkpoint)))
		i--
		dAtA[i] = 0x22
	}
	if m.CheckpointIndex != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.CheckpointIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SyncPoint != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.SyncPoint))
		i--
		dAtA[i] = 0x20
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2PMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageID != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.MessageID))
		i--
		dAtA[i] = 0x18
	}
	n56, err56 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err56 != nil {
		return 0, err56
	}
	i -= n56
	i = encodeVarintP2PMap(dAtA, i, uint64(n56))
	i--
	dAtA[i] = 0x12
	if m.Index != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Indexed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Indexed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Indexed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP2PMap(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintP2PMap(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintP2PMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovP2PMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *Message_Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_CommandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommandResponse != nil {
		l = m.CommandResponse.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryResponse != nil {
		l = m.QueryResponse.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_SlotLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlotLookup != nil {
		l = m.SlotLookup.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_GapCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GapCommit != nil {
		l = m.GapCommit.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_GapCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GapCommitResponse != nil {
		l = m.GapCommitResponse.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_ViewChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChangeRequest != nil {
		l = m.ViewChangeRequest.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_ViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChange != nil {
		l = m.ViewChange.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_ViewChangeRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChangeRepair != nil {
		l = m.ViewChangeRepair.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_ViewChangeRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChangeRepairResponse != nil {
		l = m.ViewChangeRepairResponse.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_StartView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartView != nil {
		l = m.StartView.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_ViewRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewRepair != nil {
		l = m.ViewRepair.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_ViewRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewRepairResponse != nil {
		l = m.ViewRepairResponse.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_SyncPrepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncPrepare != nil {
		l = m.SyncPrepare.Size()
		n += 2 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_SyncRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncRepair != nil {
		l = m.SyncRepair.Size()
		n += 2 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_SyncRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncRepairResponse != nil {
		l = m.SyncRepairResponse.Size()
		n += 2 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_SyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncResponse != nil {
		l = m.SyncResponse.Size()
		n += 2 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_SyncCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncCommit != nil {
		l = m.SyncCommit.Size()
		n += 2 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_Recover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Recover != nil {
		l = m.Recover.Size()
		n += 2 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_RecoverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecoverResponse != nil {
		l = m.RecoverResponse.Size()
		n += 2 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *Message_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 2 + l + sovP2PMap(uint64(l))
	}
	return n
}
func (m *ViewId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LeaderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.TermID != 0 {
		n += 1 + sovP2PMap(uint64(m.TermID))
	}
	return n
}

func (m *CommandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TermID != 0 {
		n += 1 + sovP2PMap(uint64(m.TermID))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovP2PMap(uint64(l))
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *CommandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovP2PMap(uint64(m.Index))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *CommandClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TermID != 0 {
		n += 1 + sovP2PMap(uint64(m.TermID))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovP2PMap(uint64(l))
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *QueryClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *Recover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	l = len(m.RecoveryID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *RecoverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	l = len(m.RecoveryID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	if m.CheckpointIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.CheckpointIndex))
	}
	l = len(m.Checkpoint)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovP2PMap(uint64(l))
		}
	}
	return n
}

func (m *SlotLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	return n
}

func (m *GapCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovP2PMap(uint64(m.Index))
	}
	return n
}

func (m *GapCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovP2PMap(uint64(m.Index))
	}
	return n
}

func (m *ViewChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *ViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.LastNormal != nil {
		l = m.LastNormal.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = len(m.NoOpFilter)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.FirstLogIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.FirstLogIndex))
	}
	if m.LastLogIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.LastLogIndex))
	}
	return n
}

func (m *ViewChangeRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	if m.Checkpoint != 0 {
		n += 1 + sovP2PMap(uint64(m.Checkpoint))
	}
	if len(m.Indexs) > 0 {
		l = 0
		for _, e := range m.Indexs {
			l += sovP2PMap(uint64(e))
		}
		n += 1 + sovP2PMap(uint64(l)) + l
	}
	return n
}

func (m *ViewChangeRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	if m.CheckpointIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.CheckpointIndex))
	}
	l = len(m.Checkpoint)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if len(m.Indexs) > 0 {
		l = 0
		for _, e := range m.Indexs {
			l += sovP2PMap(uint64(e))
		}
		n += 1 + sovP2PMap(uint64(l)) + l
	}
	return n
}

func (m *StartView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = len(m.NoOpFilter)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.FirstLogIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.FirstLogIndex))
	}
	if m.LastLogIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.LastLogIndex))
	}
	return n
}

func (m *ViewRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	if m.Checkpoint != 0 {
		n += 1 + sovP2PMap(uint64(m.Checkpoint))
	}
	if len(m.Indexs) > 0 {
		l = 0
		for _, e := range m.Indexs {
			l += sovP2PMap(uint64(e))
		}
		n += 1 + sovP2PMap(uint64(l)) + l
	}
	return n
}

func (m *ViewRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.CheckpointIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.CheckpointIndex))
	}
	l = len(m.Checkpoint)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovP2PMap(uint64(l))
		}
	}
	return n
}

func (m *SyncPrepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = len(m.NoOpFilter)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.FirstLogIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.FirstLogIndex))
	}
	if m.LastLogIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.LastLogIndex))
	}
	return n
}

func (m *SyncRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.Checkpoint != 0 {
		n += 1 + sovP2PMap(uint64(m.Checkpoint))
	}
	if len(m.Indexs) > 0 {
		l = 0
		for _, e := range m.Indexs {
			l += sovP2PMap(uint64(e))
		}
		n += 1 + sovP2PMap(uint64(l)) + l
	}
	return n
}

func (m *SyncRepairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.CheckpointIndex != 0 {
		n += 1 + sovP2PMap(uint64(m.CheckpointIndex))
	}
	l = len(m.Checkpoint)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovP2PMap(uint64(l))
		}
	}
	return n
}

func (m *SyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovP2PMap(uint64(m.Index))
	}
	return n
}

func (m *SyncCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	if m.SyncPoint != 0 {
		n += 1 + sovP2PMap(uint64(m.SyncPoint))
	}
	return n
}

func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovP2PMap(uint64(m.Index))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovP2PMap(uint64(l))
	if m.MessageID != 0 {
		n += 1 + sovP2PMap(uint64(m.MessageID))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func (m *Indexed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovP2PMap(uint64(m.Index))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovP2PMap(uint64(l))
	}
	return n
}

func sovP2PMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozP2PMap(x uint64) (n int) {
	return sovP2PMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &primitive.Name{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Command{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_CommandResponse{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Query{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_QueryResponse{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotLookup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlotLookup{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SlotLookup{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GapCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GapCommitRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_GapCommit{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GapCommitResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GapCommitResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_GapCommitResponse{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ViewChangeRequest{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ViewChange{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeRepair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeRepair{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ViewChangeRepair{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeRepairResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeRepairResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ViewChangeRepairResponse{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartView{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_StartView{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewRepair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewRepair{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ViewRepair{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewRepairResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewRepairResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ViewRepairResponse{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPrepare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncPrepare{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SyncPrepare{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncRepair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncRepair{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SyncRepair{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncRepairResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncRepairResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SyncRepairResponse{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SyncResponse{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncCommit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SyncCommit{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recover", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Recover{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Recover{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecoverResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_RecoverResponse{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Ping{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermID", wireType)
			}
			m.TermID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermID |= github_com_atomix_api_proto_atomix_controller.TermID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermID", wireType)
			}
			m.TermID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermID |= github_com_atomix_api_proto_atomix_controller.TermID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermID", wireType)
			}
			m.TermID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermID |= github_com_atomix_api_proto_atomix_controller.TermID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecoverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointIndex", wireType)
			}
			m.CheckpointIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkpoint = append(m.Checkpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.Checkpoint == nil {
				m.Checkpoint = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &Entry{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GapCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GapCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GapCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GapCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GapCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GapCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNormal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastNormal == nil {
				m.LastNormal = &ViewId{}
			}
			if err := m.LastNormal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOpFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoOpFilter = append(m.NoOpFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.NoOpFilter == nil {
				m.NoOpFilter = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLogIndex", wireType)
			}
			m.FirstLogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstLogIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogIndex", wireType)
			}
			m.LastLogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeRepair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeRepair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeRepair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			m.Checkpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checkpoint |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v Index
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP2PMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Index(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indexs = append(m.Indexs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP2PMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthP2PMap
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthP2PMap
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indexs) == 0 {
					m.Indexs = make([]Index, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Index
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowP2PMap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Index(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indexs = append(m.Indexs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeRepairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeRepairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeRepairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointIndex", wireType)
			}
			m.CheckpointIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkpoint = append(m.Checkpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.Checkpoint == nil {
				m.Checkpoint = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v Index
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP2PMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Index(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indexs = append(m.Indexs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP2PMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthP2PMap
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthP2PMap
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indexs) == 0 {
					m.Indexs = make([]Index, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Index
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowP2PMap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Index(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indexs = append(m.Indexs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOpFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoOpFilter = append(m.NoOpFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.NoOpFilter == nil {
				m.NoOpFilter = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLogIndex", wireType)
			}
			m.FirstLogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstLogIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogIndex", wireType)
			}
			m.LastLogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewRepair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewRepair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewRepair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			m.Checkpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checkpoint |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v Index
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP2PMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Index(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indexs = append(m.Indexs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP2PMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthP2PMap
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthP2PMap
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indexs) == 0 {
					m.Indexs = make([]Index, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Index
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowP2PMap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Index(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indexs = append(m.Indexs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewRepairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewRepairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewRepairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointIndex", wireType)
			}
			m.CheckpointIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkpoint = append(m.Checkpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.Checkpoint == nil {
				m.Checkpoint = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncPrepare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncPrepare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncPrepare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOpFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoOpFilter = append(m.NoOpFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.NoOpFilter == nil {
				m.NoOpFilter = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLogIndex", wireType)
			}
			m.FirstLogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstLogIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogIndex", wireType)
			}
			m.LastLogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRepair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRepair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRepair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			m.Checkpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checkpoint |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v Index
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP2PMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Index(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Indexs = append(m.Indexs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowP2PMap
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthP2PMap
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthP2PMap
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Indexs) == 0 {
					m.Indexs = make([]Index, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Index
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowP2PMap
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Index(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Indexs = append(m.Indexs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRepairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRepairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRepairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointIndex", wireType)
			}
			m.CheckpointIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointIndex |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkpoint = append(m.Checkpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.Checkpoint == nil {
				m.Checkpoint = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPoint", wireType)
			}
			m.SyncPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncPoint |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = github_com_atomix_api_proto_atomix_controller.MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			m.MessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageID |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Indexed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Indexed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Indexed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2PMap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2PMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2PMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2PMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP2PMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP2PMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2PMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthP2PMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupP2PMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthP2PMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthP2PMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP2PMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupP2PMap = fmt.Errorf("proto: unexpected end of group")
)
