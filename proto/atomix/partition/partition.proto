/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.partition;

import "gogoproto/gogo.proto";

// Member identifier
message MemberId {
    string name = 1;
    string namespace = 2;
}

// Member is a partition member
message Member {
    MemberId id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
    string host = 2;
    int32 port = 3;
}

// Partition identifier
message PartitionGroupId {
    string name = 1;
    string namespace = 2;
}

// Partition group state
message PartitionGroup {
    PartitionGroupId id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
    repeated Partition partitions = 2 [(gogoproto.nullable) = false];
}

// Partition identifier
message PartitionId {
    string name = 1;
    string namespace = 2;
    uint32 index = 3;
}

// Partition
message Partition {
    PartitionId id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
    uint64 term = 2 [(gogoproto.casttype) = "Term"];
    MemberId leader = 3;
    repeated Member members = 4 [(gogoproto.nullable) = false];
}

message JoinPartitionGroupRequest {
    MemberId replica_id = 1 [(gogoproto.customname) = "MemberID"];
    PartitionGroupId group_id = 2 [(gogoproto.customname) = "GroupID", (gogoproto.nullable) = false];
    uint32 partitions = 3;
    uint32 replication_factor = 4;
}

message JoinPartitionGroupResponse {
    PartitionGroup group = 1 [(gogoproto.nullable) = false];
}

// Atomix partition service
service PartitionService {
    // Joins a member to a partition group
    rpc JoinPartitionGroup (JoinPartitionGroupRequest) returns (stream JoinPartitionGroupResponse);
}
