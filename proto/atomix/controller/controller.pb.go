// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/controller/controller.proto

package controller

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Gets a list of databases in a namespace
type GetDatabasesRequest struct {
	ID                   *DatabaseId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetDatabasesRequest) Reset()         { *m = GetDatabasesRequest{} }
func (m *GetDatabasesRequest) String() string { return proto.CompactTextString(m) }
func (*GetDatabasesRequest) ProtoMessage()    {}
func (*GetDatabasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{0}
}
func (m *GetDatabasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDatabasesRequest.Unmarshal(m, b)
}
func (m *GetDatabasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDatabasesRequest.Marshal(b, m, deterministic)
}
func (m *GetDatabasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDatabasesRequest.Merge(m, src)
}
func (m *GetDatabasesRequest) XXX_Size() int {
	return xxx_messageInfo_GetDatabasesRequest.Size(m)
}
func (m *GetDatabasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDatabasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDatabasesRequest proto.InternalMessageInfo

func (m *GetDatabasesRequest) GetID() *DatabaseId {
	if m != nil {
		return m.ID
	}
	return nil
}

// Returns a list of databases in a namespace
type GetDatabasesResponse struct {
	Databases            []*Database `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetDatabasesResponse) Reset()         { *m = GetDatabasesResponse{} }
func (m *GetDatabasesResponse) String() string { return proto.CompactTextString(m) }
func (*GetDatabasesResponse) ProtoMessage()    {}
func (*GetDatabasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{1}
}
func (m *GetDatabasesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDatabasesResponse.Unmarshal(m, b)
}
func (m *GetDatabasesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDatabasesResponse.Marshal(b, m, deterministic)
}
func (m *GetDatabasesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDatabasesResponse.Merge(m, src)
}
func (m *GetDatabasesResponse) XXX_Size() int {
	return xxx_messageInfo_GetDatabasesResponse.Size(m)
}
func (m *GetDatabasesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDatabasesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDatabasesResponse proto.InternalMessageInfo

func (m *GetDatabasesResponse) GetDatabases() []*Database {
	if m != nil {
		return m.Databases
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDatabasesRequest)(nil), "atomix.controller.GetDatabasesRequest")
	proto.RegisterType((*GetDatabasesResponse)(nil), "atomix.controller.GetDatabasesResponse")
}

func init() { proto.RegisterFile("atomix/controller/controller.proto", fileDescriptor_6541e67aaed2c172) }

var fileDescriptor_6541e67aaed2c172 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0x2c, 0xc9, 0xcf,
	0xcd, 0xac, 0xd0, 0x4f, 0xce, 0xcf, 0x2b, 0x29, 0xca, 0xcf, 0xc9, 0x49, 0x2d, 0x42, 0x62, 0xea,
	0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x09, 0x42, 0xd4, 0xe8, 0x21, 0x24, 0xa4, 0x14, 0x30, 0xb5,
	0xa5, 0x24, 0x96, 0x24, 0x26, 0x25, 0x16, 0xa7, 0x42, 0x34, 0x49, 0x89, 0xa4, 0xe7, 0xa7, 0xe7,
	0x83, 0x99, 0xfa, 0x20, 0x16, 0x44, 0x54, 0xc9, 0x87, 0x4b, 0xd8, 0x3d, 0xb5, 0xc4, 0x05, 0xaa,
	0xb4, 0x38, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0xc8, 0x94, 0x8b, 0x29, 0x33, 0x45, 0x82,
	0x51, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x56, 0x0f, 0xc3, 0x3a, 0x3d, 0x98, 0x06, 0xcf, 0x14, 0x27,
	0xb6, 0x47, 0xf7, 0xe4, 0x99, 0x3c, 0x5d, 0x82, 0x98, 0x32, 0x53, 0x94, 0x02, 0xb9, 0x44, 0x50,
	0x4d, 0x2b, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xb2, 0xe4, 0xe2, 0x84, 0xb9, 0xa6, 0x58, 0x82,
	0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x1a, 0x8f, 0xa9, 0x41, 0x08, 0xd5, 0x46, 0x25, 0x5c, 0x82,
	0xce, 0x70, 0x15, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xf1, 0x5c, 0x3c, 0xc8, 0xf6,
	0x08, 0xa9, 0x61, 0x31, 0x0c, 0x8b, 0xb7, 0xa4, 0xd4, 0x09, 0xaa, 0x83, 0x38, 0x38, 0x89, 0x0d,
	0x1c, 0x3a, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x64, 0x6c, 0x1b, 0x8e, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	// GetDatabases gets a list of databases controlled by the controller
	GetDatabases(ctx context.Context, in *GetDatabasesRequest, opts ...grpc.CallOption) (*GetDatabasesResponse, error)
}

type controllerServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerServiceClient(cc *grpc.ClientConn) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) GetDatabases(ctx context.Context, in *GetDatabasesRequest, opts ...grpc.CallOption) (*GetDatabasesResponse, error) {
	out := new(GetDatabasesResponse)
	err := c.cc.Invoke(ctx, "/atomix.controller.ControllerService/GetDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	// GetDatabases gets a list of databases controlled by the controller
	GetDatabases(context.Context, *GetDatabasesRequest) (*GetDatabasesResponse, error)
}

// UnimplementedControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (*UnimplementedControllerServiceServer) GetDatabases(ctx context.Context, req *GetDatabasesRequest) (*GetDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabases not implemented")
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_GetDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.controller.ControllerService/GetDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetDatabases(ctx, req.(*GetDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.controller.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDatabases",
			Handler:    _ControllerService_GetDatabases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomix/controller/controller.proto",
}
