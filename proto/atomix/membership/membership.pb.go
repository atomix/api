// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/membership/membership.proto

package membership

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Membership group identifier
type MembershipGroupId struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *MembershipGroupId) Reset()         { *m = MembershipGroupId{} }
func (m *MembershipGroupId) String() string { return proto.CompactTextString(m) }
func (*MembershipGroupId) ProtoMessage()    {}
func (*MembershipGroupId) Descriptor() ([]byte, []int) {
	return fileDescriptor_907f8caf41e45230, []int{0}
}
func (m *MembershipGroupId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MembershipGroupId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MembershipGroupId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MembershipGroupId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MembershipGroupId.Merge(m, src)
}
func (m *MembershipGroupId) XXX_Size() int {
	return m.Size()
}
func (m *MembershipGroupId) XXX_DiscardUnknown() {
	xxx_messageInfo_MembershipGroupId.DiscardUnknown(m)
}

var xxx_messageInfo_MembershipGroupId proto.InternalMessageInfo

func (m *MembershipGroupId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MembershipGroupId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Membership group
type MembershipGroup struct {
	ID      MembershipGroupId `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Members []Member          `protobuf:"bytes,2,rep,name=members,proto3" json:"members"`
}

func (m *MembershipGroup) Reset()         { *m = MembershipGroup{} }
func (m *MembershipGroup) String() string { return proto.CompactTextString(m) }
func (*MembershipGroup) ProtoMessage()    {}
func (*MembershipGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_907f8caf41e45230, []int{1}
}
func (m *MembershipGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MembershipGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MembershipGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MembershipGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MembershipGroup.Merge(m, src)
}
func (m *MembershipGroup) XXX_Size() int {
	return m.Size()
}
func (m *MembershipGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MembershipGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MembershipGroup proto.InternalMessageInfo

func (m *MembershipGroup) GetID() MembershipGroupId {
	if m != nil {
		return m.ID
	}
	return MembershipGroupId{}
}

func (m *MembershipGroup) GetMembers() []Member {
	if m != nil {
		return m.Members
	}
	return nil
}

// Member identifier
type MemberId struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *MemberId) Reset()         { *m = MemberId{} }
func (m *MemberId) String() string { return proto.CompactTextString(m) }
func (*MemberId) ProtoMessage()    {}
func (*MemberId) Descriptor() ([]byte, []int) {
	return fileDescriptor_907f8caf41e45230, []int{2}
}
func (m *MemberId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberId.Merge(m, src)
}
func (m *MemberId) XXX_Size() int {
	return m.Size()
}
func (m *MemberId) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberId.DiscardUnknown(m)
}

var xxx_messageInfo_MemberId proto.InternalMessageInfo

func (m *MemberId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MemberId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// Group member
type Member struct {
	ID   MemberId `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Host string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_907f8caf41e45230, []int{3}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetID() MemberId {
	if m != nil {
		return m.ID
	}
	return MemberId{}
}

func (m *Member) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Member) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type JoinMembershipGroupRequest struct {
	MemberID *MemberId         `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	GroupID  MembershipGroupId `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id"`
}

func (m *JoinMembershipGroupRequest) Reset()         { *m = JoinMembershipGroupRequest{} }
func (m *JoinMembershipGroupRequest) String() string { return proto.CompactTextString(m) }
func (*JoinMembershipGroupRequest) ProtoMessage()    {}
func (*JoinMembershipGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_907f8caf41e45230, []int{4}
}
func (m *JoinMembershipGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinMembershipGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinMembershipGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinMembershipGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinMembershipGroupRequest.Merge(m, src)
}
func (m *JoinMembershipGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinMembershipGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinMembershipGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinMembershipGroupRequest proto.InternalMessageInfo

func (m *JoinMembershipGroupRequest) GetMemberID() *MemberId {
	if m != nil {
		return m.MemberID
	}
	return nil
}

func (m *JoinMembershipGroupRequest) GetGroupID() MembershipGroupId {
	if m != nil {
		return m.GroupID
	}
	return MembershipGroupId{}
}

type JoinMembershipGroupResponse struct {
	Group MembershipGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
}

func (m *JoinMembershipGroupResponse) Reset()         { *m = JoinMembershipGroupResponse{} }
func (m *JoinMembershipGroupResponse) String() string { return proto.CompactTextString(m) }
func (*JoinMembershipGroupResponse) ProtoMessage()    {}
func (*JoinMembershipGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_907f8caf41e45230, []int{5}
}
func (m *JoinMembershipGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinMembershipGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinMembershipGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinMembershipGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinMembershipGroupResponse.Merge(m, src)
}
func (m *JoinMembershipGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *JoinMembershipGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinMembershipGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinMembershipGroupResponse proto.InternalMessageInfo

func (m *JoinMembershipGroupResponse) GetGroup() MembershipGroup {
	if m != nil {
		return m.Group
	}
	return MembershipGroup{}
}

func init() {
	proto.RegisterType((*MembershipGroupId)(nil), "atomix.membership.MembershipGroupId")
	proto.RegisterType((*MembershipGroup)(nil), "atomix.membership.MembershipGroup")
	proto.RegisterType((*MemberId)(nil), "atomix.membership.MemberId")
	proto.RegisterType((*Member)(nil), "atomix.membership.Member")
	proto.RegisterType((*JoinMembershipGroupRequest)(nil), "atomix.membership.JoinMembershipGroupRequest")
	proto.RegisterType((*JoinMembershipGroupResponse)(nil), "atomix.membership.JoinMembershipGroupResponse")
}

func init() { proto.RegisterFile("atomix/membership/membership.proto", fileDescriptor_907f8caf41e45230) }

var fileDescriptor_907f8caf41e45230 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x4a, 0xeb, 0x40,
	0x14, 0xce, 0xa4, 0xff, 0xa7, 0x17, 0x4a, 0xe7, 0xde, 0x45, 0x6e, 0x2b, 0x69, 0x09, 0x2e, 0xba,
	0x31, 0x95, 0xba, 0x10, 0x41, 0x44, 0x4a, 0x55, 0x2a, 0x08, 0x32, 0xae, 0x45, 0xfa, 0x33, 0xa4,
	0xb3, 0x48, 0x27, 0x26, 0x69, 0xf1, 0x1d, 0x04, 0xf1, 0x69, 0x7c, 0x86, 0x2e, 0xbb, 0x74, 0x55,
	0x24, 0x7d, 0x11, 0xc9, 0x4c, 0x6a, 0x4b, 0x9b, 0x62, 0x75, 0xd5, 0xc3, 0x39, 0xdf, 0xf9, 0x7e,
	0xce, 0x34, 0x60, 0x74, 0x7c, 0x6e, 0xb3, 0xa7, 0xba, 0x4d, 0xed, 0x2e, 0x75, 0xbd, 0x01, 0x73,
	0x56, 0x4a, 0xd3, 0x71, 0xb9, 0xcf, 0x71, 0x51, 0x62, 0xcc, 0xe5, 0xa0, 0xf4, 0xcf, 0xe2, 0x16,
	0x17, 0xd3, 0x7a, 0x58, 0x49, 0xa0, 0x71, 0x01, 0xc5, 0x9b, 0x2f, 0xcc, 0x95, 0xcb, 0x47, 0x4e,
	0xbb, 0x8f, 0x31, 0x24, 0x87, 0x1d, 0x9b, 0x6a, 0xa8, 0x8a, 0x6a, 0x39, 0x22, 0x6a, 0xbc, 0x07,
	0xb9, 0xf0, 0xd7, 0x73, 0x3a, 0x3d, 0xaa, 0xa9, 0x62, 0xb0, 0x6c, 0x18, 0x2f, 0x08, 0x0a, 0x6b,
	0x3c, 0xf8, 0x1c, 0x54, 0xd6, 0x17, 0x1c, 0xf9, 0xc6, 0xbe, 0xb9, 0x61, 0xc8, 0xdc, 0xd0, 0x6d,
	0xc2, 0x64, 0x56, 0x51, 0x82, 0x59, 0x45, 0x6d, 0xb7, 0x88, 0xca, 0xfa, 0xf8, 0x04, 0x32, 0x11,
	0x5e, 0x53, 0xab, 0x89, 0x5a, 0xbe, 0xf1, 0x7f, 0x2b, 0x4d, 0x33, 0x19, 0xee, 0x92, 0x05, 0xde,
	0x38, 0x85, 0xac, 0x1c, 0xfc, 0x2a, 0x0e, 0x83, 0xb4, 0xdc, 0xc6, 0xc7, 0x2b, 0x21, 0xca, 0x5b,
	0xd5, 0x63, 0xbc, 0x63, 0x48, 0x0e, 0xb8, 0xe7, 0x47, 0xdc, 0xa2, 0x0e, 0x7b, 0x0e, 0x77, 0x7d,
	0x2d, 0x51, 0x45, 0xb5, 0x14, 0x11, 0xb5, 0xf1, 0x86, 0xa0, 0x74, 0xcd, 0xd9, 0x70, 0xed, 0x1a,
	0x84, 0x3e, 0x8e, 0xa8, 0xe7, 0xe3, 0x4b, 0xc8, 0x49, 0xb5, 0x87, 0xdd, 0x6c, 0xfc, 0x09, 0x66,
	0x95, 0x45, 0xf2, 0x16, 0xc9, 0xda, 0x8b, 0x1b, 0xdc, 0x42, 0xd6, 0x0a, 0x79, 0x43, 0x1a, 0xf5,
	0x07, 0x4f, 0x52, 0x88, 0x62, 0x65, 0x64, 0xa3, 0x45, 0x32, 0x96, 0x9c, 0x18, 0xf7, 0x50, 0x8e,
	0xf5, 0xed, 0x39, 0x7c, 0xe8, 0x51, 0x7c, 0x06, 0x29, 0x81, 0x8c, 0x4c, 0x1b, 0xdf, 0xab, 0x45,
	0x4f, 0x28, 0xd7, 0x1a, 0xcf, 0x68, 0xf5, 0x9f, 0x79, 0x47, 0xdd, 0x31, 0xeb, 0x51, 0x3c, 0x86,
	0xbf, 0x31, 0xa2, 0xf8, 0x20, 0x86, 0x7d, 0xfb, 0x51, 0x4b, 0xe6, 0xae, 0x70, 0x99, 0xe5, 0x10,
	0x35, 0xb5, 0x49, 0xa0, 0xa3, 0x69, 0xa0, 0xa3, 0x8f, 0x40, 0x47, 0xaf, 0x73, 0x5d, 0x99, 0xce,
	0x75, 0xe5, 0x7d, 0xae, 0x2b, 0xdd, 0xb4, 0xf8, 0x8e, 0x8e, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xd5, 0xae, 0x44, 0x53, 0x96, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MembershipServiceClient is the client API for MembershipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MembershipServiceClient interface {
	// Joins a member to a membership group
	JoinMembershipGroup(ctx context.Context, in *JoinMembershipGroupRequest, opts ...grpc.CallOption) (MembershipService_JoinMembershipGroupClient, error)
}

type membershipServiceClient struct {
	cc *grpc.ClientConn
}

func NewMembershipServiceClient(cc *grpc.ClientConn) MembershipServiceClient {
	return &membershipServiceClient{cc}
}

func (c *membershipServiceClient) JoinMembershipGroup(ctx context.Context, in *JoinMembershipGroupRequest, opts ...grpc.CallOption) (MembershipService_JoinMembershipGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MembershipService_serviceDesc.Streams[0], "/atomix.membership.MembershipService/JoinMembershipGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &membershipServiceJoinMembershipGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MembershipService_JoinMembershipGroupClient interface {
	Recv() (*JoinMembershipGroupResponse, error)
	grpc.ClientStream
}

type membershipServiceJoinMembershipGroupClient struct {
	grpc.ClientStream
}

func (x *membershipServiceJoinMembershipGroupClient) Recv() (*JoinMembershipGroupResponse, error) {
	m := new(JoinMembershipGroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MembershipServiceServer is the server API for MembershipService service.
type MembershipServiceServer interface {
	// Joins a member to a membership group
	JoinMembershipGroup(*JoinMembershipGroupRequest, MembershipService_JoinMembershipGroupServer) error
}

// UnimplementedMembershipServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMembershipServiceServer struct {
}

func (*UnimplementedMembershipServiceServer) JoinMembershipGroup(req *JoinMembershipGroupRequest, srv MembershipService_JoinMembershipGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinMembershipGroup not implemented")
}

func RegisterMembershipServiceServer(s *grpc.Server, srv MembershipServiceServer) {
	s.RegisterService(&_MembershipService_serviceDesc, srv)
}

func _MembershipService_JoinMembershipGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinMembershipGroupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MembershipServiceServer).JoinMembershipGroup(m, &membershipServiceJoinMembershipGroupServer{stream})
}

type MembershipService_JoinMembershipGroupServer interface {
	Send(*JoinMembershipGroupResponse) error
	grpc.ServerStream
}

type membershipServiceJoinMembershipGroupServer struct {
	grpc.ServerStream
}

func (x *membershipServiceJoinMembershipGroupServer) Send(m *JoinMembershipGroupResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MembershipService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.membership.MembershipService",
	HandlerType: (*MembershipServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinMembershipGroup",
			Handler:       _MembershipService_JoinMembershipGroup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "atomix/membership/membership.proto",
}

func (m *MembershipGroupId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MembershipGroupId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MembershipGroupId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMembership(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMembership(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MembershipGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MembershipGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MembershipGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMembership(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMembership(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MemberId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMembership(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMembership(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		i = encodeVarintMembership(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintMembership(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMembership(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *JoinMembershipGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinMembershipGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinMembershipGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GroupID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMembership(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MemberID != nil {
		{
			size, err := m.MemberID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMembership(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinMembershipGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinMembershipGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinMembershipGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMembership(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMembership(dAtA []byte, offset int, v uint64) int {
	offset -= sovMembership(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MembershipGroupId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMembership(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMembership(uint64(l))
	}
	return n
}

func (m *MembershipGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovMembership(uint64(l))
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovMembership(uint64(l))
		}
	}
	return n
}

func (m *MemberId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMembership(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMembership(uint64(l))
	}
	return n
}

func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovMembership(uint64(l))
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovMembership(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovMembership(uint64(m.Port))
	}
	return n
}

func (m *JoinMembershipGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberID != nil {
		l = m.MemberID.Size()
		n += 1 + l + sovMembership(uint64(l))
	}
	l = m.GroupID.Size()
	n += 1 + l + sovMembership(uint64(l))
	return n
}

func (m *JoinMembershipGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Group.Size()
	n += 1 + l + sovMembership(uint64(l))
	return n
}

func sovMembership(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMembership(x uint64) (n int) {
	return sovMembership(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MembershipGroupId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MembershipGroupId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MembershipGroupId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MembershipGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MembershipGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MembershipGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinMembershipGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinMembershipGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinMembershipGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberID == nil {
				m.MemberID = &MemberId{}
			}
			if err := m.MemberID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinMembershipGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinMembershipGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinMembershipGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMembership
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMembership(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMembership
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMembership
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMembership
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMembership        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMembership          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMembership = fmt.Errorf("proto: unexpected end of group")
)
