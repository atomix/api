/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.management.driver;

import "atomix/protocol/protocol.proto";
import "gogoproto/gogo.proto";

message PrimitiveConfig {
    PrimitiveId id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
    ProxyConfig proxy = 2 [(gogoproto.nullable) = false];
}

message PrimitiveId {
    string namespace = 1;
    string name = 2;
    string type = 3;
}

message ProxyConfig {
    bool read = 1;
    bool write = 2;
    bool cache = 3;
}

message AddPrimitiveRequest {
    PrimitiveConfig primitive = 1 [(gogoproto.nullable) = false];
}

message AddPrimitiveResponse {

}

message RemovePrimitiveRequest {
    PrimitiveId primitive_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "PrimitiveID"];
}

message RemovePrimitiveResponse {

}

service PrimitiveManagementService {
    rpc AddPrimitive (AddPrimitiveRequest) returns (AddPrimitiveResponse);
    rpc RemovePrimitive (RemovePrimitiveRequest) returns (RemovePrimitiveResponse);
}

message DriverConfig {
    atomix.protocol.ProtocolConfig protocol = 1;
}

message ConfigureDriverRequest {
    DriverConfig driver = 1 [(gogoproto.nullable) = false];
}

message ConfigureDriverResponse {

}

service DriverManagementService {
    rpc ConfigureDriver (ConfigureDriverRequest) returns (ConfigureDriverResponse);
}
