/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "atomix/primitive/meta/object.proto";
import "atomix/primitive/primitive.proto";
import "atomix/primitive/service.proto";
import "atomix/primitive/operation.proto";
import "atomix/primitive/state.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.election;

message EnterRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    EnterInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message EnterInput {

}

message EnterResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    EnterOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message EnterOutput {
    Term term = 2 [(gogoproto.nullable) = false];
}

message WithdrawRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    WithdrawInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message WithdrawInput {

}

message WithdrawResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    WithdrawOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message WithdrawOutput {
    Term term = 2 [(gogoproto.nullable) = false];
}

message AnointRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    AnointInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message AnointInput {
    string candidate_id = 2 [(gogoproto.customname) = "CandidateID"];
}

message AnointResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    AnointOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message AnointOutput {
    Term term = 2 [(gogoproto.nullable) = false];
}

message PromoteRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    PromoteInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message PromoteInput {
    string candidate_id = 2 [(gogoproto.customname) = "CandidateID"];
}

message PromoteResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    PromoteOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message PromoteOutput {
    Term term = 2 [(gogoproto.nullable) = false];
}

message EvictRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    EvictInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message EvictInput {
    string candidate_id = 2 [(gogoproto.customname) = "CandidateID"];
}

message EvictResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    EvictOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message EvictOutput {
    Term term = 2 [(gogoproto.nullable) = false];
}

message GetTermRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    GetTermInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message GetTermInput {
}

message GetTermResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    GetTermOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message GetTermOutput {
    Term term = 2 [(gogoproto.nullable) = false];
}

message EventsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    EventsInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message EventsInput {
}

message EventsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    EventsOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message EventsOutput {
    Event event = 1 [(gogoproto.nullable) = false];
}

message Event {
    Type type = 1;
    Term term = 2 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        CHANGED = 1;
    }
}

message Term {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string leader = 2;
    repeated string candidates = 3;
}

message Snapshot {
    Term term = 1 [(atomix.primitive.state.entry) = true, (gogoproto.nullable) = false];
}

message SnapshotRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
}

message SnapshotResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    Snapshot snapshot = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message RestoreRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    Snapshot snapshot = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message RestoreResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
}

// LeaderElectionService implements a distributed leader election
service LeaderElectionService {
    option (atomix.primitive.type) = "Election";

    // Enter enters the leader election
    rpc Enter (EnterRequest) returns (EnterResponse) {
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Withdraw withdraws a candidate from the leader election
    rpc Withdraw (WithdrawRequest) returns (WithdrawResponse) {
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Anoint anoints a candidate leader
    rpc Anoint (AnointRequest) returns (AnointResponse) {
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Promote promotes a candidate
    rpc Promote (PromoteRequest) returns (PromoteResponse) {
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Evict evicts a candidate from the election
    rpc Evict (EvictRequest) returns (EvictResponse) {
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // GetTerm gets the current leadership term
    rpc GetTerm (GetTermRequest) returns (GetTermResponse) {
        option (atomix.primitive.operation.type) = QUERY;
    }

    // Events listens for leadership events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // Snapshot exports a snapshot of the primitive state
    rpc Snapshot (SnapshotRequest) returns (SnapshotResponse) {
        option (atomix.primitive.operation.type) = SNAPSHOT;
    }

    // Restore imports a snapshot of the primitive state
    rpc Restore (RestoreRequest) returns (RestoreResponse) {
        option (atomix.primitive.operation.type) = RESTORE;
    }
}