/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive.list;

import "atomix/primitive/primitive.proto";
import "atomix/primitive/descriptor.proto";
import "gogoproto/gogo.proto";

message SizeRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message SizeResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SizeOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message SizeOutput {
    uint32 size = 2;
}

message ContainsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ContainsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message ContainsInput {
    string value = 2;
}

message ContainsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ContainsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message ContainsOutput {
    bool contains = 2;
}

message AppendRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    AppendInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message AppendInput {
    string value = 2;
}

message AppendResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    AppendOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message AppendOutput {
}

message GetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message GetInput {
    uint32 index = 2;
}

message GetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message GetOutput {
    string value = 3;
}

message SetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message SetInput {
    uint32 index = 2;
    string value = 3;
}

message SetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message SetOutput {
}

message InsertRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    InsertInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message InsertInput {
    uint32 index = 2;
    string value = 3;
}

message InsertResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    InsertOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message InsertOutput {
}

message RemoveRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    RemoveInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message RemoveInput {
    uint32 index = 2;
}

message RemoveResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    RemoveOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message RemoveOutput {
    string value = 3;
}

message ClearRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message ClearResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message EventsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message EventsInput {
    bool replay = 2;
}

message EventsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message EventsOutput {
    Type type = 2;
    uint32 index = 3;
    string value = 4;

    enum Type {
        NONE = 0;
        ADD = 1;
        REMOVE = 2;
        REPLAY = 3;
    }
}

message ElementsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ElementsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message ElementsInput {
}

message ElementsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ElementsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message ElementsOutput {
    string value = 2;
}

message SnapshotEntry {
    string value = 1;
}

message SnapshotRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message SnapshotResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SnapshotEntry entry = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message RestoreRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SnapshotEntry entry = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message RestoreResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

// ListService implements a distributed list
service ListService {
    option (atomix.primitive.type) = "List";

    // Size gets the number of elements in the list
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Contains returns whether the list contains a value
    rpc Contains (ContainsRequest) returns (ContainsResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Append appends a value to the list
    rpc Append (AppendRequest) returns (AppendResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Insert inserts a value at a specific index in the list
    rpc Insert (InsertRequest) returns (InsertResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Get gets the value at an index in the list
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Set sets the value at an index in the list
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Remove removes an element from the list
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Clear removes all elements from the list
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Elements streams all elements in the list
    rpc Elements (ElementsRequest) returns (stream ElementsResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Snapshot exports a snapshot of the primitive state
    rpc Snapshot (SnapshotRequest) returns (stream SnapshotResponse) {
        option (atomix.primitive.optype) = SNAPSHOT;
    }

    // Restore imports a snapshot of the primitive state
    rpc Restore (stream RestoreRequest) returns (RestoreResponse) {
        option (atomix.primitive.optype) = RESTORE;
    }
}
