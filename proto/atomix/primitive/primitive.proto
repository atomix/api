/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive;

import "atomix/primitive/meta/timestamp.proto";
import "atomix/proxy/proxy.proto";
import "gogoproto/gogo.proto";

message RequestHeaders {
    string primitive_id = 1 [(gogoproto.customname) = "PrimitiveID"];
    atomix.primitive.meta.Timestamp timestamp = 2;
}

message ResponseHeaders {
    atomix.primitive.meta.Timestamp timestamp = 1;
}

message CreateRequest {
    string type = 1;
    string name = 2;
}

message CreateResponse {

}

message CloseRequest {
    string type = 1;
    string name = 2;
}

message CloseResponse {

}

message DeleteRequest {
    string type = 1;
    string name = 2;
}

message DeleteResponse {

}

// PrimitiveService is a service for managing primitive
service PrimitiveService {
    // Create creates a primitive
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a primitive
    rpc Close (CloseRequest) returns (CloseResponse);

    // Delete deletes a primitive
    rpc Delete (DeleteRequest) returns (DeleteResponse);
}

// PrimitiveMeta is a primitive metadata
message PrimitiveMeta {
    string name = 1;
    string type = 2;
    string driver = 3;
    map<string, string> options = 4;
}

message GetPrimitiveRequest {
    string name = 1;
}

message GetPrimitiveResponse {
    PrimitiveMeta primitive = 1 [(gogoproto.nullable) = false];
}

message ListPrimitivesRequest {
    string name = 1;
}

message ListPrimitivesResponse {
    repeated PrimitiveMeta primitives = 1 [(gogoproto.nullable) = false];
}

message LookupPrimitiveRequest {
    string name = 1;
}

message LookupPrimitiveResponse {
    atomix.proxy.ProxyMeta proxy = 1 [(gogoproto.nullable) = false];
}

// Atomix primitive registry service
service PrimitiveRegistryService {
    rpc GetPrimitive (GetPrimitiveRequest) returns (GetPrimitiveResponse);
    rpc ListPrimitives (ListPrimitivesRequest) returns (ListPrimitivesResponse);
    rpc LookupPrimitive (LookupPrimitiveRequest) returns (LookupPrimitiveResponse);
}

message AddPrimitiveRequest {
    PrimitiveMeta primitive = 1 [(gogoproto.nullable) = false];
}

message AddPrimitiveResponse {

}

message RemovePrimitiveRequest {
    string name = 1;
}

message RemovePrimitiveResponse {

}

// Atomix primitive management service
service PrimitiveManagementService {
    rpc AddPrimitive (AddPrimitiveRequest) returns (AddPrimitiveResponse);
    rpc RemovePrimitive (RemovePrimitiveRequest) returns (RemovePrimitiveResponse);
}
