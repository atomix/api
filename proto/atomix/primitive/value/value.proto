/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive.value;

import "atomix/primitive/primitive.proto";
import "atomix/primitive/descriptor.proto";
import "gogoproto/gogo.proto";

message GetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message GetInput {
}

message GetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message GetOutput {
    bytes value = 1;
    uint64 version = 2;
}

message SetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message SetInput {
    uint64 expect_version = 1;
    bytes expect_value = 2;
    bytes value = 3;
}

message SetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message SetOutput {
    uint64 version = 1;
    bool succeeded = 2;
}

message EventRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message EventInput {
}

message EventResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message EventOutput {
    Type type = 1;
    bytes previous_value = 2;
    uint64 previous_version = 3;
    bytes new_value = 4;
    uint64 new_version = 5;

    enum Type {
        UPDATED = 0;
    }
}

// ValueService implements a distributed atomic value
service ValueService {
    option (atomix.primitive.name) = "Value";

    // Set sets the value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Get gets the value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Events listens for value change events
    rpc Events (EventRequest) returns (stream EventResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }
}
