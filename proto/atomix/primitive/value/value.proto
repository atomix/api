/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive.value;

import "atomix/primitive/primitive.proto";
import "atomix/primitive/descriptor.proto";
import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

message GetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message GetInput {
}

message GetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message GetOutput {
    Value value = 1 [(gogoproto.nullable) = false];
}

message Precondition {
    oneof precondition {
        atomix.primitive.meta.ObjectMeta metadata = 1;
    }
}

message SetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message SetInput {
    Value value = 1 [(gogoproto.nullable) = false];
    repeated Precondition preconditions = 2 [(gogoproto.nullable) = false];
}

message SetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message SetOutput {
    Value value = 1 [(gogoproto.nullable) = false];
}

message EventsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message EventsInput {
}

message EventsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message EventsOutput {
    Event event = 1 [(gogoproto.nullable) = false];
}

message Event {
    Type type = 1;
    Value value = 2 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        UPDATE = 1;
    }
}

message Value {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    bytes value = 2;
}

message Snapshot {
    Value value = 1;
}

message SnapshotRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message SnapshotResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    Snapshot snapshot = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message RestoreRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    Snapshot snapshot = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message RestoreResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

// ValueService implements a distributed atomic value
service ValueService {
    option (atomix.primitive.type) = "Value";

    // Set sets the value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Get gets the value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Events listens for value change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Snapshot exports a snapshot of the primitive state
    rpc Snapshot (SnapshotRequest) returns (SnapshotResponse) {
        option (atomix.primitive.optype) = SNAPSHOT;
    }

    // Restore imports a snapshot of the primitive state
    rpc Restore (RestoreRequest) returns (RestoreResponse) {
        option (atomix.primitive.optype) = RESTORE;
    }
}
