/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive.indexedmap;

import "google/protobuf/duration.proto";
import "atomix/primitive/primitive.proto";
import "atomix/primitive/descriptor.proto";
import "atomix/primitive/meta/timestamp.proto";
import "gogoproto/gogo.proto";

message ExistsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ExistsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message ExistsInput {
    string key = 1;
}

message ExistsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ExistsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message ExistsOutput {
    bool contains_key = 1;
}

message SizeRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SizeInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message SizeInput {
}

message SizeResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SizeOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message SizeOutput {
    uint32 size = 1 [(atomix.primitive.aggregate) = SUM];
}

message PutRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    PutInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message PutInput {
    Entry entry = 1 [(gogoproto.nullable) = false];
    bool if_empty = 2;
}

message PutResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    PutOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message PutOutput {
    Entry entry = 1;
}

message GetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message GetInput {
    uint64 index = 1;
    string key = 2;
}

message GetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message GetOutput {
    Entry entry = 1;
}

message FirstEntryRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    FirstEntryInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message FirstEntryInput {
}

message FirstEntryResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    FirstEntryOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message FirstEntryOutput {
    Entry entry = 1;
}

message LastEntryRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    LastEntryInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message LastEntryInput {
}

message LastEntryResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    LastEntryOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message LastEntryOutput {
    Entry entry = 1;
}

message PrevEntryRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    PrevEntryInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message PrevEntryInput {
    uint64 index = 1;
}

message PrevEntryResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    PrevEntryOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message PrevEntryOutput {
    Entry entry = 1;
}

message NextEntryRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    NextEntryInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message NextEntryInput {
    uint64 index = 1;
}

message NextEntryResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    NextEntryOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message NextEntryOutput {
    Entry entry = 1;
}

message RemoveRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    RemoveInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message RemoveInput {
    uint64 index = 1;
    string key = 2;
    atomix.primitive.meta.Timestamp timestamp = 3;
}

message RemoveResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    RemoveOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message RemoveOutput {
    Entry entry = 1;
}

message ClearRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ClearInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message ClearInput {
}

message ClearResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ClearOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message ClearOutput {
}

message EntriesRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EntriesInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message EntriesInput {
}

message EntriesResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EntriesOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message EntriesOutput {
    Entry entry = 1 [(gogoproto.nullable) = false];
}

message EventsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message EventsInput {
    Position pos = 1 [(gogoproto.nullable) = false];
    bool replay = 2;
}

message EventsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message EventsOutput {
    Type type = 1;
    Entry entry = 2 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        INSERTED = 1;
        UPDATED = 2;
        REMOVED = 3;
    }
}

message Position {
    uint64 index = 1;
    string key = 2;
}

message Entry {
    Position pos = 1 [(gogoproto.nullable) = false];
    Value value = 2 [(gogoproto.nullable) = false];
}

message Value {
    bytes value = 1;
    atomix.primitive.meta.Timestamp timestamp = 2 [(gogoproto.nullable) = false];
    google.protobuf.Duration ttl = 3 [(gogoproto.customname) = "TTL", (gogoproto.stdduration) = true];
}

message IndexedMapRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    IndexedMapInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message IndexedMapInput {
    oneof input {
        SizeInput size = 1;
        ExistsInput exists = 2;
        PutInput put = 3;
        GetInput get = 4;
        FirstEntryInput first_entry = 5;
        LastEntryInput last_entry = 6;
        PrevEntryInput prev_entry = 7;
        NextEntryInput next_entry = 8;
        RemoveInput remove = 9;
        ClearInput clear = 10;
        EventsInput events = 11;
        EntriesInput entries = 12;
    }
}

message IndexedMapResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    IndexedMapOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message IndexedMapOutput {
    oneof output {
        SizeOutput size = 1;
        ExistsOutput exists = 2;
        PutOutput put = 3;
        GetOutput get = 4;
        FirstEntryOutput first_entry = 5;
        LastEntryOutput last_entry = 6;
        PrevEntryOutput prev_entry = 7;
        NextEntryOutput next_entry = 8;
        RemoveOutput remove = 9;
        ClearOutput clear = 10;
        EventsOutput events = 11;
        EntriesOutput entries = 12;
    }
}

message SnapshotEntry {
    Entry entry = 1 [(gogoproto.nullable) = false];
}

message SnapshotRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message SnapshotResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SnapshotEntry entry = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message RestoreRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SnapshotEntry entry = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message RestoreResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

// IndexedMap service
service IndexedMapService {
    option (atomix.primitive.type) = "IndexedMap";

    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Exists checks whether a key exists in the map
    rpc Exists (ExistsRequest) returns (ExistsResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Put puts an entry into the map
    rpc Put (PutRequest) returns (PutResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // FirstEntry gets the first entry in the map
    rpc FirstEntry (FirstEntryRequest) returns (FirstEntryResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // LastEntry gets the last entry in the map
    rpc LastEntry (LastEntryRequest) returns (LastEntryResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // PrevEntry gets the previous entry in the map
    rpc PrevEntry (PrevEntryRequest) returns (PrevEntryResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // NextEntry gets the next entry in the map
    rpc NextEntry (NextEntryRequest) returns (NextEntryResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Snapshot exports a snapshot of the primitive state
    rpc Snapshot (SnapshotRequest) returns (stream SnapshotResponse) {
        option (atomix.primitive.optype) = SNAPSHOT;
    }

    // Restore imports a snapshot of the primitive state
    rpc Restore (stream RestoreRequest) returns (RestoreResponse) {
        option (atomix.primitive.optype) = RESTORE;
    }
}
