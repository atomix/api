/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "atomix/primitive/primitive.proto";
import "atomix/primitive/descriptor.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.counter;

message IncrementRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    IncrementInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message IncrementInput {
    int64 delta = 1;
}

message IncrementResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    IncrementOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message IncrementOutput {
    int64 previous_value = 1;
    int64 next_value = 2;
}

message DecrementRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    DecrementInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message DecrementInput {
    int64 delta = 1;
}

message DecrementResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    DecrementOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message DecrementOutput {
    int64 previous_value = 1;
    int64 next_value = 2;
}

message GetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message GetInput {
}

message GetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    GetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message GetOutput {
    int64 value = 1;
}

message SetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message SetInput {
    int64 value = 1;
}

message SetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message SetOutput {
    int64 previous_value = 1;
}

message CheckAndSetRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    CheckAndSetInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message CheckAndSetInput {
    int64 expect = 1;
    int64 update = 2;
}

message CheckAndSetResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    CheckAndSetOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message CheckAndSetOutput {
    bool succeeded = 1;
}

message Snapshot {
    int64 value = 1;
}

message SnapshotRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message SnapshotResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    Snapshot snapshot = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message RestoreRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    Snapshot snapshot = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message RestoreResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

// CounterService implements a distributed counter
service CounterService {
    option (atomix.primitive.type) = "Counter";

    // Set sets the counter value
    rpc Set (SetRequest) returns (SetResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Get gets the current counter value
    rpc Get (GetRequest) returns (GetResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Increment increments the counter value
    rpc Increment (IncrementRequest) returns (IncrementResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Decrement decrements the counter value
    rpc Decrement (DecrementRequest) returns (DecrementResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // CheckAndSet performs a check-and-set operation on the counter value
    rpc CheckAndSet (CheckAndSetRequest) returns (CheckAndSetResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Snapshot exports a snapshot of the primitive state
    rpc Snapshot (SnapshotRequest) returns (SnapshotResponse) {
        option (atomix.primitive.optype) = SNAPSHOT;
    }

    // Restore imports a snapshot of the primitive state
    rpc Restore (RestoreRequest) returns (RestoreResponse) {
        option (atomix.primitive.optype) = RESTORE;
    }
}