/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.primitive.set;

import "atomix/primitive/primitive.proto";
import "atomix/primitive/descriptor.proto";
import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

message SizeRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message SizeResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SizeOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message SizeOutput {
    uint32 size = 2 [(atomix.primitive.aggregate) = SUM];
}

message ContainsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ContainsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message ContainsInput {
    Element element = 1 [(gogoproto.nullable) = false];
}

message ContainsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ContainsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message ContainsOutput {
    bool contains = 2;
}

message AddRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    AddInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message AddInput {
    Element element = 1 [(gogoproto.nullable) = false];
}

message AddResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    AddOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message AddOutput {
    Element element = 1 [(gogoproto.nullable) = false];
}

message RemoveRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    RemoveInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message RemoveInput {
    Element element = 1 [(gogoproto.nullable) = false];
}

message RemoveResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    RemoveOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message RemoveOutput {
    Element element = 1 [(gogoproto.nullable) = false];
}

message ClearRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message ClearResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message EventsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message EventsInput {
    bool replay = 2;
}

message EventsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    EventsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message EventsOutput {
    Event event = 1 [(gogoproto.nullable) = false];
}

message Event {
    Type type = 1;
    Element element = 2 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        ADD = 1;
        REMOVE = 2;
        REPLAY = 3;
    }
}

message ElementsRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ElementsInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message ElementsInput {
}

message ElementsResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    ElementsOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message ElementsOutput {
    Element element = 1 [(gogoproto.nullable) = false];
}

message SnapshotEntry {
    Element element = 1 [(gogoproto.nullable) = false];
}

message SnapshotRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message SnapshotResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SnapshotEntry entry = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message RestoreRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    SnapshotEntry entry = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message RestoreResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
}

message Element {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    string value = 2 [(atomix.primitive.partitionkey) = true];
}

// Set service
service SetService {
    option (atomix.primitive.type) = "Set";
    option (atomix.primitive.partition) = true;

    // Size gets the number of elements in the set
    rpc Size (SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Contains returns whether the set contains a value
    rpc Contains (ContainsRequest) returns (ContainsResponse) {
        option (atomix.primitive.optype) = QUERY;
        option (atomix.primitive.partitionby) = HASH;
    }

    // Add adds a value to the set
    rpc Add (AddRequest) returns (AddResponse) {
        option (atomix.primitive.optype) = COMMAND;
        option (atomix.primitive.partitionby) = HASH;
    }

    // Remove removes a value from the set
    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.optype) = COMMAND;
        option (atomix.primitive.partitionby) = HASH;
    }

    // Clear removes all values from the set
    rpc Clear (ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Events listens for set change events
    rpc Events (EventsRequest) returns (stream EventsResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Elements lists all elements in the set
    rpc Elements (ElementsRequest) returns (stream ElementsResponse) {
        option (atomix.primitive.optype) = QUERY;
    }

    // Snapshot exports a snapshot of the primitive state
    rpc Snapshot (SnapshotRequest) returns (stream SnapshotResponse) {
        option (atomix.primitive.optype) = SNAPSHOT;
    }

    // Restore imports a snapshot of the primitive state
    rpc Restore (stream RestoreRequest) returns (RestoreResponse) {
        option (atomix.primitive.optype) = RESTORE;
    }
}
