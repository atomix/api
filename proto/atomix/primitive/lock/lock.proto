/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/protobuf/duration.proto";
import "atomix/primitive/primitive.proto";
import "atomix/primitive/service.proto";
import "atomix/primitive/operation.proto";
import "atomix/primitive/state.proto";
import "atomix/primitive/meta/object.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.lock;

message LockRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    LockInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message LockInput {
    google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true];
}

message LockResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    LockOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message LockOutput {
    Lock lock = 1 [(gogoproto.nullable) = false];
}

message UnlockRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    UnlockInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message UnlockInput {
    Lock lock = 1 [(gogoproto.nullable) = false];
}

message UnlockResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    UnlockOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message UnlockOutput {
    Lock lock = 1 [(gogoproto.nullable) = false];
}

message GetLockRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    GetLockInput input = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message GetLockInput {
    Lock lock = 1 [(gogoproto.nullable) = false];
}

message GetLockResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    GetLockOutput output = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message GetLockOutput {
    Lock lock = 1 [(gogoproto.nullable) = false];
}

message Lock {
    atomix.primitive.meta.ObjectMeta meta = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
    State state = 2;
    string holder = 3;
    repeated string queue = 4;

    enum State {
        UNLOCKED = 0;
        LOCKED = 1;
    }
}

message Snapshot {
    Lock lock = 1 [(atomix.primitive.state.entry) = true, (gogoproto.nullable) = false];
}

message SnapshotRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
}

message SnapshotResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    Snapshot snapshot = 2 [(atomix.primitive.operation.output) = true, (gogoproto.nullable) = false];
}

message RestoreRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
    Snapshot snapshot = 2 [(atomix.primitive.operation.input) = true, (gogoproto.nullable) = false];
}

message RestoreResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.operation.header) = true, (gogoproto.nullable) = false];
}

// LockService implements a distributed lock
service LockService {
    option (atomix.primitive.type) = "Lock";

    // Lock attempts to acquire the lock
    rpc Lock (LockRequest) returns (LockResponse) {
        option (atomix.primitive.operation.type) = COMMAND;
        option (atomix.primitive.operation.async) = true;
    }

    // Unlock releases the lock
    rpc Unlock (UnlockRequest) returns (UnlockResponse) {
        option (atomix.primitive.operation.type) = COMMAND;
    }

    // GetLock gets the lock state
    rpc GetLock (GetLockRequest) returns (GetLockResponse) {
        option (atomix.primitive.operation.type) = QUERY;
    }

    // Snapshot exports a snapshot of the primitive state
    rpc Snapshot (SnapshotRequest) returns (SnapshotResponse) {
        option (atomix.primitive.operation.type) = SNAPSHOT;
    }

    // Restore imports a snapshot of the primitive state
    rpc Restore (RestoreRequest) returns (RestoreResponse) {
        option (atomix.primitive.operation.type) = RESTORE;
    }
}