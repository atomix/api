/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/protobuf/duration.proto";
import "atomix/primitive/primitive.proto";
import "atomix/primitive/descriptor.proto";
import "atomix/primitive/meta/version.proto";
import "gogoproto/gogo.proto";

package atomix.primitive.lock;

message LockRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    LockInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message LockInput {
    google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true];
}

message LockResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    LockOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message LockOutput {
    atomix.primitive.meta.Version version = 2;
}

message UnlockRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    UnlockInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message UnlockInput {
    atomix.primitive.meta.Version version = 2;
}

message UnlockResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    UnlockOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message UnlockOutput {
    bool unlocked = 2;
}

message IsLockedRequest {
    atomix.primitive.RequestHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    IsLockedInput input = 2 [(atomix.primitive.input) = true, (gogoproto.nullable) = false];
}

message IsLockedInput {
    atomix.primitive.meta.Version version = 2;
}

message IsLockedResponse {
    atomix.primitive.ResponseHeader header = 1 [(atomix.primitive.header) = true, (gogoproto.nullable) = false];
    IsLockedOutput output = 2 [(atomix.primitive.output) = true, (gogoproto.nullable) = false];
}

message IsLockedOutput {
    bool isLocked = 2;
}

// LockService implements a distributed lock
service LockService {
    option (atomix.primitive.name) = "Lock";

    // Lock attempts to acquire the lock
    rpc Lock (LockRequest) returns (LockResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // Unlock releases the lock
    rpc Unlock (UnlockRequest) returns (UnlockResponse) {
        option (atomix.primitive.optype) = COMMAND;
    }

    // IsLocked checks whether the lock is held
    rpc IsLocked (IsLockedRequest) returns (IsLockedResponse) {
        option (atomix.primitive.optype) = QUERY;
    }
}