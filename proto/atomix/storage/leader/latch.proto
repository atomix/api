/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

package atomix.storage.leader;

message CreateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CreateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message LatchRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string participant_id = 2 [(gogoproto.customname) = "ParticipantID"];
}

message LatchResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Latch latch = 2;
}

message GetRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message GetResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Latch latch = 2;
}

message EventRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message EventResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Type type = 2;
    Latch latch = 3;

    enum Type {
        CHANGED = 0;
    }
}

message Latch {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
    string leader = 2;
    repeated string participants = 3;
}

// Leader latch service
service LeaderLatchService {

    // Create creates a leader latch
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a leader latch
    rpc Close (CloseRequest) returns (CloseResponse);

    // Latch attempts to acquire the leader latch
    rpc Latch (LatchRequest) returns (LatchResponse);

    // Get gets the current leader
    rpc Get (GetRequest) returns (GetResponse);

    // Events listens for leader change events
    rpc Events (EventRequest) returns (stream EventResponse);

}