/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.storage.indexedmap;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "atomix/storage/timestamp/timestamp.proto";
import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

message CreateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CreateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message ExistsRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string key = 2;
}

message ExistsResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    bool contains_key = 2;
}

message SizeRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message SizeResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint32 size = 2;
}

message PutRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    string key = 3;
    bytes value = 4;
    uint64 version = 5;
    bool if_empty = 7;
    google.protobuf.Duration ttl = 6 [(gogoproto.customname) = "TTL", (gogoproto.stdduration) = true];
}

message PutResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Entry entry = 2;
}

message GetRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    string key = 3;
}

message GetResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Entry entry = 2;
}

message FirstEntryRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message FirstEntryResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Entry entry = 2;
}

message LastEntryRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message LastEntryResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Entry entry = 2;
}

message PrevEntryRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
}

message PrevEntryResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Entry entry = 2;
}

message NextEntryRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
}

message NextEntryResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Entry entry = 2;
}

message RemoveRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    string key = 3;
    atomix.storage.timestamp.Timestamp timestamp = 4;
}

message RemoveResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Entry entry = 2;
}

message ClearRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message ClearResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message EntriesRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message EntriesResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Entry entry = 2 [(gogoproto.nullable) = false];
}

message EventRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool replay = 2;
    string key = 3;
    uint64 index = 4;
}

message EventResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Type type = 2;
    Entry entry = 3 [(gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        INSERTED = 1;
        UPDATED = 2;
        REMOVED = 3;
    }
}

message Entry {
    string key = 1;
    uint64 index = 2;
    bytes value = 3;
    atomix.storage.timestamp.Timestamp timestamp = 4 [(gogoproto.nullable) = false];
    google.protobuf.Timestamp created = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp updated = 6 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// IndexedMap service
service IndexedMapService {

    // Create creates an indexed map
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes an indexed map
    rpc Close (CloseRequest) returns (CloseResponse);

    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse);

    // Exists checks whether a key exists in the map
    rpc Exists (ExistsRequest) returns (ExistsResponse);

    // Put puts an entry into the map
    rpc Put (PutRequest) returns (PutResponse);

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse);

    // FirstEntry gets the first entry in the map
    rpc FirstEntry (FirstEntryRequest) returns (FirstEntryResponse);

    // LastEntry gets the last entry in the map
    rpc LastEntry (LastEntryRequest) returns (LastEntryResponse);

    // PrevEntry gets the previous entry in the map
    rpc PrevEntry (PrevEntryRequest) returns (PrevEntryResponse);

    // NextEntry gets the next entry in the map
    rpc NextEntry (NextEntryRequest) returns (NextEntryResponse);

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Events listens for change events
    rpc Events (EventRequest) returns (stream EventResponse);

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse);

}
