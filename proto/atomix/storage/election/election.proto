/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "atomix/storage/timestamp/timestamp.proto";
import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

package atomix.storage.election;

message CreateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CreateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message EnterRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string candidate_id = 2 [(gogoproto.customname) = "CandidateID"];
}

message EnterResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Term term = 2;
}

message WithdrawRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string candidate_id = 2 [(gogoproto.customname) = "CandidateID"];
}

message WithdrawResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Term term = 2;
}

message AnointRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string candidate_id = 2 [(gogoproto.customname) = "CandidateID"];
}

message AnointResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Term term = 2;
}

message PromoteRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string candidate_id = 2 [(gogoproto.customname) = "CandidateID"];
}

message PromoteResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Term term = 2;
}

message EvictRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string candidate_id = 2 [(gogoproto.customname) = "CandidateID"];
}

message EvictResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Term term = 2;
}

message GetTermRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message GetTermResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Term term = 2;
}

message EventRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message EventResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Type type = 2;
    Term term = 3;

    enum Type {
        CHANGED = 0;
    }
}

message Term {
    atomix.storage.timestamp.Epoch id = 1 [(gogoproto.nullable) = false];
    google.protobuf.Timestamp timestamp = 2 [(gogoproto.stdtime) = true];
    string leader = 3;
    repeated string candidates = 4;
}

// LeaderElectionService implements a distributed leader election
service LeaderElectionService {

    // Create creates a LeaderElection instance
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a LeaderElection instance
    rpc Close (CloseRequest) returns (CloseResponse);

    // Enter enters the leader election
    rpc Enter (EnterRequest) returns (EnterResponse);

    // Withdraw withdraws a candidate from the leader election
    rpc Withdraw (WithdrawRequest) returns (WithdrawResponse);

    // Anoint anoints a candidate leader
    rpc Anoint (AnointRequest) returns (AnointResponse);

    // Promote promotes a candidate
    rpc Promote (PromoteRequest) returns (PromoteResponse);

    // Evict evicts a candidate from the election
    rpc Evict (EvictRequest) returns (EvictResponse);

    // GetTerm gets the current leadership term
    rpc GetTerm (GetTermRequest) returns (GetTermResponse);

    // Events listens for leadership events
    rpc Events (EventRequest) returns (stream EventResponse);

}