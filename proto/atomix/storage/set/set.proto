/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.storage.set;

import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

message CreateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CreateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message SizeRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message SizeResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint32 size = 2;
}

message ContainsRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string value = 2;
}

message ContainsResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    bool contains = 2;
}

message AddRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string value = 2;
}

message AddResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
    bool added = 3;
}

message RemoveRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string value = 2;
}

message RemoveResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
    bool removed = 3;
}

message ClearRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message ClearResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message EventRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool replay = 2;
}

message EventResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Type type = 2;
    string value = 3;

    enum Type {
        NONE = 0;
        ADDED = 1;
        REMOVED = 2;
    }
}

message IterateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message IterateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    string value = 2;
}

enum ResponseStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
}

// Set service
service SetService {

    // Create creates a set session
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a set
    rpc Close (CloseRequest) returns (CloseResponse);

    // Size gets the number of elements in the set
    rpc Size (SizeRequest) returns (SizeResponse);

    // Contains returns whether the set contains a value
    rpc Contains (ContainsRequest) returns (ContainsResponse);

    // Add adds a value to the set
    rpc Add (AddRequest) returns (AddResponse);

    // Remove removes a value from the set
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Clear removes all values from the set
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Events listens for set change events
    rpc Events (EventRequest) returns (stream EventResponse);

    // Iterate iterates through all values in the set
    rpc Iterate (IterateRequest) returns (stream IterateResponse);

}
