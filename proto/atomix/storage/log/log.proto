/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.storage.log;

import "google/protobuf/timestamp.proto";
import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

message CreateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CreateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message ExistsRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
}

message ExistsResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    bool contains_index = 2;
}

message SizeRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message SizeResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    int32 size = 2;
}

message AppendRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    bytes value = 3;
}

message AppendResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
    uint64 index = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message GetRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
}

message GetResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message FirstEntryRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message FirstEntryResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message LastEntryRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message LastEntryResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

}

message PrevEntryRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
}

message PrevEntryResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message NextEntryRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
}

message NextEntryResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message RemoveRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message RemoveResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
    uint64 index = 3;
    bytes previous_value = 4;
}

message ClearRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message ClearResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

enum ResponseStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    PRECONDITION_FAILED = 3;
}

message EntriesRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message EntriesResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}


message EventRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool replay = 2;
    uint64 index = 3;
}

message EventResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Type type = 2;
    uint64 index = 3;
    bytes value = 4;
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        APPENDED = 1;
        REMOVED = 2;
    }
}

// LogService log service
service LogService {

    // Create creates a log
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a log
    rpc Close (CloseRequest) returns (CloseResponse);

    // Size returns the size of the log
    rpc Size (SizeRequest) returns (SizeResponse);

    // Exists checks whether an index exists in the log
    rpc Exists (ExistsRequest) returns (ExistsResponse);

    // Appends appends an entry into the log
    rpc Append (AppendRequest) returns (AppendResponse);

    // Get gets the entry for an index
    rpc Get (GetRequest) returns (GetResponse);

    // FirstEntry gets the first entry in the log
    rpc FirstEntry (FirstEntryRequest) returns (FirstEntryResponse);

    // LastEntry gets the last entry in the log
    rpc LastEntry (LastEntryRequest) returns (LastEntryResponse);

    // PrevEntry gets the previous entry in the log
    rpc PrevEntry (PrevEntryRequest) returns (PrevEntryResponse);

    // NextEntry gets the next entry in the log
    rpc NextEntry (NextEntryRequest) returns (NextEntryResponse);

    // Remove removes an entry from the log
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Clear removes all entries from the log
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Events listens for change events
    rpc Events (EventRequest) returns (stream EventResponse);

    // Entries lists all entries in the log
    rpc Entries (EntriesRequest) returns (stream EntriesResponse);

}

