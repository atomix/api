/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

package atomix.storage.counter;

message CreateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CreateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message IncrementRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    int64 delta = 2;
}

message IncrementResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    int64 previous_value = 2;
    int64 next_value = 3;
}

message DecrementRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    int64 delta = 2;
}

message DecrementResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    int64 previous_value = 2;
    int64 next_value = 3;
}

message GetRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message GetResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    int64 value = 2;
}

message SetRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    int64 value = 2;
}

message SetResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    int64 previous_value = 2;
}

message CheckAndSetRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    int64 expect = 2;
    int64 update = 3;
}

message CheckAndSetResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    bool succeeded = 2;
}

// CounterService implements a distributed counter
service CounterService {
    // Create creates a counter
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes the counter
    rpc Close (CloseRequest) returns (CloseResponse);

    // Set sets the counter value
    rpc Set (SetRequest) returns (SetResponse);

    // Get gets the current counter value
    rpc Get (GetRequest) returns (GetResponse);

    // Increment increments the counter value
    rpc Increment (IncrementRequest) returns (IncrementResponse);

    // Decrement decrements the counter value
    rpc Decrement (DecrementRequest) returns (DecrementResponse);

    // CheckAndSet performs a check-and-set operation on the counter value
    rpc CheckAndSet (CheckAndSetRequest) returns (CheckAndSetResponse);
}