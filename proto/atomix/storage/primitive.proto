/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.storage;

import "gogoproto/gogo.proto";

// Namespaced primitive identifier
message PrimitiveId {
    string type = 1;
    string name = 2;
    string namespace = 3;
}

// Request header
message RequestHeader {
    PrimitiveId primitive = 1 [(gogoproto.nullable) = false];
    RequestState state = 2;
}

// Response header
message ResponseHeader {
    ResponseType type = 1;
    ResponseStatus status = 2 [(gogoproto.nullable) = false];
    ResponseState state = 3;
}

// Request state
message RequestState {
    uint32 partition = 1;
    uint64 session_id = 2 [(gogoproto.customname) = "SessionID"];
    uint64 request_id = 3 [(gogoproto.customname) = "RequestID"];
    uint64 index = 4;
    repeated StreamState streams = 5 [(gogoproto.nullable) = false];
}

// Response state
message ResponseState {
    uint64 session_id = 1 [(gogoproto.customname) = "SessionID"];
    uint64 stream_id = 2 [(gogoproto.customname) = "StreamID"];
    uint64 response_id = 3 [(gogoproto.customname) = "ResponseID"];
    uint64 index = 4;
    string leader = 5;
}

// Stream state
message StreamState {
    uint64 stream_id = 1 [(gogoproto.customname) = "StreamID"];
    uint64 response_id = 2 [(gogoproto.customname) = "ResponseID"];
}

// Response type
enum ResponseType {
    RESPONSE = 0;
    OPEN_STREAM = 1;
    CLOSE_STREAM = 2;
}

// Response status
message ResponseStatus {
    ResponseCode code = 1;
    string message = 2;
}

// Response code
enum ResponseCode {
    OK = 0;
    ERROR = 1;
    NOT_LEADER = 2;
    UNKNOWN = 3;
    CANCELED = 4;
    NOT_FOUND = 5;
    ALREADY_EXISTS = 6;
    UNAUTHORIZED = 7;
    FORBIDDEN = 8;
    CONFLICT = 9;
    INVALID = 10;
    UNAVAILABLE = 11;
    NOT_SUPPORTED = 12;
    TIMEOUT = 13;
    INTERNAL = 14;
}
