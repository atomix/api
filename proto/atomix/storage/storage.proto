/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.storage;

import "gogoproto/gogo.proto";

// Storage identifier
message StorageId {
    // name is the name of the storage
    string name = 1;

    // namespace is the namespace to which the storage belongs
    string namespace = 2;
}

// Storage configuration
message StorageConfig {
    // nodes is a list of storage replicas
    repeated StorageReplica replicas = 1 [(gogoproto.nullable) = false];

    // partitions is a list of partitions owned by the replicas
    repeated StoragePartition partitions = 2 [(gogoproto.nullable) = false];
}

// Replica configuration
message StorageReplica {
    // id is the unique member identifier
    string id = 1 [(gogoproto.customname) = "ID"];

    // node_id is the ID of the node on which the replica is deployed
    string node_id = 2 [(gogoproto.customname) = "NodeID"];

    // host is the member host
    string host = 3;

    // api_port is the port to use for the client API
    int32 api_port = 4 [(gogoproto.customname) = "APIPort", (gogoproto.jsontag) = "apiPort"];

    // protocol_port is the port to use for intra-cluster communication
    int32 protocol_port = 5 [(gogoproto.jsontag) = "protocolPort"];
}

// Partition info
message StoragePartition {
    uint32 partition_id = 1 [(gogoproto.customname) = "PartitionID"];
    repeated string replicas = 2;
}

message UpdateRequest {
    StorageConfig config = 1 [(gogoproto.nullable) = false];
}

message UpdateResponse {

}

// Atomix storage service
service StorageService {
    // Update updates the storage configuration
    rpc Update (UpdateRequest) returns (UpdateResponse);
}
