/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.storage.list;

import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

message CreateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CreateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message SizeRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message SizeResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint32 size = 2;
}

message ContainsRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string value = 2;
}

message ContainsResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    bool contains = 2;
}

message AppendRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string value = 2;
}

message AppendResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
}

message GetRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint32 index = 2;
}

message GetResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
    string value = 3;
}

message SetRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint32 index = 2;
    string value = 3;
}

message SetResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
}

message InsertRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint32 index = 2;
    string value = 3;
}

message InsertResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
}

message RemoveRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint32 index = 2;
}

message RemoveResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    ResponseStatus status = 2;
    string value = 3;
}

message ClearRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message ClearResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message EventRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool replay = 2;
}

message EventResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Type type = 2;
    uint32 index = 3;
    string value = 4;

    enum Type {
        NONE = 0;
        ADDED = 1;
        REMOVED = 2;
    }
}

message IterateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message IterateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    string value = 2;
}

enum ResponseStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    OUT_OF_BOUNDS = 3;
}

// ListService implements a distributed list
service ListService {

    // Create creates a list session
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a list
    rpc Close (CloseRequest) returns (CloseResponse);

    // Size gets the number of elements in the list
    rpc Size (SizeRequest) returns (SizeResponse);

    // Contains returns whether the list contains a value
    rpc Contains (ContainsRequest) returns (ContainsResponse);

    // Append appends a value to the list
    rpc Append (AppendRequest) returns (AppendResponse);

    // Insert inserts a value at a specific index in the list
    rpc Insert (InsertRequest) returns (InsertResponse);

    // Get gets the value at an index in the list
    rpc Get (GetRequest) returns (GetResponse);

    // Set sets the value at an index in the list
    rpc Set (SetRequest) returns (SetResponse);

    // Remove removes an element from the list
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Clear removes all elements from the list
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Events listens for change events
    rpc Events (EventRequest) returns (stream EventResponse);

    // Iterate streams all values in the list
    rpc Iterate (IterateRequest) returns (stream IterateResponse);
}
