/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/protobuf/duration.proto";
import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

package atomix.storage.session;

message OpenSessionRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true];
}

message OpenSessionResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message KeepAliveRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message KeepAliveResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseSessionRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseSessionResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

// Session service
service SessionService {
    // OpenSession opens a new session
    rpc OpenSession (OpenSessionRequest) returns (OpenSessionResponse);

    // KeepAlive keeps a session alive
    rpc KeepAlive (KeepAliveRequest) returns (KeepAliveResponse);

    // CloseSession closes a session
    rpc CloseSession (CloseSessionRequest) returns (CloseSessionResponse);
}