/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/protobuf/duration.proto";
import "atomix/storage/primitive.proto";
import "gogoproto/gogo.proto";

package atomix.storage.lock;

message CreateRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
}

message CreateResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message CloseRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    bool delete = 2;
}

message CloseResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message LockRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true];
}

message LockResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint64 version = 2;
}

message UnlockRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 version = 2;
}

message UnlockResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    bool unlocked = 2;
}

message IsLockedRequest {
    atomix.storage.RequestHeader header = 1 [(gogoproto.nullable) = false];
    uint64 version = 2;
}

message IsLockedResponse {
    atomix.storage.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    bool isLocked = 2;
}

// LockService implements a distributed lock
service LockService {

    // Create creates a lock
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a lock
    rpc Close (CloseRequest) returns (CloseResponse);

    // Lock attempts to acquire the lock
    rpc Lock (LockRequest) returns (LockResponse);

    // Unlock releases the lock
    rpc Unlock (UnlockRequest) returns (UnlockResponse);

    // IsLocked checks whether the lock is held
    rpc IsLocked (IsLockedRequest) returns (IsLockedResponse);

}