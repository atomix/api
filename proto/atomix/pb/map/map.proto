/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.pb.map;

import "atomix/pb/headers/headers.proto";
import "gogoproto/gogo.proto";

message PutRequest {
    atomix.pb.headers.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string key = 2;
    Value value = 3 [(gogoproto.nullable) = false];
}

message PutResponse {
    atomix.pb.headers.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    uint64 version = 2;
}

message GetRequest {
    atomix.pb.headers.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string key = 2;
}

message GetResponse {
    atomix.pb.headers.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Value value = 2;
}

message RemoveRequest {
    atomix.pb.headers.RequestHeader header = 1 [(gogoproto.nullable) = false];
    string key = 2;
    Value value = 3 [(gogoproto.nullable) = false];
}

message RemoveResponse {
    atomix.pb.headers.ResponseHeader header = 1 [(gogoproto.nullable) = false];
    Value value = 2;
}

message BackupRequest {
    atomix.pb.headers.RequestHeader header = 1 [(gogoproto.nullable) = false];
    repeated Entry entries = 2 [(gogoproto.nullable) = false];
}

message BackupResponse {
    atomix.pb.headers.ResponseHeader header = 1 [(gogoproto.nullable) = false];
}

message Entry {
    string key = 1;
    Value value = 2;
    Digest digest = 3 [(gogoproto.nullable) = false];
}

message Value {
    bytes value = 1;
    uint64 version = 2;
}

message Digest {
    uint64 term = 1;
    uint64 timestamp = 2;
}

// MapService implements a partitioned primary-backup map
service MapService {
    // Puts a key/value in the map
    rpc Put (PutRequest) returns (PutResponse);

    // Gets a key from the map
    rpc Get (GetRequest) returns (GetResponse);

    // Removes a key from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Backs up changes to a replica
    rpc Backup (stream BackupRequest) returns (stream BackupResponse);
}
