/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.pb;

import "gogoproto/gogo.proto";

// Replica identifier
message ReplicaId {
    string name = 1;
    string namespace = 2;
}

// Replica is a partition replica
message Replica {
    ReplicaId id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
    string host = 2;
    int32 port = 3;
}

// Replica group identifier
message ReplicaGroupId {
    string name = 1;
    string namespace = 2;
}

// Replica group state
message ReplicaGroup {
    ReplicaGroupId id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
    repeated Partition partitions = 2 [(gogoproto.nullable) = false];
}

// Partition identifier
message PartitionId {
    string name = 1;
    string namespace = 2;
    uint32 index = 3;
}

// Partition
message Partition {
    PartitionId id = 1 [(gogoproto.customname) = "ID", (gogoproto.nullable) = false];
    uint64 term = 2 [(gogoproto.casttype) = "Term"];
    ReplicaId leader = 3;
    repeated Replica replicas = 4 [(gogoproto.nullable) = false];
}

message JoinReplicaGroupRequest {
    ReplicaId replica_id = 1 [(gogoproto.customname) = "ReplicaID"];
    ReplicaGroupId group_id = 2 [(gogoproto.customname) = "GroupID", (gogoproto.nullable) = false];
    uint32 partitions = 3;
    uint32 replication_factor = 4;
}

message JoinReplicaGroupResponse {
    ReplicaGroup group = 1 [(gogoproto.nullable) = false];
}

// Atomix replica group service
service ReplicaGroupService {
    // Joins a member to a replica group
    rpc JoinReplicaGroup (JoinReplicaGroupRequest) returns (stream JoinReplicaGroupResponse);
}
