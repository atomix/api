syntax = "proto3";

package atomix.database;

import "gogoproto/gogo.proto";

// Database identifier
message DatabaseId {
    // name is the name of the database
    string name = 1;

    // namespace is the namespace to which the database belongs
    string namespace = 2;
}

// Database configuration
message Database {
    // id is the database identifier
    DatabaseId id = 1 [(gogoproto.customname) = "ID"];

    // partitions is a list of partitions in the cluster
    repeated Partition partitions = 2;
}

// Cluster configuration
message ClusterConfig {
    // members is a list of cluster members
    repeated MemberConfig members = 1;

    // partitions is a list of partitions owned by the cluster
    repeated PartitionId partitions = 2;
}

// Member configuration
message MemberConfig {
    // id is the unique member identifier
    string id = 1 [(gogoproto.customname) = "ID"];

    // host is the member host
    string host = 2;

    // api_port is the port to use for the client API
    int32 api_port = 3 [(gogoproto.customname) = "APIPort", (gogoproto.jsontag) = "apiPort"];

    // protocol_port is the port to use for intra-cluster communication
    int32 protocol_port = 4 [(gogoproto.jsontag) = "protocolPort"];
}

// Partition identifier
message PartitionId {
    int32 partition = 1;
}

// Node configuration
message NodeConfig {
    option deprecated = true;
    string id = 1 [(gogoproto.customname) = "ID"];
    string host = 2;
    int32 port = 3;
    int32 api_port = 4 [(gogoproto.customname) = "APIPort", (gogoproto.jsontag) = "apiPort"];
    int32 protocol_port = 5 [(gogoproto.jsontag) = "protocolPort"];
}

// Partition info
message Partition {
    int32 partition_id = 1 [(gogoproto.customname) = "PartitionID"];
    repeated PartitionEndpoint endpoints = 2;
}

// Partition endpoint
message PartitionEndpoint {
    string host = 1;
    int32 port = 2;
}

// Gets a list of databases in a namespace
message GetDatabasesRequest {
    DatabaseId id = 1 [(gogoproto.customname) = "ID"];
}

// Returns a list of databases in a namespace
message GetDatabasesResponse {
    repeated Database databases = 1;
}

// Atomix database service
service DatabaseService {
    // GetDatabases gets a list of databases controlled by the controller
    rpc GetDatabases (GetDatabasesRequest) returns (GetDatabasesResponse);
}
