syntax = "proto3";

package atomix.database.log;

import "google/protobuf/timestamp.proto";
import "atomix/database/headers/headers.proto";
import "gogoproto/gogo.proto";

message CreateRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message CreateResponse {
    atomix.database.headers.ResponseHeader header = 1;
}

message CloseRequest {
    atomix.database.headers.RequestHeader header = 1;
    bool delete = 2;
}

message CloseResponse {
    atomix.database.headers.ResponseHeader header = 1;
}

message ExistsRequest {
    atomix.database.headers.RequestHeader header = 1;
    uint64 index = 2;
}

message ExistsResponse {
    atomix.database.headers.ResponseHeader header = 1;
    bool contains_index = 2;
}

message SizeRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message SizeResponse {
    atomix.database.headers.ResponseHeader header = 1;
    int32 size = 2;
}

message AppendRequest {
    atomix.database.headers.RequestHeader header = 1;
    int64 index = 2;
    bytes value = 3;
}

message AppendResponse {
    atomix.database.headers.ResponseHeader header = 1;
    ResponseStatus status = 2;
    int64 index = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message GetRequest {
    atomix.database.headers.RequestHeader header = 1;
    int64 index = 2;
}

message GetResponse {
    atomix.database.headers.ResponseHeader header = 1;
    int64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message FirstEntryRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message FirstEntryResponse {
    atomix.database.headers.ResponseHeader header = 1;
    int64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message LastEntryRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message LastEntryResponse {
    atomix.database.headers.ResponseHeader header = 1;
    int64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

}

message PrevEntryRequest {
    atomix.database.headers.RequestHeader header = 1;
    int64 index = 2;
}

message PrevEntryResponse {
    atomix.database.headers.ResponseHeader header = 1;
    int64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message NextEntryRequest {
    atomix.database.headers.RequestHeader header = 1;
    int64 index = 2;
}

message NextEntryResponse {
    atomix.database.headers.ResponseHeader header = 1;
    int64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message RemoveRequest {
    atomix.database.headers.RequestHeader header = 1;
    int64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message RemoveResponse {
    atomix.database.headers.ResponseHeader header = 1;
    ResponseStatus status = 2;
    int64 index = 3;
    bytes previous_value = 4;
}

message ClearRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message ClearResponse {
    atomix.database.headers.ResponseHeader header = 1;
}

enum ResponseStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    PRECONDITION_FAILED = 3;
}

message EntriesRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message EntriesResponse {
    atomix.database.headers.ResponseHeader header = 1;
    int64 index = 2;
    bytes value = 3;
    google.protobuf.Timestamp timestamp = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}


message EventRequest {
    atomix.database.headers.RequestHeader header = 1;
    bool replay = 2;
    int64 index = 3;
}

message EventResponse {
    atomix.database.headers.ResponseHeader header = 1;
    Type type = 2;
    int64 index = 3;
    bytes value = 4;
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

    enum Type {
        NONE = 0;
        APPENDED = 1;
        REMOVED = 2;
    }
}

// LogService log service
service LogService {

    // Create creates a log
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes a log
    rpc Close (CloseRequest) returns (CloseResponse);

    // Size returns the size of the log
    rpc Size (SizeRequest) returns (SizeResponse);

    // Exists checks whether an index exists in the log
    rpc Exists (ExistsRequest) returns (ExistsResponse);

    // Appends appends an entry into the log
    rpc Append (AppendRequest) returns (AppendResponse);

    // Get gets the entry for an index
    rpc Get (GetRequest) returns (GetResponse);

    // FirstEntry gets the first entry in the log
    rpc FirstEntry (FirstEntryRequest) returns (FirstEntryResponse);

    // LastEntry gets the last entry in the log
    rpc LastEntry (LastEntryRequest) returns (LastEntryResponse);

    // PrevEntry gets the previous entry in the log
    rpc PrevEntry (PrevEntryRequest) returns (PrevEntryResponse);

    // NextEntry gets the next entry in the log
    rpc NextEntry (NextEntryRequest) returns (NextEntryResponse);

    // Remove removes an entry from the log
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // Clear removes all entries from the log
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Events listens for change events
    rpc Events (EventRequest) returns (stream EventResponse);

    // Entries lists all entries in the log
    rpc Entries (EntriesRequest) returns (stream EntriesResponse);

}

