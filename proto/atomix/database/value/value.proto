syntax = "proto3";

package atomix.database.value;

import "atomix/database/headers/headers.proto";

message CreateRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message CreateResponse {
    atomix.database.headers.ResponseHeader header = 1;
}

message CloseRequest {
    atomix.database.headers.RequestHeader header = 1;
    bool delete = 2;
}

message CloseResponse {
    atomix.database.headers.ResponseHeader header = 1;
}

message GetRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message GetResponse {
    atomix.database.headers.ResponseHeader header = 1;
    bytes value = 2;
    uint64 version = 3;
}

message SetRequest {
    atomix.database.headers.RequestHeader header = 1;
    uint64 expect_version = 2;
    bytes expect_value = 3;
    bytes value = 4;
}

message SetResponse {
    atomix.database.headers.ResponseHeader header = 1;
    uint64 version = 2;
    bool succeeded = 3;
}

message EventRequest {
    atomix.database.headers.RequestHeader header = 1;
}

message EventResponse {
    atomix.database.headers.ResponseHeader header = 1;
    Type type = 2;
    bytes previous_value = 3;
    uint64 previous_version = 4;
    bytes new_value = 5;
    uint64 new_version = 6;

    enum Type {
        UPDATED = 0;
    }
}

// ValueService implements a distributed atomic value
service ValueService {

    // Create creates a new value session
    rpc Create (CreateRequest) returns (CreateResponse);

    // Close closes the value session
    rpc Close (CloseRequest) returns (CloseResponse);

    // Set sets the value
    rpc Set (SetRequest) returns (SetResponse);

    // Get gets the value
    rpc Get (GetRequest) returns (GetResponse);

    // Events listens for value change events
    rpc Events (EventRequest) returns (stream EventResponse);

}
