# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/storage/lock/lock.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import Optional

import betterproto
import grpclib

from .atomix import storage


@dataclass
class CreateRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)


@dataclass
class CreateResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)


@dataclass
class CloseRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    delete: bool = betterproto.bool_field(2)


@dataclass
class CloseResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)


@dataclass
class LockRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    timeout: timedelta = betterproto.message_field(2)


@dataclass
class LockResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)
    version: int = betterproto.uint64_field(2)


@dataclass
class UnlockRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    version: int = betterproto.uint64_field(2)


@dataclass
class UnlockResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)
    unlocked: bool = betterproto.bool_field(2)


@dataclass
class IsLockedRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    version: int = betterproto.uint64_field(2)


@dataclass
class IsLockedResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)
    is_locked: bool = betterproto.bool_field(2)


class LockServiceStub(betterproto.ServiceStub):
    """LockService implements a distributed lock"""

    async def create(
        self, *, header: Optional[storage.RequestHeader] = None
    ) -> CreateResponse:
        """Create creates a lock"""

        request = CreateRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.storage.lock.LockService/Create", request, CreateResponse,
        )

    async def close(
        self, *, header: Optional[storage.RequestHeader] = None, delete: bool = False
    ) -> CloseResponse:
        """Close closes a lock"""

        request = CloseRequest()
        if header is not None:
            request.header = header
        request.delete = delete

        return await self._unary_unary(
            "/atomix.storage.lock.LockService/Close", request, CloseResponse,
        )

    async def lock(
        self,
        *,
        header: Optional[storage.RequestHeader] = None,
        timeout: Optional[timedelta] = None,
    ) -> LockResponse:
        """Lock attempts to acquire the lock"""

        request = LockRequest()
        if header is not None:
            request.header = header
        if timeout is not None:
            request.timeout = timeout

        return await self._unary_unary(
            "/atomix.storage.lock.LockService/Lock", request, LockResponse,
        )

    async def unlock(
        self, *, header: Optional[storage.RequestHeader] = None, version: int = 0
    ) -> UnlockResponse:
        """Unlock releases the lock"""

        request = UnlockRequest()
        if header is not None:
            request.header = header
        request.version = version

        return await self._unary_unary(
            "/atomix.storage.lock.LockService/Unlock", request, UnlockResponse,
        )

    async def is_locked(
        self, *, header: Optional[storage.RequestHeader] = None, version: int = 0
    ) -> IsLockedResponse:
        """IsLocked checks whether the lock is held"""

        request = IsLockedRequest()
        if header is not None:
            request.header = header
        request.version = version

        return await self._unary_unary(
            "/atomix.storage.lock.LockService/IsLocked", request, IsLockedResponse,
        )
