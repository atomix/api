# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/storage/counter/counter.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Optional

import betterproto
import grpclib

from .atomix import storage


@dataclass
class CreateRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)


@dataclass
class CreateResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)


@dataclass
class CloseRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    delete: bool = betterproto.bool_field(2)


@dataclass
class CloseResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)


@dataclass
class IncrementRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    delta: int = betterproto.int64_field(2)


@dataclass
class IncrementResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)
    previous_value: int = betterproto.int64_field(2)
    next_value: int = betterproto.int64_field(3)


@dataclass
class DecrementRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    delta: int = betterproto.int64_field(2)


@dataclass
class DecrementResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)
    previous_value: int = betterproto.int64_field(2)
    next_value: int = betterproto.int64_field(3)


@dataclass
class GetRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)


@dataclass
class GetResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)
    value: int = betterproto.int64_field(2)


@dataclass
class SetRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    value: int = betterproto.int64_field(2)


@dataclass
class SetResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)
    previous_value: int = betterproto.int64_field(2)


@dataclass
class CheckAndSetRequest(betterproto.Message):
    header: storage.RequestHeader = betterproto.message_field(1)
    expect: int = betterproto.int64_field(2)
    update: int = betterproto.int64_field(3)


@dataclass
class CheckAndSetResponse(betterproto.Message):
    header: storage.ResponseHeader = betterproto.message_field(1)
    succeeded: bool = betterproto.bool_field(2)


class CounterServiceStub(betterproto.ServiceStub):
    """CounterService implements a distributed counter"""

    async def create(
        self, *, header: Optional[storage.RequestHeader] = None
    ) -> CreateResponse:
        """Create creates a counter"""

        request = CreateRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.storage.counter.CounterService/Create", request, CreateResponse,
        )

    async def close(
        self, *, header: Optional[storage.RequestHeader] = None, delete: bool = False
    ) -> CloseResponse:
        """Close closes the counter"""

        request = CloseRequest()
        if header is not None:
            request.header = header
        request.delete = delete

        return await self._unary_unary(
            "/atomix.storage.counter.CounterService/Close", request, CloseResponse,
        )

    async def set(
        self, *, header: Optional[storage.RequestHeader] = None, value: int = 0
    ) -> SetResponse:
        """Set sets the counter value"""

        request = SetRequest()
        if header is not None:
            request.header = header
        request.value = value

        return await self._unary_unary(
            "/atomix.storage.counter.CounterService/Set", request, SetResponse,
        )

    async def get(
        self, *, header: Optional[storage.RequestHeader] = None
    ) -> GetResponse:
        """Get gets the current counter value"""

        request = GetRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.storage.counter.CounterService/Get", request, GetResponse,
        )

    async def increment(
        self, *, header: Optional[storage.RequestHeader] = None, delta: int = 0
    ) -> IncrementResponse:
        """Increment increments the counter value"""

        request = IncrementRequest()
        if header is not None:
            request.header = header
        request.delta = delta

        return await self._unary_unary(
            "/atomix.storage.counter.CounterService/Increment",
            request,
            IncrementResponse,
        )

    async def decrement(
        self, *, header: Optional[storage.RequestHeader] = None, delta: int = 0
    ) -> DecrementResponse:
        """Decrement decrements the counter value"""

        request = DecrementRequest()
        if header is not None:
            request.header = header
        request.delta = delta

        return await self._unary_unary(
            "/atomix.storage.counter.CounterService/Decrement",
            request,
            DecrementResponse,
        )

    async def check_and_set(
        self,
        *,
        header: Optional[storage.RequestHeader] = None,
        expect: int = 0,
        update: int = 0,
    ) -> CheckAndSetResponse:
        """
        CheckAndSet performs a check-and-set operation on the counter value
        """

        request = CheckAndSetRequest()
        if header is not None:
            request.header = header
        request.expect = expect
        request.update = update

        return await self._unary_unary(
            "/atomix.storage.counter.CounterService/CheckAndSet",
            request,
            CheckAndSetResponse,
        )
