# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/storage/primitive.proto, atomix/storage/storage.proto, atomix/storage/metadata.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


class ResponseType(betterproto.Enum):
    """Response type"""

    RESPONSE = 0
    OPEN_STREAM = 1
    CLOSE_STREAM = 2


class ResponseCode(betterproto.Enum):
    """Response code"""

    OK = 0
    ERROR = 1
    NOT_LEADER = 2
    UNKNOWN = 3
    CANCELED = 4
    NOT_FOUND = 5
    ALREADY_EXISTS = 6
    UNAUTHORIZED = 7
    FORBIDDEN = 8
    CONFLICT = 9
    INVALID = 10
    UNAVAILABLE = 11
    NOT_SUPPORTED = 12
    TIMEOUT = 13
    INTERNAL = 14


@dataclass
class PrimitiveId(betterproto.Message):
    """Namespaced primitive identifier"""

    type: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    namespace: str = betterproto.string_field(3)


@dataclass
class RequestHeader(betterproto.Message):
    """Request header"""

    primitive: "PrimitiveId" = betterproto.message_field(1)
    state: "RequestState" = betterproto.message_field(2)


@dataclass
class ResponseHeader(betterproto.Message):
    """Response header"""

    state: "ResponseState" = betterproto.message_field(1)
    status: "ResponseStatus" = betterproto.message_field(2)


@dataclass
class RequestState(betterproto.Message):
    """Request state"""

    partition: int = betterproto.uint32_field(1)
    session_id: int = betterproto.uint64_field(2)
    request_id: int = betterproto.uint64_field(3)
    index: int = betterproto.uint64_field(4)
    streams: List["StreamState"] = betterproto.message_field(5)


@dataclass
class ResponseState(betterproto.Message):
    """Response state"""

    session_id: int = betterproto.uint64_field(1)
    stream_id: int = betterproto.uint64_field(2)
    response_id: int = betterproto.uint64_field(3)
    index: int = betterproto.uint64_field(4)
    leader: str = betterproto.string_field(5)
    type: "ResponseType" = betterproto.enum_field(6)


@dataclass
class StreamState(betterproto.Message):
    """Stream state"""

    stream_id: int = betterproto.uint64_field(1)
    response_id: int = betterproto.uint64_field(2)


@dataclass
class ResponseStatus(betterproto.Message):
    """Response status"""

    code: "ResponseCode" = betterproto.enum_field(1)
    message: str = betterproto.string_field(2)


@dataclass
class StorageId(betterproto.Message):
    """Storage identifier"""

    # name is the name of the storage
    name: str = betterproto.string_field(1)
    # namespace is the namespace to which the storage belongs
    namespace: str = betterproto.string_field(2)


@dataclass
class StorageConfig(betterproto.Message):
    """Storage configuration"""

    # nodes is a list of storage replicas
    replicas: List["StorageReplica"] = betterproto.message_field(1)
    # partitions is a list of partitions owned by the replicas
    partitions: List["StoragePartition"] = betterproto.message_field(2)


@dataclass
class StorageReplica(betterproto.Message):
    """Replica configuration"""

    # id is the unique member identifier
    id: str = betterproto.string_field(1)
    # host is the member host
    host: str = betterproto.string_field(2)
    # api_port is the port to use for the client API
    api_port: int = betterproto.int32_field(3)
    # protocol_port is the port to use for intra-cluster communication
    protocol_port: int = betterproto.int32_field(4)


@dataclass
class PartitionId(betterproto.Message):
    """Partition identifier"""

    partition: int = betterproto.int32_field(1)


@dataclass
class StoragePartition(betterproto.Message):
    """Partition info"""

    partition_id: "PartitionId" = betterproto.message_field(1)
    endpoints: List["PartitionEndpoint"] = betterproto.message_field(2)


@dataclass
class PartitionEndpoint(betterproto.Message):
    """Partition endpoint"""

    host: str = betterproto.string_field(1)
    port: int = betterproto.int32_field(2)


@dataclass
class AddReplicaRequest(betterproto.Message):
    replica: "StorageReplica" = betterproto.message_field(1)


@dataclass
class AddReplicaResponse(betterproto.Message):
    status: "ResponseStatus" = betterproto.message_field(1)


@dataclass
class RemoveReplicaRequest(betterproto.Message):
    replica_id: str = betterproto.string_field(1)


@dataclass
class RemoveReplicaResponse(betterproto.Message):
    status: "ResponseStatus" = betterproto.message_field(1)


@dataclass
class CreatePrimitiveRequest(betterproto.Message):
    """CreatePrimitiveRequest is a request to create a primitive"""

    storage: "StorageId" = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)


@dataclass
class CreatePrimitiveResponse(betterproto.Message):
    """CreatePrimitiveResponse is a response for creating a primitive"""

    primitive: "PrimitiveMetadata" = betterproto.message_field(1)


@dataclass
class GetPrimitiveRequest(betterproto.Message):
    """GetPrimitiveRequest is a request for primitive metadata"""

    storage: "StorageId" = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)


@dataclass
class GetPrimitiveResponse(betterproto.Message):
    """GetPrimitiveResponse is a response containing primitive metadata"""

    primitive: "PrimitiveMetadata" = betterproto.message_field(1)


@dataclass
class GetPrimitivesRequest(betterproto.Message):
    """GetPrimitivesRequest is a request for primitive metadata"""

    storage: "StorageId" = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)


@dataclass
class GetPrimitivesResponse(betterproto.Message):
    """GetPrimitivesResponse is a response containing primitive metadata"""

    primitives: List["PrimitiveMetadata"] = betterproto.message_field(1)


@dataclass
class PrimitiveMetadata(betterproto.Message):
    """PrimitiveMetadata indicates the type and name of a primitive"""

    storage: "StorageId" = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)


@dataclass
class DeletePrimitiveRequest(betterproto.Message):
    """DeletePrimitiveRequest is a request to delete a primitive"""

    storage: "StorageId" = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)


@dataclass
class DeletePrimitiveResponse(betterproto.Message):
    """DeletePrimitiveResponse is a response for deleting a primitive"""

    primitive: "PrimitiveMetadata" = betterproto.message_field(1)


class StorageServiceStub(betterproto.ServiceStub):
    """Atomix storage service"""

    async def add_replica(
        self, *, replica: Optional["StorageReplica"] = None
    ) -> AddReplicaResponse:
        """AddReplica adds a replica to the storage"""

        request = AddReplicaRequest()
        if replica is not None:
            request.replica = replica

        return await self._unary_unary(
            "/atomix.storage.StorageService/AddReplica", request, AddReplicaResponse,
        )

    async def remove_replica(self, *, replica_id: str = "") -> RemoveReplicaResponse:
        """RemoveReplica removes a replica from the storage"""

        request = RemoveReplicaRequest()
        request.replica_id = replica_id

        return await self._unary_unary(
            "/atomix.storage.StorageService/RemoveReplica",
            request,
            RemoveReplicaResponse,
        )


class PrimitiveServiceStub(betterproto.ServiceStub):
    """
    PrimitiveService is a service for providing partition/primitive metadata
    """

    async def create_primitive(
        self,
        *,
        storage: Optional["StorageId"] = None,
        primitive: Optional["PrimitiveId"] = None,
    ) -> CreatePrimitiveResponse:
        """CreatePrimitive creates a new primitive"""

        request = CreatePrimitiveRequest()
        if storage is not None:
            request.storage = storage
        if primitive is not None:
            request.primitive = primitive

        return await self._unary_unary(
            "/atomix.storage.PrimitiveService/CreatePrimitive",
            request,
            CreatePrimitiveResponse,
        )

    async def get_primitive(
        self,
        *,
        storage: Optional["StorageId"] = None,
        primitive: Optional["PrimitiveId"] = None,
    ) -> GetPrimitiveResponse:
        """GetPrimitive returns a primitive in the system"""

        request = GetPrimitiveRequest()
        if storage is not None:
            request.storage = storage
        if primitive is not None:
            request.primitive = primitive

        return await self._unary_unary(
            "/atomix.storage.PrimitiveService/GetPrimitive",
            request,
            GetPrimitiveResponse,
        )

    async def get_primitives(
        self,
        *,
        storage: Optional["StorageId"] = None,
        primitive: Optional["PrimitiveId"] = None,
    ) -> GetPrimitivesResponse:
        """GetPrimitives returns a list of primitives in the system"""

        request = GetPrimitivesRequest()
        if storage is not None:
            request.storage = storage
        if primitive is not None:
            request.primitive = primitive

        return await self._unary_unary(
            "/atomix.storage.PrimitiveService/GetPrimitives",
            request,
            GetPrimitivesResponse,
        )

    async def delete_primitive(
        self,
        *,
        storage: Optional["StorageId"] = None,
        primitive: Optional["PrimitiveId"] = None,
    ) -> DeletePrimitiveResponse:
        """DeletePrimitive deletes a primitive"""

        request = DeletePrimitiveRequest()
        if storage is not None:
            request.storage = storage
        if primitive is not None:
            request.primitive = primitive

        return await self._unary_unary(
            "/atomix.storage.PrimitiveService/DeletePrimitive",
            request,
            DeletePrimitiveResponse,
        )
