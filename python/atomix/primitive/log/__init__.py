# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/primitive/log/log.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Optional

import betterproto
import grpclib


class EventType(betterproto.Enum):
    NONE = 0
    APPEND = 1
    REMOVE = 2
    REPLAY = 3


@dataclass(eq=False, repr=False)
class SizeRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SizeResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    size: int = betterproto.int32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)
    index: int = betterproto.uint64_field(2)
    value: bytes = betterproto.bytes_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AppendResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)
    index: int = betterproto.uint64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class GetResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class FirstEntryRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class FirstEntryResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LastEntryRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class LastEntryResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PrevEntryRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)
    index: int = betterproto.uint64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PrevEntryResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NextEntryRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)
    index: int = betterproto.uint64_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NextEntryResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RemoveRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RemoveResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ClearRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ClearResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EntriesRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EntriesResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EventsRequest(betterproto.Message):
    headers: "__primitive__.RequestHeaders" = betterproto.message_field(1)
    replay: bool = betterproto.bool_field(2)
    index: int = betterproto.uint64_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EventsResponse(betterproto.Message):
    headers: "__primitive__.ResponseHeaders" = betterproto.message_field(1)
    event: "Event" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Event(betterproto.Message):
    type: "EventType" = betterproto.enum_field(1)
    entry: "Entry" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Entry(betterproto.Message):
    meta: "_meta__.ObjectMeta" = betterproto.message_field(1)
    index: int = betterproto.uint64_field(2)
    value: bytes = betterproto.bytes_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


class LogServiceStub(betterproto.ServiceStub):
    """LogService log service"""

    async def size(
        self, *, headers: "__primitive__.RequestHeaders" = None
    ) -> "SizeResponse":
        """Size returns the size of the log"""

        request = SizeRequest()
        if headers is not None:
            request.headers = headers

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/Size", request, SizeResponse
        )

    async def append(
        self,
        *,
        headers: "__primitive__.RequestHeaders" = None,
        index: int = 0,
        value: bytes = b"",
    ) -> "AppendResponse":
        """Appends appends an entry into the log"""

        request = AppendRequest()
        if headers is not None:
            request.headers = headers
        request.index = index
        request.value = value

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/Append", request, AppendResponse
        )

    async def get(
        self, *, headers: "__primitive__.RequestHeaders" = None, index: int = 0
    ) -> "GetResponse":
        """Get gets the entry for an index"""

        request = GetRequest()
        if headers is not None:
            request.headers = headers
        request.index = index

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/Get", request, GetResponse
        )

    async def first_entry(
        self, *, headers: "__primitive__.RequestHeaders" = None
    ) -> "FirstEntryResponse":
        """FirstEntry gets the first entry in the log"""

        request = FirstEntryRequest()
        if headers is not None:
            request.headers = headers

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/FirstEntry", request, FirstEntryResponse
        )

    async def last_entry(
        self, *, headers: "__primitive__.RequestHeaders" = None
    ) -> "LastEntryResponse":
        """LastEntry gets the last entry in the log"""

        request = LastEntryRequest()
        if headers is not None:
            request.headers = headers

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/LastEntry", request, LastEntryResponse
        )

    async def prev_entry(
        self, *, headers: "__primitive__.RequestHeaders" = None, index: int = 0
    ) -> "PrevEntryResponse":
        """PrevEntry gets the previous entry in the log"""

        request = PrevEntryRequest()
        if headers is not None:
            request.headers = headers
        request.index = index

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/PrevEntry", request, PrevEntryResponse
        )

    async def next_entry(
        self, *, headers: "__primitive__.RequestHeaders" = None, index: int = 0
    ) -> "NextEntryResponse":
        """NextEntry gets the next entry in the log"""

        request = NextEntryRequest()
        if headers is not None:
            request.headers = headers
        request.index = index

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/NextEntry", request, NextEntryResponse
        )

    async def remove(
        self, *, headers: "__primitive__.RequestHeaders" = None, entry: "Entry" = None
    ) -> "RemoveResponse":
        """Remove removes an entry from the log"""

        request = RemoveRequest()
        if headers is not None:
            request.headers = headers
        if entry is not None:
            request.entry = entry

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/Remove", request, RemoveResponse
        )

    async def clear(
        self, *, headers: "__primitive__.RequestHeaders" = None
    ) -> "ClearResponse":
        """Clear removes all entries from the log"""

        request = ClearRequest()
        if headers is not None:
            request.headers = headers

        return await self._unary_unary(
            "/atomix.primitive.log.LogService/Clear", request, ClearResponse
        )

    async def events(
        self,
        *,
        headers: "__primitive__.RequestHeaders" = None,
        replay: bool = False,
        index: int = 0,
    ) -> AsyncIterator["EventsResponse"]:
        """Events listens for change events"""

        request = EventsRequest()
        if headers is not None:
            request.headers = headers
        request.replay = replay
        request.index = index

        async for response in self._unary_stream(
            "/atomix.primitive.log.LogService/Events",
            request,
            EventsResponse,
        ):
            yield response

    async def entries(
        self, *, headers: "__primitive__.RequestHeaders" = None
    ) -> AsyncIterator["EntriesResponse"]:
        """Entries lists all entries in the log"""

        request = EntriesRequest()
        if headers is not None:
            request.headers = headers

        async for response in self._unary_stream(
            "/atomix.primitive.log.LogService/Entries",
            request,
            EntriesResponse,
        ):
            yield response


from .. import meta as _meta__
from ... import primitive as __primitive__
